<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MySQL安装</title>
    <url>/2023/07/23/MySQL%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<hr>
<h2 id="1-下载MySQL"><a href="#1-下载MySQL" class="headerlink" title="1.下载MySQL"></a>1.下载MySQL</h2><p>= (MySQL开源社区版下载链接)[<a href="https://dev.mysql.com/downloads/mysql/]">https://dev.mysql.com/downloads/mysql/]</a></p>
<h2 id="2-配置my-ini文件"><a href="#2-配置my-ini文件" class="headerlink" title="2.配置my.ini文件"></a>2.配置my.ini文件</h2><ul>
<li>在MySQL安装位置所在文件夹中新建<code>my.ini</code></li>
<li>文件内容如下  <figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment"># 设置3306端口</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="comment"># 设置mysql的安装目录 ---这里输入你安装的文件路径----</span></span><br><span class="line"><span class="attr">basedir</span>=D:\environment\mysql-<span class="number">8.1</span>.<span class="number">0</span>-winx64</span><br><span class="line"><span class="comment"># 设置mysql数据库的数据的存放目录</span></span><br><span class="line"><span class="attr">datadir</span>=D:\environment\mysql-<span class="number">8.1</span>.<span class="number">0</span>-winx64\data</span><br><span class="line"><span class="comment"># 允许最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">200</span></span><br><span class="line"><span class="comment"># 允许连接失败的次数。</span></span><br><span class="line"><span class="attr">max_connect_errors</span>=<span class="number">10</span></span><br><span class="line"><span class="comment"># 服务端使用的字符集默认为utf8</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB</span><br><span class="line"><span class="comment"># 默认使用“mysql_native_password”插件认证</span></span><br><span class="line"><span class="comment">#mysql_native_password</span></span><br><span class="line"><span class="attr">default_authentication_plugin</span>=mysql_native_password</span><br><span class="line"><span class="section">[mysql]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端连接服务端时默认使用的端口</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">3306</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="3-安装MySQL"><a href="#3-安装MySQL" class="headerlink" title="3.安装MySQL"></a>3.安装MySQL</h2><ul>
<li>进入bin文件夹</li>
<li>输入如下面命令安装<code>MySQL</code>，并记住命令中生成的密码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqld --initialize --console</span><br></pre></td></tr></table></figure></li>
<li>安装MySQL服务<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqld --install mysql</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="4-修改密码"><a href="#4-修改密码" class="headerlink" title="4.修改密码"></a>4.修改密码</h2><ul>
<li>连接MySQL服务器，在cmd中输入如下命令  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure></li>
<li>修改密码为<code>123456</code>，输入如下命令  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;123456&#39;;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h2 id="5-配置环境变量"><a href="#5-配置环境变量" class="headerlink" title="5.配置环境变量"></a>5.配置环境变量</h2><ul>
<li>新建系统变量<code>MYSQL_HOME</code>，值为MySQL所在文件夹</li>
<li>在系统变量<code>path</code>中增加如下内容  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%MYSQL_HOME%\bin</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>数据库</category>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>批量复制并重命名文件</title>
    <url>/2023/01/10/%E6%89%B9%E9%87%8F%E5%A4%8D%E5%88%B6%E5%B9%B6%E9%87%8D%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<ul>
<li><code>image</code>为存放图片的文件夹,将一个需要被复制的文件放入<code>image</code>文件夹中</li>
<li><code>test.txt</code>存储的内容为新的文件名称<div  align="center">
<img src="https://gcore.jsdelivr.net/gh/phd99/img/技术/python/1.png" width = 20% />
</div>


</li>
</ul>
<a id="more"></a>
<hr>
<ul>
<li>代码<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="comment"># 要复制的文件所在的文件夹</span></span><br><span class="line">ori_dir = <span class="string">&#x27;C:/Users/Administrator/Desktop/test/image/&#x27;</span></span><br><span class="line"><span class="comment"># 存储有文件名的文本文件</span></span><br><span class="line">txt_path = <span class="string">&#x27;C:/Users/Administrator/Desktop/test/test.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plFile</span>():</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    批量复制并重命名文件</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 获取文件夹中第一个文件</span></span><br><span class="line">    list_file = os.listdir(ori_dir)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(list_file) == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">&#x27;image文件夹中无文件!!!!!!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    first_file = list_file[<span class="number">0</span>]</span><br><span class="line">    first_path = os.path.join(ori_dir, first_file)</span><br><span class="line">    is_exist = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> getTxt():</span><br><span class="line">        new_path = os.path.join(ori_dir, name + <span class="string">&#x27;.jpg&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(ori_dir):</span><br><span class="line">            <span class="keyword">if</span> os.path.exists(new_path):</span><br><span class="line">                print(<span class="string">&#x27;该文件已存在!!!!!!&#x27;</span>)</span><br><span class="line">                is_exist = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                shutil.copy(first_path, new_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> is_exist:</span><br><span class="line">        <span class="comment"># 删除被复制的源文件</span></span><br><span class="line">        os.remove(first_path)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getTxt</span>():</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    获取文本中的内容</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    f = <span class="built_in">open</span>(txt_path, encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    data = f.readlines()</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>(data):</span><br><span class="line">        data[i] = data[i].strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">    f.close()</span><br><span class="line">    print(<span class="built_in">len</span>(data))</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    plFile()</span><br></pre></td></tr></table></figure>
<!--more-->
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL常用函数</title>
    <url>/2023/01/08/MySQL%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="substring-index"><a href="#substring-index" class="headerlink" title="substring_index"></a>substring_index</h2><ul>
<li>用于获取字符串中的一部分值</li>
<li><code>substring_index(value, &#39;分隔符&#39;, index)</code></li>
<li>若<code>index</code>为正数<ul>
<li>获取的值为：从左往右数，第<code>index</code>个分隔符之前的内容</li>
</ul>
</li>
<li>若<code>index</code>为负数<ul>
<li>获取的值为：从右往左数，第<code>|index|</code>个分隔符之后的内容</li>
</ul>
</li>
</ul>
<a id="more"></a>


<h3 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h3><ul>
<li>取<code>new_table.value1</code>的第一个<code>,</code>前面的内容<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- new_table.value1的值为：1,2,3</span></span><br><span class="line">substring_index(new_table.value1, <span class="string">&#x27;,&#x27;</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">-- 结果为：1</span></span><br></pre></td></tr></table></figure></li>
<li>取<code>new_table.value1</code>的倒数第一个<code>,</code>后面的内容<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- new_table.value1的值为：1,2,3</span></span><br><span class="line">substring_index(new_table.value1, <span class="string">&#x27;,&#x27;</span>, <span class="number">-1</span>)</span><br><span class="line"><span class="comment">-- 结果为：3</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h2 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h2><ul>
<li>用于拼接字符串</li>
<li><code>concat(&#39;字符串1&#39;, &#39;字符串2&#39;, &#39;字符串3&#39;...)</code></li>
</ul>
<h3 id="范例-1"><a href="#范例-1" class="headerlink" title="范例"></a>范例</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">concat(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"><span class="comment">-- 值为：12</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="concat-ws"><a href="#concat-ws" class="headerlink" title="concat_ws"></a>concat_ws</h2><ul>
<li>用于拼接字符串，且将各字符串之间用分隔符隔开</li>
<li><code>concat_ws(&#39;分隔符&#39;, &#39;字符串1&#39;, &#39;字符串2&#39;, &#39;字符串3&#39;...)</code></li>
</ul>
<h3 id="范例-2"><a href="#范例-2" class="headerlink" title="范例"></a>范例</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">concat_ws(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line"><span class="comment">-- 值为：1,2,3</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="group-concat"><a href="#group-concat" class="headerlink" title="group_concat"></a>group_concat</h2><ul>
<li>可将同一分组中的多个值合并为一个字符串，每个值之间用逗号隔开</li>
<li><code>group_concat(要合并的列名 [order by 列名])</code></li>
</ul>
<h3 id="范例-3"><a href="#范例-3" class="headerlink" title="范例"></a>范例</h3><ul>
<li><p>有一张<code>student</code>表，如下图</p>
<div  align="center">
<img src="https://gcore.jsdelivr.net/gh/phd99/img/技术/mysql/1.jpg
" width = 60% />
</div>
</li>
<li><p>将表<code>student</code>按性别分组，且将性别相同名称合并，并按从小到大的顺序排序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">sex,</span><br><span class="line">group_concat(name <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>)</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> student.sex</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h2 id="日期加减"><a href="#日期加减" class="headerlink" title="日期加减"></a>日期加减</h2><ul>
<li>加1天<ul>
<li><code>date_add(日期, interval 1 day)</code></li>
</ul>
</li>
<li>加1月<ul>
<li><code>date_add(日期, interval 1 month)</code></li>
</ul>
</li>
<li>加1年<ul>
<li><code>date_add(日期, interval 1 year)</code></li>
</ul>
</li>
<li>减法使用<code>date_sub()</code></li>
</ul>
<h3 id="范例-4"><a href="#范例-4" class="headerlink" title="范例"></a>范例</h3><ul>
<li>将<code>sys_last_upd</code>加1年减1天<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">date_sub(date_add(sys_last_upd, <span class="type">interval</span> <span class="number">1</span> <span class="keyword">year</span>), <span class="type">interval</span> <span class="number">1</span> <span class="keyword">DAY</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h2 id="format"><a href="#format" class="headerlink" title="format"></a>format</h2><ul>
<li>用于四舍五入小数位数，且结果为字符串</li>
<li><code>format(数值, 要保留的小数位数)</code></li>
</ul>
<h3 id="范例-5"><a href="#范例-5" class="headerlink" title="范例"></a>范例</h3><ul>
<li>保留两位小数<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">format(<span class="number">11.1111</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">-- 结果为：11.11</span></span><br></pre></td></tr></table></figure>
<!--more--></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>数据库</category>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>vue中props的使用</title>
    <url>/2022/12/04/vue%E4%B8%ADprops%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="步骤一：设置自定义属性"><a href="#步骤一：设置自定义属性" class="headerlink" title="步骤一：设置自定义属性"></a>步骤一：设置自定义属性</h2><ul>
<li>创建<code>Test2.vue</code>组件</li>
<li>在<code>export default</code>中使用<code>props</code>来自定义属性<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// props: [&#x27;自定义属性1&#x27;, &#x27;自定义属性2&#x27;, &#x27;自定义属性3&#x27;...]</span></span><br><span class="line">    props: [<span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;value2&#x27;</span>, <span class="string">&#x27;value3&#x27;</span>],</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<a id="more"></a>
<h2 id="步骤二：显示属性值"><a href="#步骤二：显示属性值" class="headerlink" title="步骤二：显示属性值"></a>步骤二：显示属性值</h2><ul>
<li>使用<code>&#123;&#123;&#125;&#125;</code>，引用自定义属性值，将其显示到界面中<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        值1为: &#123;&#123;value1&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        值2为: &#123;&#123;value2&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        值3为: &#123;&#123;value3&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="步骤三：引用Test2-vue组件"><a href="#步骤三：引用Test2-vue组件" class="headerlink" title="步骤三：引用Test2.vue组件"></a>步骤三：引用<code>Test2.vue</code>组件</h2><ul>
<li>在<code>App.vue</code>中引用<code>Test2.vue</code>组件<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">import</span> Test2 <span class="keyword">from</span> <span class="string">&#x27;@/components/Test2.vue&#x27;</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">      Test2</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="步骤四：设置初始值"><a href="#步骤四：设置初始值" class="headerlink" title="步骤四：设置初始值"></a>步骤四：设置初始值</h2><ul>
<li>在<code>App.vue</code>中使用<code>Test2.vue</code>组件时，给<code>Test2.vue</code>组件的自定义属性设置初始值</li>
<li>注意<ul>
<li><code>value1=&quot;11&quot;</code>中的11为字符串</li>
<li><code>:value2=&quot;15&quot;</code>和<code>:value3=&quot;20&quot;</code>中的15和20为数值</li>
<li>即使用了<code>:</code>时，显示的为数值；未使用<code>:</code>时，显示的为字符串<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Test2</span> <span class="attr">value1</span>=<span class="string">&quot;11&quot;</span> <span class="attr">:value2</span>=<span class="string">&quot;15&quot;</span> <span class="attr">:value3</span>=<span class="string">&quot;20&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Test2</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ul>
<h2 id="各组件代码"><a href="#各组件代码" class="headerlink" title="各组件代码"></a>各组件代码</h2><ul>
<li><code>Test2.vue</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        值1为: &#123;&#123;value1&#125;&#125;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        值2为: &#123;&#123;value2&#125;&#125;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        值3为: &#123;&#123;value3&#125;&#125;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    props: [&#39;value1&#39;, &#39;value2&#39;, &#39;value3&#39;],</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>
<li><code>App.vue</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Test2 value1&#x3D;&quot;11&quot; :value2&#x3D;&quot;15&quot; :value3&#x3D;&quot;20&quot;&gt;&lt;&#x2F;Test2&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import Test2 from &#39;@&#x2F;components&#x2F;Test2.vue&#39;</span><br><span class="line">  export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">      Test2</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<!--more--></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>WEB开发</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue中methods的使用</title>
    <url>/2022/12/03/vue%E4%B8%ADmethods%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h2><ul>
<li>在<code>export default</code>中定义<code>methods</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  methods: &#123;&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<a id="more"></a>
<h2 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h2><ul>
<li>在<code>methods</code>的<code>&#123;&#125;</code>中定义方法<code>test1</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">test1</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="comment">//this表示当前组件的实例对象</span></span><br><span class="line">      <span class="built_in">this</span>.username1 = <span class="string">&#x27;李四&#x27;</span></span><br><span class="line">      <span class="comment">//打印当前组件</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="步骤三"><a href="#步骤三" class="headerlink" title="步骤三"></a>步骤三</h2><ul>
<li>调用<code>test1</code>方法<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>宝剑锋从磨砺出，梅花香自苦寒来。&#123;&#123;username&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;test1&quot;</span>&gt;</span>测试按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h2><ul>
<li>当点击测试按钮时，张三变成了李四<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;宝剑锋从磨砺出，梅花香自苦寒来。&#123;&#123;username&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;test1&quot;&gt;测试按钮&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      username: &#39;张三&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    test1() &#123;</span><br><span class="line">      &#x2F;&#x2F;this表示当前组件的实例对象</span><br><span class="line">      this.username1 &#x3D; &#39;李四&#39;</span><br><span class="line">      &#x2F;&#x2F;打印当前组件</span><br><span class="line">      console.log(this)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<!--more--></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>WEB开发</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode中配置@路径提示</title>
    <url>/2022/12/02/vscode%E4%B8%AD%E9%85%8D%E7%BD%AE@%E8%B7%AF%E5%BE%84%E6%8F%90%E7%A4%BA/</url>
    <content><![CDATA[<h2 id="步骤一：配置webpack-config"><a href="#步骤一：配置webpack-config" class="headerlink" title="步骤一：配置webpack.config"></a>步骤一：配置webpack.config</h2><ul>
<li>在<code>webpack.config.js</code>文件的<code>module.exports</code>中添加如下内容<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">  alias: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: path.join(__dirname, <span class="string">&#x27;./src/&#x27;</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<a id="more"></a>
<h2 id="步骤二：安装插件"><a href="#步骤二：安装插件" class="headerlink" title="步骤二：安装插件"></a>步骤二：安装插件</h2><ul>
<li>在vscode中安装<code>Path Autocomplete</code>插件<div  align="center">
<img src="./img/vscode中配置@路径提示/1.jpg" width = 80% />
</div>


</li>
</ul>
<h2 id="步骤三：设置配置项"><a href="#步骤三：设置配置项" class="headerlink" title="步骤三：设置配置项"></a>步骤三：设置配置项</h2><ul>
<li>在vscode的<code>setting.json</code>中添加如下代码<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入文件时是否携带文件的扩展名</span></span><br><span class="line">&quot;path-autocomplete.extensionOnImport&quot;: true,</span><br><span class="line"><span class="comment">//配置@的路径提示</span></span><br><span class="line">&quot;path-autocomplete.pathMappings&quot;: &#123;</span><br><span class="line">    &quot;@&quot;: &quot;$&#123;folder&#125;/src&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul>
<li>需要找到项目文件夹，右键使用vscode打开后，使用<code>@</code>才会生效<div  align="center">
<img src="./img/vscode中配置@路径提示/2.jpg" width = 80% />
</div>

</li>
</ul>
<!--more-->]]></content>
      <categories>
        <category>技术</category>
        <category>WEB开发</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>全局vue组件</title>
    <url>/2022/12/02/%E5%85%A8%E5%B1%80vue%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h2><ul>
<li>在<code>main.js</code>中添加如下内容<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入需要全局使用的组件</span></span><br><span class="line"><span class="keyword">import</span> Test1 <span class="keyword">from</span> <span class="string">&#x27;@/components/test1.vue&#x27;</span></span><br><span class="line"><span class="comment">// component(&#x27;定义名称&#x27;, 组件名)</span></span><br><span class="line">Vue.component(<span class="string">&#x27;Test1_1&#x27;</span>, Test1)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<a id="more"></a>
<h2 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h2><ul>
<li>在<code>vue</code>组件中使用全局组件<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用test1.vue组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Test1_1</span>&gt;</span><span class="tag">&lt;/<span class="name">Test1_1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="私有组件的使用"><a href="#私有组件的使用" class="headerlink" title="私有组件的使用"></a>私有组件的使用</h2><ul>
<li>使用<code>components</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> test1 <span class="keyword">from</span> <span class="string">&#x27;@/components/test1.vue&#x27;</span></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">      <span class="string">&#x27;Test1&#x27;</span>: test1 <span class="comment">//可直接写为test，相当于&#x27;test1&#x27;: test1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<!--more-->]]></content>
      <categories>
        <category>技术</category>
        <category>WEB开发</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue组件中调用vue组件</title>
    <url>/2022/12/02/vue%E7%BB%84%E4%BB%B6%E4%B8%AD%E8%B0%83%E7%94%A8vue%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h2><ul>
<li>使用<code>import</code>语法导入需要的组件<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> test1 <span class="keyword">from</span> <span class="string">&#x27;./components/test1.vue&#x27;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<a id="more"></a>
<h2 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h2><ul>
<li>使用<code>components</code>节点注册组件</li>
<li><code>&#39;Test1&#39;: test1</code>若引号中的内容和冒号后的内容相同时可以简写<ul>
<li>例如：<code>&#39;test1&#39;: test1</code>可直接写为test1<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">components: &#123;</span><br><span class="line">    <span class="string">&#x27;Test1&#x27;</span>: test1 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="步骤三"><a href="#步骤三" class="headerlink" title="步骤三"></a>步骤三</h2><ul>
<li>以标签的形式使用刚才注册的组件<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Test1</span>&gt;</span><span class="tag">&lt;/<span class="name">Test1</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 3.以标签的形式使用刚才注册的组件 --&gt;</span><br><span class="line">    &lt;Test1&gt;&lt;&#x2F;Test1&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&#x2F;&#x2F; 1.使用import语法导入需要的组件</span><br><span class="line">import test1 from &#39;.&#x2F;components&#x2F;test1.vue&#39;</span><br><span class="line">  export default &#123;</span><br><span class="line">    &#x2F;&#x2F; 2.使用components节点注册组件</span><br><span class="line">    components: &#123;</span><br><span class="line">      &#39;Test1&#39;: test1 &#x2F;&#x2F;可直接写为test，相当于&#39;test1&#39;: test1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<!--more-->]]></content>
      <categories>
        <category>技术</category>
        <category>WEB开发</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue中data的使用</title>
    <url>/2022/12/01/vue%E4%B8%ADdata%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h2><ul>
<li>在<code>export default</code>中定义data函数<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">//data为数据源，是一个函数</span></span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 在return的&#123;&#125;中，可以定义数据</span></span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<a id="more"></a>
<h2 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h2><ul>
<li>在<code>return</code>的<code>&#123;&#125;</code>中定义数据<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      username1: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">      username2: <span class="string">&#x27;李四&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="步骤三"><a href="#步骤三" class="headerlink" title="步骤三"></a>步骤三</h2><ul>
<li>引用<code>data</code>中定义的数据</li>
<li>使用<code>&#123;&#123;&#125;&#125;</code>来引用<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>宝剑锋从磨砺出，梅花香自苦寒来。&#123;&#123;username1&#125;&#125;、&#123;&#123;username2&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;宝剑锋从磨砺出，梅花香自苦寒来。&#123;&#123;username1&#125;&#125;、&#123;&#123;username2&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&#x2F;&#x2F;默认导出，固定写法</span><br><span class="line">export default &#123;</span><br><span class="line">  &#x2F;&#x2F;data为数据源，是一个函数</span><br><span class="line">  data() &#123;</span><br><span class="line">    &#x2F;&#x2F; 在return的&#123;&#125;中，可以定义数据</span><br><span class="line">    return &#123;</span><br><span class="line">      username1: &#39;张三&#39;,</span><br><span class="line">      username2: &#39;李四&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<!--more-->]]></content>
      <categories>
        <category>技术</category>
        <category>WEB开发</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue组件中只能有一个根节点</title>
    <url>/2022/11/30/vue%E7%BB%84%E4%BB%B6%E4%B8%AD%E5%8F%AA%E8%83%BD%E6%9C%89%E4%B8%80%E4%B8%AA%E6%A0%B9%E8%8A%82%E7%82%B9/</url>
    <content><![CDATA[<h2 id="vue组件中只能有一个根节点"><a href="#vue组件中只能有一个根节点" class="headerlink" title="vue组件中只能有一个根节点"></a>vue组件中只能有一个根节点</h2><ul>
<li>组件模板中只能有一个根节点</li>
<li>最外层应使用<code>&lt;template&gt;&lt;/template&gt;</code>包裹</li>
</ul>
<a id="more"></a>
<h2 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h2><ul>
<li>错误写法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;111&lt;&#x2F;div&gt;&lt;!-- 根节点1 --&gt;</span><br><span class="line">    &lt;div&gt;222&lt;&#x2F;div&gt;&lt;!-- 根节点2 --&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure></li>
<li>正确写法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;&lt;!-- 根节点 --&gt;</span><br><span class="line">        &lt;div&gt;111&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;222&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>
<!--more--></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>WEB开发</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-cil目录结构</title>
    <url>/2022/11/29/vue-cil%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h2 id="node-modules"><a href="#node-modules" class="headerlink" title="node_modules"></a>node_modules</h2><ul>
<li>存储所有第三方包</li>
</ul>
<h2 id="src"><a href="#src" class="headerlink" title="src"></a>src</h2><ul>
<li>项目源代码目录</li>
</ul>
<a id="more"></a>
<h3 id="assets"><a href="#assets" class="headerlink" title="assets"></a>assets</h3><ul>
<li>存放静态资源，例如：图片、css样式表等<h3 id="components"><a href="#components" class="headerlink" title="components"></a>components</h3></li>
<li>存放封装的、可复用的组件<h3 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h3></li>
<li>是项目的入口文件，运行整个项目时，会先执行main.js<h3 id="App-vue是项目的根组件"><a href="#App-vue是项目的根组件" class="headerlink" title="App.vue是项目的根组件"></a>App.vue是项目的根组件</h3></li>
<li>是项目的根组件</li>
</ul>
<h2 id="vue项目的运行流程"><a href="#vue项目的运行流程" class="headerlink" title="vue项目的运行流程"></a>vue项目的运行流程</h2><ul>
<li>在工程化的项目中，vue要做的事情：通过main.js把App.vue渲染到index.html的指定区域中</li>
</ul>
<!--more-->]]></content>
      <categories>
        <category>技术</category>
        <category>WEB开发</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue组件中只能有一个根节点</title>
    <url>/2022/11/28/vue%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="什么是组件化开发"><a href="#什么是组件化开发" class="headerlink" title="什么是组件化开发"></a>什么是组件化开发</h2><ul>
<li>组件化开发指：根据封装的思想，把页面上可重用的UI结构封装为组件，从而方便项目的开发和维护</li>
</ul>
<h2 id="vue中的组件化开发"><a href="#vue中的组件化开发" class="headerlink" title="vue中的组件化开发"></a>vue中的组件化开发</h2><ul>
<li>vue中规定组件的后缀名是<code>.vue</code></li>
<li>App.vue文件本质上就是一个<code>vue</code>的组件</li>
</ul>
<a id="more"></a>
<h2 id="组件之间的关系"><a href="#组件之间的关系" class="headerlink" title="组件之间的关系"></a>组件之间的关系</h2><ul>
<li>组件在被封装号之后，彼此之间是相互独立的，不存在关系</li>
<li>在使用组件的时候，根据彼此的嵌套关系，形成了父子关系、兄弟关系</li>
</ul>
<h2 id="vue组件的三个组成部分"><a href="#vue组件的三个组成部分" class="headerlink" title="vue组件的三个组成部分"></a>vue组件的三个组成部分</h2><ul>
<li>每个<code>.vue</code>组件都由三部分构成<ul>
<li><code>template</code>：组件的模板结构</li>
<li><code>script</code>：组件的<code>JavaScript</code>行为</li>
<li><code>style</code>：组件的样式</li>
</ul>
</li>
</ul>
<h2 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;宝剑锋从磨砺出，梅花香自苦寒来。&#123;&#123;username1&#125;&#125;、&#123;&#123;username2&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;test1&quot;&gt;测试按钮&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&#x2F;&#x2F;默认导出，固定写法</span><br><span class="line">export default &#123;</span><br><span class="line">  &#x2F;&#x2F;data为数据源，是一个函数</span><br><span class="line">  data() &#123;</span><br><span class="line">    &#x2F;&#x2F; 在return的&#123;&#125;中，可以定义数据</span><br><span class="line">    return &#123;</span><br><span class="line">      username1: &#39;张三&#39;,</span><br><span class="line">      username2: &#39;李四&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    test1() &#123;</span><br><span class="line">      &#x2F;&#x2F;this表示当前组件的实例对象</span><br><span class="line">      this.username1 &#x3D; &#39;盖伦&#39;</span><br><span class="line">      &#x2F;&#x2F;打印当前组件</span><br><span class="line">      console.log(this)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F;当前组件中的侦听器</span><br><span class="line">  watch: &#123;&#125;,</span><br><span class="line">  &#x2F;&#x2F;当前组件中的计算属性</span><br><span class="line">  computed: &#123;&#125;,</span><br><span class="line">  &#x2F;&#x2F;当前组件中的过滤器</span><br><span class="line">  filters: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">p &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
<!--more-->]]></content>
      <categories>
        <category>技术</category>
        <category>WEB开发</category>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>无法访问github图片</title>
    <url>/2022/11/24/%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AEgithub%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><ul>
<li>在<code>host</code>文件中添加如下内容并保存<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">199.232.68.133  raw.githubusercontent.com</span><br></pre></td></tr></table></figure>
<a id="more"></a></li>
<li><code>host</code>文件位置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Windows\System32\drivers\etc</span><br></pre></td></tr></table></figure></li>
<li>可在<a href="https://www.ipaddress.com/">ipaddress</a>中查询<code>raw.githubusercontent.com</code>的IP地址<div  align="center">
<img src="https://gcore.jsdelivr.net/gh/phd99/img/技术/github/2.jpg" width = 100% />
</div>


</li>
</ul>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><ul>
<li>将<code>cdn</code>修改为<code>gcore</code>或<code>fastly</code></li>
<li>范例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;phd99&#x2F;img&#x2F;技术&#x2F;github&#x2F;2.jpg</span><br><span class="line">https:&#x2F;&#x2F;gcore.jsdelivr.net&#x2F;gh&#x2F;phd99&#x2F;img&#x2F;技术&#x2F;github&#x2F;2.jpg</span><br><span class="line">https:&#x2F;&#x2F;fastly.jsdelivr.net&#x2F;gh&#x2F;phd99&#x2F;img&#x2F;技术&#x2F;github&#x2F;2.jpg</span><br></pre></td></tr></table></figure>
<!--more--></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>调用放在项目中的第三方库</title>
    <url>/2021/10/12/%E8%B0%83%E7%94%A8%E6%94%BE%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</url>
    <content><![CDATA[<h1 id="调用放在项目中的第三方库"><a href="#调用放在项目中的第三方库" class="headerlink" title="调用放在项目中的第三方库"></a>调用放在项目中的第三方库</h1><hr>
<ul>
<li>将项目中使用的第三方库直接放在项目中，当部署到其他计算机上时，直接调用项目中的第三方库，无需再安装项目中要使用的第三方库</li>
</ul>
<h2 id="一、将第三方库放到项目中"><a href="#一、将第三方库放到项目中" class="headerlink" title="一、将第三方库放到项目中"></a>一、将第三方库放到项目中</h2><blockquote>
<p>步骤一：创建文件夹</p>
</blockquote>
<ul>
<li>在项目中创建一个文件夹<code>packages</code>，文件夹名称任意<ul>
<li>该文件夹用于存放项目中使用的所有第三方库文件</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤二：放入第三方库文件</p>
</blockquote>
<ul>
<li>将项目中需要使用的所有第三方库文件放入文件夹<code>packages</code>中<a id="more"></a>


</li>
</ul>
<blockquote>
<p>步骤三：创建<code>__init__.py</code>文件</p>
</blockquote>
<ul>
<li>在文件夹<code>packages</code>中新建<code>py</code>文件，文件名称为：<code>__init__</code><ul>
<li>当外部执行<code>import packages</code>时，会自动执行文件<code>__init__.py</code><div  align="center">
<img src="https://gcore.jsdelivr.net/gh/phd99/img/技术/python/调用放在项目中的第三方库/1.jpg" width = 80% />
</div>


</li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤四：编辑<code>__init__.py</code>文件</p>
</blockquote>
<ul>
<li>编辑文件<code>__init__.py</code><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># description：引入packages文件夹中的库</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 获取当前文件所在目录</span></span><br><span class="line">position = os.path.dirname(__file__)</span><br><span class="line"><span class="comment"># 将packages文件夹的路径添加到sys.path中</span></span><br><span class="line">sys.path.append(position)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="二、如何使用项目中的第三方库"><a href="#二、如何使用项目中的第三方库" class="headerlink" title="二、如何使用项目中的第三方库"></a>二、如何使用项目中的第三方库</h2><blockquote>
<p>方法一</p>
</blockquote>
<ul>
<li>当需要使用项目中的第三方库时，先<code>import packages</code>然后再<code>import 要用的库</code></li>
<li>范例<ul>
<li>要使用放在项目中的第三方库<code>cx_Oracle</code><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> packages</span><br><span class="line"><span class="keyword">import</span> cx_Oracle</span><br><span class="line">conn = cx_Oracle.connect(...)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<blockquote>
<p>方法二</p>
</blockquote>
<ul>
<li>只执行<code>import packages</code><ul>
<li>但在调用第三方库中的方法时，需要在方法前面加上<code>packages</code></li>
</ul>
</li>
<li>范例<ul>
<li>要使用放在项目中的第三方库<code>cx_Oracle</code><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> packages</span><br><span class="line">conn = packages.cx_Oracle.connect(...)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<!--more-->
]]></content>
      <categories>
        <category>技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>cx_Oracle和instantclient</title>
    <url>/2021/10/12/cx_Oracle%E5%92%8Cinstantclient/</url>
    <content><![CDATA[<h1 id="cx-Oracle和instantclient"><a href="#cx-Oracle和instantclient" class="headerlink" title="cx_Oracle和instantclient"></a>cx_Oracle和instantclient</h1><hr>
<ul>
<li>使用cx_Oracle和instantclient连接远程oracle数据库</li>
</ul>
<h2 id="一、安装instantclient"><a href="#一、安装instantclient" class="headerlink" title="一、安装instantclient"></a>一、安装instantclient</h2><h3 id="1-1-linux下的安装配置方法一-——-修改bash-profile"><a href="#1-1-linux下的安装配置方法一-——-修改bash-profile" class="headerlink" title="1.1. linux下的安装配置方法一 —— 修改bash_profile"></a>1.1. <code>linux</code>下的安装配置方法一 —— 修改<code>bash_profile</code></h3><ul>
<li>优点：实现简单</li>
<li>缺点：不方便部署到其他计算机上，因为当部署到其他计算机上时，还需要给其配置<code>instantclient</code></li>
</ul>
<h4 id="1-1-1-下载"><a href="#1-1-1-下载" class="headerlink" title="1.1.1. 下载"></a>1.1.1. 下载</h4><ul>
<li>在官网下载<code>Basic Package (RPM)</code>和<code>SQL*Plus Package (RPM)</code></li>
<li><a href="https://www.oracle.com/database/technologies/instant-client/downloads.html">官方下载地址</a></li>
</ul>
<h4 id="1-1-2-安装"><a href="#1-1-2-安装" class="headerlink" title="1.1.2. 安装"></a>1.1.2. 安装</h4><ul>
<li>进入管理员模式</li>
<li><code>rpm -ivh oracle-instantclient18.5-basic-18.5.0.0.0-3.x86_64.rpm</code></li>
<li><code>rpm -ivh oracle-instantclient18.5-sqlplus-18.5.0.0.0-3.x86_64.rpm</code></li>
<li>退出管理员模式<a id="more"></a>


</li>
</ul>
<h4 id="1-1-3-配置环境变量"><a href="#1-1-3-配置环境变量" class="headerlink" title="1.1.3. 配置环境变量"></a>1.1.3. 配置环境变量</h4><ul>
<li>打开用户专属配置文件(个人理解相当于windows系统环境变量的用户变量，只针对当前用户生效)<ul>
<li><code>vi ~/.bash_profile</code></li>
</ul>
</li>
<li>在文件的最后面添加如下内容<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># .bash_profile</span><br><span class="line"></span><br><span class="line"># Get the aliases and functions</span><br><span class="line">if [ -f ~&#x2F;.bashrc ]; then</span><br><span class="line">        . ~&#x2F;.bashrc</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># User specific environment and startup programs</span><br><span class="line"></span><br><span class="line">PATH&#x3D;$PATH:$HOME&#x2F;bin</span><br><span class="line"></span><br><span class="line">export PATH</span><br><span class="line">export ORACLE_VERSION&#x3D;18.5</span><br><span class="line">export ORACLE_HOME&#x3D;&#x2F;usr&#x2F;lib&#x2F;oracle&#x2F;$ORACLE_VERSION&#x2F;client64</span><br><span class="line">export LD_LIBRARY_PATH&#x3D;$ORACLE_HOME&#x2F;lib</span><br><span class="line">export TNS_ADMIN&#x3D;$ORACLE_HOME&#x2F;lib&#x2F;network&#x2F;admin</span><br><span class="line">export NLS_LANG&#x3D;AMERICAN_AMERICA.AL32UTF8</span><br><span class="line">#export NLS_LANG&#x3D;&quot;Simplified Chinese_china&quot;.ZHS16GBK</span><br><span class="line">export PATH&#x3D;$PATH:$ORACLE_HOME&#x2F;bin</span><br></pre></td></tr></table></figure>
<ul>
<li>按ESC键后，输入<code>:wq!</code>保存并退出</li>
</ul>
</li>
<li>执行<code>source ~/.bash_profile</code>命令，以便以后重启后生效</li>
</ul>
<h4 id="1-1-4-配置TNS"><a href="#1-1-4-配置TNS" class="headerlink" title="1.1.4. 配置TNS"></a>1.1.4. 配置TNS</h4><ul>
<li>在<code>/usr/lib/oracle/18.5/client64/lib/network</code>中创建<code>tnsnames.ora</code>文件</li>
</ul>
<h4 id="1-1-5-重启终端后未生效"><a href="#1-1-5-重启终端后未生效" class="headerlink" title="1.1.5. 重启终端后未生效"></a>1.1.5. 重启终端后未生效</h4><ul>
<li>执行<code>source ~/.bash_profile</code>命令后，重启终端后任然无法连接<code>oracle</code>数据库</li>
<li>解决办法<ul>
<li>切换到 ~ 目录下<ul>
<li><code>cd ~</code></li>
</ul>
</li>
<li>编辑.zshrc文件，如果没有则自动创建<ul>
<li><code>vi .zshrc</code></li>
</ul>
</li>
<li>在最后一行加入如下代码<ul>
<li><code>source ~/.bash_profile</code></li>
</ul>
</li>
<li>保存</li>
</ul>
</li>
</ul>
<h3 id="1-2-linux下的安装配置方法二-——-持久化instantclient的路径到运行连接里面"><a href="#1-2-linux下的安装配置方法二-——-持久化instantclient的路径到运行连接里面" class="headerlink" title="1.2. linux下的安装配置方法二 —— 持久化instantclient的路径到运行连接里面"></a>1.2. <code>linux</code>下的安装配置方法二 —— 持久化<code>instantclient</code>的路径到运行连接里面</h3><ul>
<li>该方法不用修改<code>bash_profile</code>文件</li>
<li>优点：实现简单</li>
<li>缺点：需要root用户</li>
</ul>
<h4 id="1-2-1-下载"><a href="#1-2-1-下载" class="headerlink" title="1.2.1. 下载"></a>1.2.1. 下载</h4><ul>
<li>在官网下载<code>Basic Package (ZIP)</code>文件</li>
<li><a href="https://www.oracle.com/database/technologies/instant-client/downloads.html">官网下载地址</a></li>
<li>将下载的<code>instantclient-basic</code>文件解压后放在<code>linux</code>中的任意位置</li>
</ul>
<h4 id="1-2-2-配置instantclient"><a href="#1-2-2-配置instantclient" class="headerlink" title="1.2.2. 配置instantclient"></a>1.2.2. 配置<code>instantclient</code></h4><ul>
<li>需要<code>root</code>权限</li>
<li>执行命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!bin&#x2F;bash</span><br><span class="line">now_dir&#x3D;&#96;dirname $0&#96;</span><br><span class="line">if [ $now_dir !&#x3D; &#39;.&#39; ]; then</span><br><span class="line">  cd $now_dir</span><br><span class="line">fi</span><br><span class="line">cd ..</span><br><span class="line"># 持久化instantclient的路径到运行连接里面，大于号&#96;&gt;&#96;左边的路径是&#96;instantclient&#96;的路径，根据自己放的位置来修改</span><br><span class="line">sudo sh -c &quot;echo &#x2F;home&#x2F;admin&#x2F;work&#x2F;packages&#x2F;instantclient_18_5 &gt; &#x2F;etc&#x2F;ld.so.conf.d&#x2F;oracle-instantclient.conf&quot;</span><br><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-3-linux下的安装配置方法三-——-在python项目内部配置instantclient环境"><a href="#1-3-linux下的安装配置方法三-——-在python项目内部配置instantclient环境" class="headerlink" title="1.3. linux下的安装配置方法三 —— 在python项目内部配置instantclient环境*"></a>1.3. <code>linux</code>下的安装配置方法三 —— 在<code>python</code>项目内部配置<code>instantclient</code>环境*</h3><ul>
<li>优点：若将<code>instantclient</code>放到项目中，则可以很方便的部署到其他计算机上，直接将整个项目复制到目标主机上，即可运行</li>
<li>缺点：实现较复杂</li>
</ul>
<h4 id="1-3-1-下载"><a href="#1-3-1-下载" class="headerlink" title="1.3.1. 下载"></a>1.3.1. 下载</h4><ul>
<li>下载方式与方法二相同</li>
</ul>
<h4 id="1-3-2-配置instantclient"><a href="#1-3-2-配置instantclient" class="headerlink" title="1.3.2. 配置instantclient"></a>1.3.2. 配置<code>instantclient</code></h4><ul>
<li>在项目中编写如下代码<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_environ</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    配置instantclient环境</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    system_type = <span class="string">&quot;linux&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> system_type != <span class="string">&quot;linux&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取当前文件所在目录</span></span><br><span class="line">    position = os.getcwd()</span><br><span class="line">    <span class="comment"># 获取LD_LIBRARY_PATH环境变量的值，若不存在，则设置为&quot;null&quot;</span></span><br><span class="line">    library_path = os.getenv(<span class="string">&#x27;LD_LIBRARY_PATH&#x27;</span>, <span class="string">&#x27;null&#x27;</span>)</span><br><span class="line">    <span class="comment"># 获取instantclient的绝对路径，在项目的packages文件夹中</span></span><br><span class="line">    oracle_home = <span class="string">f&quot;<span class="subst">&#123;position&#125;</span>/packages/instantclient_18_5&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 若没有“LD_LIBRARY_PATH”变量或者该变量中不存在“oracle_home”值，则执行if中的语句</span></span><br><span class="line">    <span class="keyword">if</span> (library_path == <span class="string">&#x27;null&#x27;</span>) <span class="keyword">or</span> (<span class="keyword">not</span> oracle_home <span class="keyword">in</span> library_path):</span><br><span class="line">        <span class="comment"># 配置环境变量</span></span><br><span class="line">        os.environ[<span class="string">&#x27;ORACLE_HOME&#x27;</span>] = oracle_home</span><br><span class="line">        os.environ[<span class="string">&#x27;LD_LIBRARY_PATH&#x27;</span>] = oracle_home</span><br><span class="line">        os.environ[<span class="string">&#x27;TNS_ADMIN&#x27;</span>] = <span class="string">f&quot;<span class="subst">&#123;oracle_home&#125;</span>/network/admin&quot;</span></span><br><span class="line">        os.environ[<span class="string">&#x27;NLS_LANG&#x27;</span>] = <span class="string">&quot;AMERICAN_AMERICA.AL32UTF8&quot;</span></span><br><span class="line">        <span class="comment"># NLS_LANG=&quot;Simplified Chinese_china&quot;.ZHS16GBK</span></span><br><span class="line">        os.environ[<span class="string">&#x27;PATH&#x27;</span>] += <span class="string">f&quot;:<span class="subst">&#123;oracle_home&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 重新加载程序，执行该语句后，配置的“LD_LIBRARY_PATH”环境变量才会生效</span></span><br><span class="line">            os.execl(sys.executable, <span class="string">&#x27;python&#x27;</span>, __file__, *sys.argv[<span class="number">1</span>:])</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">f&quot;异常:<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    add_environ()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-4-在windows中安装配置instantclient"><a href="#1-4-在windows中安装配置instantclient" class="headerlink" title="1.4. 在windows中安装配置instantclient"></a>1.4. 在<code>windows</code>中安装配置<code>instantclient</code></h3><h4 id="1-4-1-下载"><a href="#1-4-1-下载" class="headerlink" title="1.4.1. 下载"></a>1.4.1. 下载</h4><ul>
<li>在官网下载<code>zip</code>文件，下载<code>Basic Package</code>基础包文件</li>
<li><a href="https://www.oracle.com/database/technologies/instant-client/downloads.html">官方下载地址</a></li>
<li>将下载的<code>zip</code>文件解压</li>
</ul>
<h4 id="1-4-2-配置instantclient"><a href="#1-4-2-配置instantclient" class="headerlink" title="1.4.2. 配置instantclient"></a>1.4.2. 配置<code>instantclient</code></h4><blockquote>
<p>方法一 —— 移动文件到python安装目录中</p>
</blockquote>
<ul>
<li>将<code>instantclient</code>文件夹中的所有<code>.dll</code>文件复制到<code>python.exe</code>的同级目录中即可</li>
</ul>
<blockquote>
<p>方法二 —— 移动文件到python项目中</p>
</blockquote>
<ul>
<li>将所有的<code>.dll</code>文件复制到<code>cx_Oracle</code>库的同级目录中</li>
<li>使用此方法，方便部署，因为若cx_Oracle库放在项目中，则所有的<code>.dll</code>文件也应放到cx_Oracle库所在同级目录中，当将项目部署到其他目标主机上时，直接就可以用</li>
</ul>
<blockquote>
<p>方法三 —— 在python项目中配置环境变量</p>
</blockquote>
<ul>
<li>使用此方法，方便部署，且更灵活，可以将所有的<code>.dll</code>文件放入项目中的任何位置，然后将这些文件所在文件夹的路径通过代码临时放入系统变量<code>Path</code>中</li>
<li>代码范例<ul>
<li>使用时只需修改<code>instantclient</code>的路径，即<code>oracle_home</code>变量的值<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_environ</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    配置instantclient环境</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    system_type = <span class="string">&quot;windows&quot;</span></span><br><span class="line">    <span class="comment"># 获取当前文件所在目录</span></span><br><span class="line">    position = os.path.dirname(__file__)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> system_type != <span class="string">&quot;windows&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 获取&quot;instantclient&quot;的绝对路径，文件夹&quot;instantclient_18_5&quot;中存放了所有&quot;instantclient&quot;的&quot;.dll&quot;文件</span></span><br><span class="line">    oracle_home = <span class="string">f&quot;<span class="subst">&#123;position&#125;</span>\packages\instantclient_18_5&quot;</span></span><br><span class="line">    <span class="comment"># 获取&quot;Path&quot;环境变量的值，若不存在，则设置为&quot;null&quot;</span></span><br><span class="line">    path_value = os.getenv(<span class="string">&#x27;Path&#x27;</span>, <span class="string">&#x27;null&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> oracle_home <span class="keyword">not</span> <span class="keyword">in</span> path_value:</span><br><span class="line">        os.environ[<span class="string">&#x27;Path&#x27;</span>] += <span class="string">f&quot;;<span class="subst">&#123;oracle_home&#125;</span>;&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">f&quot;环境变量中已存在：<span class="subst">&#123;oracle_home&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<blockquote>
<p>方法四 —— 配置环境变量</p>
</blockquote>
<ul>
<li>在系统变量<code>Path</code>中添加<code>instantclient</code>文件夹的绝对路径</li>
<li>范例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\WorkInstall\environment\oracle\instantclient_18_5;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="二、安装cx-Oracle"><a href="#二、安装cx-Oracle" class="headerlink" title="二、安装cx_Oracle"></a>二、安装<code>cx_Oracle</code></h2><ul>
<li>在终端中执行如下命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install cx_Oracle</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="三、使用cx-Oracle"><a href="#三、使用cx-Oracle" class="headerlink" title="三、使用cx_Oracle"></a>三、使用<code>cx_Oracle</code></h2><ul>
<li>创建<code>test.py</code><h3 id="3-1-连接远程oracle数据库"><a href="#3-1-连接远程oracle数据库" class="headerlink" title="3.1. 连接远程oracle数据库"></a>3.1. 连接远程oracle数据库</h3></li>
<li>在<code>test.py</code>中编写如下代码<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> cx_Oracle</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect_database</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    连接数据库</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    login_info = <span class="string">&quot;&quot;&quot;&#123;username&#125;/&#123;password&#125;@&#123;address&#125;:&#123;port&#125;/&#123;servicename&#125;&quot;&quot;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">    username=<span class="string">&quot;用户名&quot;</span>,</span><br><span class="line">    password=<span class="string">&quot;密码&quot;</span>,</span><br><span class="line">    address=<span class="string">&quot;ip地址&quot;</span>,</span><br><span class="line">    port=<span class="string">&quot;端口号&quot;</span>,</span><br><span class="line">    servicename=Config.LOGIN_SERVICE_NAME)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        conn = cx_Oracle.connect(login_info)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">f&quot;数据库连接失败:<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;数据库连接成功&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> conn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    connect_database()</span><br></pre></td></tr></table></figure></li>
<li>正常执行结果<ul>
<li>数据库连接成功</li>
</ul>
</li>
</ul>
<h3 id="3-2-查询操作"><a href="#3-2-查询操作" class="headerlink" title="3.2. 查询操作"></a>3.2. 查询操作</h3><ul>
<li>调用执行<code>select_user_name()</code>方法，来获取当前数据库的用户名</li>
<li>在<code>test.py</code>中添加修改如下代码<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_handle</span>(<span class="params">sql, handle_name</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    查询通用操作</span></span><br><span class="line"><span class="string">    :param sql: sql语句</span></span><br><span class="line"><span class="string">    :param handle_name: 要执行的操作名称</span></span><br><span class="line"><span class="string">    :return: 查询结果</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    conn = connect_database()</span><br><span class="line">    cursor = cx_Oracle.Cursor(conn)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cursor.execute(sql)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">f&quot;进行<span class="subst">&#123;handle_name&#125;</span>查询操作时出错:<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    result = cursor.fetchall()</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_user_name</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    查询当前数据库的用户名</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    handle_name = <span class="string">&quot;数据库用户名&quot;</span></span><br><span class="line">    sql = <span class="string">&quot;select username from user_users &quot;</span></span><br><span class="line">    result = select_handle(sql, handle_name)[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    print(select_user_name())</span><br></pre></td></tr></table></figure></li>
<li>正常执行结果<ul>
<li>当前数据库的用户名</li>
</ul>
</li>
</ul>
<h3 id="3-3-插入操作"><a href="#3-3-插入操作" class="headerlink" title="3.3. 插入操作"></a>3.3. 插入操作</h3><ul>
<li>将数据插入到数据库中</li>
<li>在<code>test.py</code>中添加修改如下代码<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_handle</span>(<span class="params">sql, val, handle_name</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    插入通用操作</span></span><br><span class="line"><span class="string">    :param sql: sql语句</span></span><br><span class="line"><span class="string">    :param val: 要插入的数据元组</span></span><br><span class="line"><span class="string">    :param handle_name: 要执行的操作名称</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    conn = connect_database()</span><br><span class="line">    cursor = cx_Oracle.Cursor(conn)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cursor.execute(sql, val)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">f&quot;进行<span class="subst">&#123;handle_name&#125;</span>插入操作时出错:<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    conn.commit()</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_host_info</span>(<span class="params">ticket</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    插入主机相关的所有信息</span></span><br><span class="line"><span class="string">    在TABLE_OPS_HOST表中插入数据</span></span><br><span class="line"><span class="string">    :param ticket:要插入的数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    handle_name = <span class="string">&quot;主机信息&quot;</span></span><br><span class="line">    sql = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    INSERT INTO &quot;&#123;name&#125;&quot; (&quot;HostName&quot;, &quot;HostIP&quot;, &quot;Cpu&quot;, &quot;CpuFree&quot;,</span></span><br><span class="line"><span class="string">                &quot;MemorySize&quot;, &quot;MemoryFree&quot;, &quot;DiskSize&quot;, &quot;DiskFree&quot;)</span></span><br><span class="line"><span class="string">    VALUES (:1, :2, :3, :4, :5, :6, :7, :8)</span></span><br><span class="line"><span class="string">          &quot;&quot;&quot;</span>.<span class="built_in">format</span>(name=Config.TABLE_NAME_HOST)</span><br><span class="line">    insert_handle(sql, ticket, handle_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">list</span> = [<span class="string">&#x27;PHD-PC&#x27;</span>, <span class="string">&#x27;192.168.11.254&#x27;</span>, <span class="number">15.0</span>, <span class="number">85.0</span>, <span class="number">8506048512</span>, <span class="number">8.84</span>, <span class="number">1000202133504</span>, <span class="number">61.46</span>]</span><br><span class="line">    insert_host_info(<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure></li>
<li>正常执行结果<div  align="center">
<img src="https://gcore.jsdelivr.net/gh/phd99/img/技术/python/cx_Oracle和instantclient/1.jpg" width = 80% />
</div>

</li>
</ul>
<!--more-->
]]></content>
      <categories>
        <category>技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>使用paramiko访问远程主机</title>
    <url>/2021/10/12/%E4%BD%BF%E7%94%A8paramiko%E8%AE%BF%E9%97%AE%E8%BF%9C%E7%A8%8B%E4%B8%BB%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="使用paramiko访问远程主机"><a href="#使用paramiko访问远程主机" class="headerlink" title="使用paramiko访问远程主机"></a>使用paramiko访问远程主机</h1><hr>
<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><h3 id="1-1-若当前主机为windows"><a href="#1-1-若当前主机为windows" class="headerlink" title="1.1. 若当前主机为windows"></a>1.1. 若当前主机为<code>windows</code></h3><h4 id="1-1-1-安装paramiko中要用到的库"><a href="#1-1-1-安装paramiko中要用到的库" class="headerlink" title="1.1.1. 安装paramiko中要用到的库"></a>1.1.1. 安装<code>paramiko</code>中要用到的库</h4><ul>
<li>安装<code>bcrypy、cffi、cryptography、nacl、six</code><ul>
<li>在终端中执行如下命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install bcrypy</span><br><span class="line">pip install cffi</span><br><span class="line">pip install cryptography</span><br><span class="line">pip install pynacl</span><br><span class="line">pip install six</span><br></pre></td></tr></table></figure>
<a id="more"></a>


</li>
</ul>
</li>
</ul>
<h4 id="1-1-2-安装paramiko"><a href="#1-1-2-安装paramiko" class="headerlink" title="1.1.2. 安装paramiko"></a>1.1.2. 安装<code>paramiko</code></h4><ul>
<li>在终端中执行如下命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install paramiko</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="1-1-3-安装OpenSSH"><a href="#1-1-3-安装OpenSSH" class="headerlink" title="1.1.3. 安装OpenSSH"></a>1.1.3. 安装<code>OpenSSH</code></h4><ul>
<li>如果不使用秘钥访问远程主机，即使用密码访问远程主机，则不需要安装<code>OpenSSH</code></li>
<li>使用<code>OpenSSH</code>的目的是生成秘钥</li>
<li>下载<code>OpenSSH</code>压缩包</li>
<li>解压到<code>C:\Program Files\OpenSSH</code>文件夹中</li>
<li>安装<code>sshd</code>服务<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">powershell.exe -ExecutionPolicy Bypass -File install-sshd.ps1</span><br></pre></td></tr></table></figure></li>
<li>开放<code>22</code>号端口<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netsh advfirewall firewall add rule name&#x3D;sshd dir&#x3D;in action&#x3D;allow protocol&#x3D;TCP localport&#x3D;22</span><br></pre></td></tr></table></figure></li>
<li>配置开机自启<code>sshd</code>服务<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sc config sshd start&#x3D; auto</span><br></pre></td></tr></table></figure></li>
<li>启动<code>ssh</code>服务<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net start sshd</span><br></pre></td></tr></table></figure></li>
<li>将路径<code>C:\Program Files\OpenSSH</code>放到环境变量的系统变量的<code>Path</code>中，终端中任意路径都可以使用<code>ssh</code>命令，而不需要在<code>C:\Program Files\OpenSSH</code>位置才能使用</li>
</ul>
<h4 id="1-1-4-安装git"><a href="#1-1-4-安装git" class="headerlink" title="1.1.4. 安装git"></a>1.1.4. 安装<code>git</code></h4><ul>
<li>也可以不安装<code>OpenSSH</code>，使用<code>git</code></li>
<li>开放22号端口<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netsh advfirewall firewall add rule name&#x3D;sshd dir&#x3D;in action&#x3D;allow protocol&#x3D;TCP localport&#x3D;22</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-2-若当前主机为linux"><a href="#1-2-若当前主机为linux" class="headerlink" title="1.2. 若当前主机为linux"></a>1.2. 若当前主机为<code>linux</code></h3><h4 id="1-2-1-安装paramiko中要用到的库"><a href="#1-2-1-安装paramiko中要用到的库" class="headerlink" title="1.2.1. 安装paramiko中要用到的库"></a>1.2.1. 安装<code>paramiko</code>中要用到的库</h4><ul>
<li>安装<code>bcrypy、cffi、cryptography、nacl、six</code><ul>
<li>在终端中执行如下命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install bcrypy</span><br><span class="line">pip install cffi</span><br><span class="line">pip install cryptography</span><br><span class="line">pip install pynacl</span><br><span class="line">pip install six</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h4 id="1-2-2-安装paramiko模块"><a href="#1-2-2-安装paramiko模块" class="headerlink" title="1.2.2. 安装paramiko模块"></a>1.2.2. 安装<code>paramiko</code>模块</h4><ul>
<li><a href="https://blog.csdn.net/weixin_39805387/article/details/110397858">安装步骤参考</a></li>
</ul>
<h5 id="步骤1：安装依赖包"><a href="#步骤1：安装依赖包" class="headerlink" title="步骤1：安装依赖包"></a>步骤1：安装依赖包</h5><ul>
<li>在终端中执行如下命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y groupinstall &#39;Development Tools&#39;</span><br><span class="line">yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="步骤2：安装setuptools"><a href="#步骤2：安装setuptools" class="headerlink" title="步骤2：安装setuptools"></a>步骤2：安装<code>setuptools</code></h5><ul>
<li>在终端中执行如下命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate https:&#x2F;&#x2F;pypi.python.org&#x2F;packages&#x2F;source&#x2F;s&#x2F;setuptools&#x2F;setuptools-19.6.tar.gz#md5&#x3D;c607dd118eae682c44ed146367a17e26</span><br><span class="line">tar -zxvf setuptools-19.6.tar.gz</span><br><span class="line">cd setuptools-19.6</span><br><span class="line">python3 setup.py build</span><br><span class="line">python3 setup.py install</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="步骤3：安装paramiko"><a href="#步骤3：安装paramiko" class="headerlink" title="步骤3：安装paramiko"></a>步骤3：安装<code>paramiko</code></h5><ul>
<li>在终端中执行如下命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;paramiko&#x2F;paramiko.git</span><br><span class="line">cd paramiko</span><br><span class="line">python3 setup.py build</span><br><span class="line">python3 setup.py install</span><br></pre></td></tr></table></figure></li>
<li>安装<code>paramiko</code>时，执行命令<code>python3 setup.py build</code>报错<ul>
<li>解决办法：<code>pip3 install --upgrade setuptools</code></li>
</ul>
</li>
</ul>
<h2 id="二、设置免密访问"><a href="#二、设置免密访问" class="headerlink" title="二、设置免密访问"></a>二、设置免密访问</h2><ul>
<li>访问远程主机时不再需要输入密码</li>
<li>若使用密码访问远程主机，则不需要进行这个设置</li>
</ul>
<h3 id="步骤1：生成秘钥"><a href="#步骤1：生成秘钥" class="headerlink" title="步骤1：生成秘钥"></a>步骤1：生成秘钥</h3><ul>
<li>在终端中输入如下的命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></li>
<li><code>-t</code>表示设置加密方式，不写时默认为<code>rsa</code>加密，即<code>ssh-keygen</code></li>
<li>命令执行完毕会得到两个文件<ul>
<li><code>id_rsa</code>：私钥</li>
<li><code>id_rsa.pub</code>：公钥</li>
</ul>
</li>
<li>文件的位置<ul>
<li>若要执行程序的主机为<code>windows</code>系统，则文件位于：<code>C:\Users\用户名\.ssh</code></li>
<li>若要执行程序的主机为<code>linux</code>系统，则文件位于：<code>~/.ssh</code></li>
</ul>
</li>
</ul>
<h3 id="步骤2：将公钥中的内容发送给要连接的远程主机"><a href="#步骤2：将公钥中的内容发送给要连接的远程主机" class="headerlink" title="步骤2：将公钥中的内容发送给要连接的远程主机"></a>步骤2：将公钥中的内容发送给要连接的远程主机</h3><ul>
<li>若远程主机为<code>linux</code><ul>
<li>输入命令<code>ssh-copy-id admin@192.168.11.248</code><ul>
<li>该用户名和ip地址是远程主机的</li>
<li>若执行命令的主机为windows，应在<code>git bash</code>中执行命令，在cmd中无法识别<code>ssh-copy-id</code></li>
</ul>
</li>
<li>在远程linux主机中，进入<code>~/.ssh</code><ul>
<li><code>cd ~/.ssh</code></li>
</ul>
</li>
<li>在<code>~/.ssh</code>中会有一个<code>authorized_keys</code>文件，该文件中存放的就是公钥信息</li>
</ul>
</li>
<li>若远程主机为<code>windows</code><ul>
<li>将文件<code>id_rsa.pub</code>中的内容复制到文件<code>C:\Users\用户名\.ssh\authorized_keys</code>中<ul>
<li>若<code>authorized_keys</code>不存在，则创建一个</li>
</ul>
</li>
<li>修改<code>ssh</code>配置文件<ul>
<li>在文件夹<code>C:\ProgramData\ssh</code>中编辑文件<code>sshd_config</code>，<code>ProgramData</code>是隐藏文件夹</li>
<li>修改如下内容<ul>
<li>去掉<code>PubkeyAuthentication yes</code>前面的<code>#</code></li>
<li>在文件中末尾的<code>Match</code>和<code>AuthorizedKeysFile</code>前面加上<code>#</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PubkeyAuthentication yes</span><br><span class="line">#Match Group administrators</span><br><span class="line">#AuthorizedKeysFile __PROGRAMDATA__&#x2F;ssh&#x2F;administrators_authorized_keys</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li>重启<code>sshd</code>服务<ul>
<li>在终端中执行如下命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net stop sshd</span><br><span class="line">net start sshd</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="步骤3：测试连接"><a href="#步骤3：测试连接" class="headerlink" title="步骤3：测试连接"></a>步骤3：测试连接</h3><ul>
<li>在终端中执行如下命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh PHD@192.168.11.236</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="三、使用paramiko"><a href="#三、使用paramiko" class="headerlink" title="三、使用paramiko"></a>三、使用<code>paramiko</code></h2><h3 id="3-1-连接远程主机"><a href="#3-1-连接远程主机" class="headerlink" title="3.1. 连接远程主机"></a>3.1. 连接远程主机</h3><h4 id="3-1-1-密码方式连接"><a href="#3-1-1-密码方式连接" class="headerlink" title="3.1.1. 密码方式连接"></a>3.1.1. 密码方式连接</h4><ul>
<li>不需要生成秘钥</li>
<li>通过密码方式访问远程主机的代码<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect_host</span>():</span></span><br><span class="line">    hostname = <span class="string">&#x27;192.168.11.236&#x27;</span></span><br><span class="line">    username = <span class="string">&#x27;PHD&#x27;</span></span><br><span class="line">    port = <span class="number">22</span></span><br><span class="line">    password = <span class="string">&quot;123&quot;</span></span><br><span class="line">    ssh = paramiko.SSHClient()</span><br><span class="line">    <span class="comment"># 允许连接未知的主机</span></span><br><span class="line">    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">    <span class="comment"># 连接服务器</span></span><br><span class="line">    ssh.connect(hostname=hostname, port=port, username=username, password=password)</span><br><span class="line">    <span class="keyword">return</span> ssh</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="3-1-2-秘钥方式连接"><a href="#3-1-2-秘钥方式连接" class="headerlink" title="3.1.2. 秘钥方式连接"></a>3.1.2. 秘钥方式连接</h4><ul>
<li>需要先生成秘钥</li>
<li>将公钥复制到远程主机的<code>authorized_keys</code></li>
<li>通过秘钥方式访问远程主机的代码<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect_host</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    连接远程主机</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    hostname = <span class="string">&#x27;192.168.11.236&#x27;</span></span><br><span class="line">    username = <span class="string">&#x27;PHD&#x27;</span></span><br><span class="line">    port = <span class="number">22</span></span><br><span class="line">    pk = <span class="string">&#x27;C:/Users/PHD/.ssh/id_rsa&#x27;</span></span><br><span class="line">    key = paramiko.RSAKey.from_private_key_file(pk)</span><br><span class="line">    ssh = paramiko.SSHClient()</span><br><span class="line">    <span class="comment"># 允许连接未知的主机</span></span><br><span class="line">    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">    <span class="comment"># 连接服务器</span></span><br><span class="line">    ssh.connect(hostname=hostname, port=port, username=username, pkey=key)</span><br><span class="line">    <span class="keyword">return</span> ssh</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-2-执行远程主机中的命令"><a href="#3-2-执行远程主机中的命令" class="headerlink" title="3.2. 执行远程主机中的命令"></a>3.2. 执行远程主机中的命令</h3><h4 id="3-2-1-获取字符串形式的命令结果"><a href="#3-2-1-获取字符串形式的命令结果" class="headerlink" title="3.2.1. 获取字符串形式的命令结果"></a>3.2.1. 获取字符串形式的命令结果</h4><ul>
<li><code>stdout.read()</code>得到的是一个字符串<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_command_result_str</span>(<span class="params">comm</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取comm命令的结果</span></span><br><span class="line"><span class="string">    :param comm: 远程主机要执行的命令</span></span><br><span class="line"><span class="string">    :return: 结果为一个字符串</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    system_type = <span class="string">&quot;windows&quot;</span></span><br><span class="line">    ssh = connect_host()</span><br><span class="line">    <span class="comment"># 执行远程主机终端中的命令</span></span><br><span class="line">    stdin, stdout, stderr = ssh.exec_command(comm)</span><br><span class="line">    <span class="comment"># 解码方式</span></span><br><span class="line">    <span class="keyword">if</span> system_type == <span class="string">&#x27;linux&#x27;</span>:</span><br><span class="line">        decode_str = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> system_type == <span class="string">&#x27;windows&#x27;</span>:</span><br><span class="line">        decode_str = <span class="string">&#x27;gbk&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;操作系统类型错误！&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 获取命令的结果</span></span><br><span class="line">    result_command = stdout.read().decode(decode_str)</span><br><span class="line">    <span class="comment"># 关闭连接</span></span><br><span class="line">    ssh.close()</span><br><span class="line">    <span class="keyword">return</span> result_command</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="3-2-2-获取列表形式的命令结果"><a href="#3-2-2-获取列表形式的命令结果" class="headerlink" title="3.2.2. 获取列表形式的命令结果"></a>3.2.2. 获取列表形式的命令结果</h4><ul>
<li><code>stdout.readlines()</code>得到的是一个列表，一个元素中存储的是命令结果中，一行的数据<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_command_result_list</span>(<span class="params">comm</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取comm的命令结果</span></span><br><span class="line"><span class="string">    :param comm: 远程主机要执行的命令</span></span><br><span class="line"><span class="string">    :return: 结果为一个列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    ssh = connect_host()</span><br><span class="line">    <span class="comment"># 执行远程主机终端中的命令</span></span><br><span class="line">    stdin, stdout, stderr = ssh.exec_command(comm)</span><br><span class="line">    result_command = stdout.readlines()</span><br><span class="line">    <span class="comment"># 关闭连接</span></span><br><span class="line">    ssh.close()</span><br><span class="line">    <span class="keyword">return</span> result_command</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="3-2-3-测试"><a href="#3-2-3-测试" class="headerlink" title="3.2.3. 测试"></a>3.2.3. 测试</h4><ul>
<li>编写如下代码，并调用执行<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    <span class="comment"># 执行hostname命令，获取主机名</span></span><br><span class="line">    result_command = get_command_result_str(<span class="string">&quot;hostname&quot;</span>)</span><br><span class="line">    <span class="comment"># 打印的是一个字符串</span></span><br><span class="line">    print(result_command)</span><br><span class="line">    result_list = get_command_result_list(<span class="string">&quot;hostname&quot;</span>)</span><br><span class="line">    <span class="comment"># 打印的是一个列表</span></span><br><span class="line">    print(result_list)</span><br></pre></td></tr></table></figure>
<!--more-->
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>在Linux中安装python3</title>
    <url>/2021/10/12/%E5%9C%A8linux%E4%B8%AD%E5%AE%89%E8%A3%85python3/</url>
    <content><![CDATA[<h1 id="在Linux中安装python3"><a href="#在Linux中安装python3" class="headerlink" title="在Linux中安装python3"></a>在Linux中安装python3</h1><hr>
<h2 id="1-获得root用户身份"><a href="#1-获得root用户身份" class="headerlink" title="1. 获得root用户身份"></a>1. 获得root用户身份</h2><ul>
<li>在终端中执行如下命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su root</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="2-安装编译工具"><a href="#2-安装编译工具" class="headerlink" title="2. 安装编译工具"></a>2. 安装编译工具</h2><ul>
<li>在终端中执行如下命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y groupinstall &quot;Development tools&quot;</span><br><span class="line">yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</span><br><span class="line">yum install -y libffi-devel zlib1g-dev</span><br><span class="line">yum install zlib* -y</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="3-下载安装包"><a href="#3-下载安装包" class="headerlink" title="3. 下载安装包"></a>3. 下载安装包</h2><ul>
<li>在终端中执行如下命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget wget https:&#x2F;&#x2F;www.python.org&#x2F;ftp&#x2F;python&#x2F;3.8.10&#x2F;Python-3.8.10.tar.xz</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="4-解压安装包"><a href="#4-解压安装包" class="headerlink" title="4. 解压安装包"></a>4. 解压安装包</h2><ul>
<li>在终端中执行如下命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -xvJf  Python-3.8.10.tar.xz</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="5-创建编译安装目录"><a href="#5-创建编译安装目录" class="headerlink" title="5. 创建编译安装目录"></a>5. 创建编译安装目录</h2><ul>
<li>在终端中执行如下命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;usr&#x2F;local&#x2F;python3</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="6-安装python"><a href="#6-安装python" class="headerlink" title="6. 安装python"></a>6. 安装python</h2><ul>
<li>在终端中执行如下命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd Python-3.8.10</span><br><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;python3 --with-ssl</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li>
<li>注意<ul>
<li>执行<code>--enable-optimizations</code>可以提高代码运行速度，但安装python3.8版本时执行<code>--enable-optimizations</code>后，安装python会报错<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;python3 --enable-optimizations --with-ssl</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="7-创建软链接"><a href="#7-创建软链接" class="headerlink" title="7. 创建软链接"></a>7. 创建软链接</h2><ul>
<li>在终端中执行如下命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin&#x2F;python3 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;python3</span><br><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin&#x2F;pip3 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;pip3</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="8-验证是否成功"><a href="#8-验证是否成功" class="headerlink" title="8. 验证是否成功"></a>8. 验证是否成功</h2><ul>
<li>在终端中执行如下命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python3 -V</span><br><span class="line">pip3 -V</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<p><strong>参考文章</strong><br>(1) <a href="https://www.cnblogs.com/xiujin/p/11477419.html">centos7中安装python3</a><br>(2) <a href="https://www.cnblogs.com/adao21/p/12901127.html">centos 7 升级Python3.8</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>定时任务</title>
    <url>/2021/10/12/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="一、Windows下的定时任务——schtasks"><a href="#一、Windows下的定时任务——schtasks" class="headerlink" title="一、Windows下的定时任务——schtasks"></a>一、Windows下的定时任务——schtasks</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1. 简介"></a>1.1. 简介</h3><ul>
<li>在windows下，如果需要执行定时任务，可以使用schtasks命令</li>
<li><a href="https://docs.microsoft.com/zh-cn/windows-server/administration/windows-commands/schtasks">官方文档</a></li>
</ul>
<h3 id="1-2-权限"><a href="#1-2-权限" class="headerlink" title="1.2. 权限"></a>1.2. 权限</h3><ul>
<li>若要在本地计算机上计划、查看和更改所有任务，你必须是 Administrators 组的成员</li>
</ul>
<h3 id="1-3-创建任务"><a href="#1-3-创建任务" class="headerlink" title="1.3. 创建任务"></a>1.3. 创建任务</h3><ul>
<li>创建任务使用<code>/create</code></li>
</ul>
<h4 id="1-3-1-参数"><a href="#1-3-1-参数" class="headerlink" title="1.3.1. 参数"></a>1.3.1. 参数</h4><blockquote>
<p>/sc</p>
</blockquote>
<ul>
<li>指定计划类型<ul>
<li>MINUTE、HOURLY、DAILY、WEEKLY、MONTHLY、ONCE、ONSTART、ONLOGON、ONIDLE<blockquote>
<p>/mo</p>
</blockquote>
</li>
</ul>
</li>
<li>指定任务在其计划类型中的运行频率<ul>
<li>默认值为1<blockquote>
<p>/st</p>
</blockquote>
</li>
</ul>
</li>
<li>开始时间<ul>
<li>默认值是当前本地时间</li>
<li><code>/st 11:11:00</code><blockquote>
<p>/sd</p>
</blockquote>
</li>
</ul>
</li>
<li>开始日期<ul>
<li>默认是当前日期<blockquote>
<p>/ed</p>
</blockquote>
</li>
</ul>
</li>
<li>结束日期<ul>
<li>默认没有结束日期<blockquote>
<p>/tn</p>
</blockquote>
</li>
</ul>
</li>
<li>指定任务的名称<blockquote>
<p>/tr</p>
</blockquote>
</li>
<li>指定该任务要运行的程序或命令</li>
</ul>
<h4 id="1-3-2-范例"><a href="#1-3-2-范例" class="headerlink" title="1.3.2. 范例"></a>1.3.2. 范例</h4><ul>
<li>每隔1分钟打开一次test.txt文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">schtasks &#x2F;create &#x2F;sc minute &#x2F;mo 1 &#x2F;tn phdtest &#x2F;tr C:\Users\PHD\Desktop\test.txt</span><br></pre></td></tr></table></figure></li>
<li>每天的11:05打开一次test.txt文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">schtasks &#x2F;create &#x2F;sc daily &#x2F;mo 1 &#x2F;st 22:20:00 &#x2F;tn phdtest &#x2F;tr C:\Users\PHD\Desktop\test.txt</span><br></pre></td></tr></table></figure>
<h3 id="1-4-删除任务"><a href="#1-4-删除任务" class="headerlink" title="1.4. 删除任务"></a>1.4. 删除任务</h3></li>
<li>删除任务使用<code>/delete</code></li>
</ul>
<h4 id="1-4-1-参数"><a href="#1-4-1-参数" class="headerlink" title="1.4.1. 参数"></a>1.4.1. 参数</h4><blockquote>
<p>/tn</p>
</blockquote>
<ul>
<li>标识要删除的任务<blockquote>
<p>/s</p>
</blockquote>
</li>
<li>指定远程计算机的名称或IP地址，默认为本地计算机</li>
</ul>
<h4 id="1-4-2-范例"><a href="#1-4-2-范例" class="headerlink" title="1.4.2. 范例"></a>1.4.2. 范例</h4><ul>
<li>删除本地计算机中的phdtest任务<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">schtasks &#x2F;delete &#x2F;tn phdtest</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-5-查询任务"><a href="#1-5-查询任务" class="headerlink" title="1.5. 查询任务"></a>1.5. 查询任务</h3><ul>
<li>查询任务使用<code>/query</code></li>
<li>范例<ul>
<li>查询所有任务</li>
<li><code>schtasks /query</code></li>
</ul>
</li>
</ul>
<h3 id="1-6-通过bat文件来创建任务和删除任务"><a href="#1-6-通过bat文件来创建任务和删除任务" class="headerlink" title="1.6. 通过bat文件来创建任务和删除任务"></a>1.6. 通过bat文件来创建任务和删除任务</h3><h4 id="1-6-1-创建任务"><a href="#1-6-1-创建任务" class="headerlink" title="1.6.1. 创建任务"></a>1.6.1. 创建任务</h4><ul>
<li>编写bat文件，TestStart.bat，创建任务<ul>
<li>方法一<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">:: 使用<span class="built_in">chdir</span>命令获取当前文件所在路径，并将路径值赋给nowDir变量</span><br><span class="line"><span class="keyword">for</span> /f <span class="variable">%%i</span> <span class="keyword">in</span> (&#x27;<span class="built_in">chdir</span>&#x27;) <span class="keyword">do</span> ( <span class="built_in">set</span> nowDir=<span class="variable">%%i</span>)</span><br><span class="line">:: 创建定时任务，每隔一分钟打开nowDir路径下的test.txt文件</span><br><span class="line">schtasks /create /sc minute /mo <span class="number">1</span> /tn phdtest /tr <span class="variable">%nowDir%</span>\test.txt</span><br></pre></td></tr></table></figure></li>
<li>方法二<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">:: 创建定时任务，每隔一分钟执行当前文件所在路径下的test.txt文件</span><br><span class="line">schtasks /create /sc minute /mo <span class="number">1</span> /tn phdtest /tr %~dp0\test.txt</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h4 id="1-6-2-删除任务"><a href="#1-6-2-删除任务" class="headerlink" title="1.6.2. 删除任务"></a>1.6.2. 删除任务</h4><ul>
<li>编写bat文件，TestEnd.bat，删除任务<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">:: 删除名称为phdtest的任务，/f表示强制删除，不会再被询问是否要删除</span><br><span class="line">schtasks /delete /tn phdtest /f</span><br></pre></td></tr></table></figure>
<h2 id="二、linux下的定时任务——crontab"><a href="#二、linux下的定时任务——crontab" class="headerlink" title="二、linux下的定时任务——crontab"></a>二、linux下的定时任务——crontab</h2><h3 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1. 简介"></a>2.1. 简介</h3></li>
<li>Linux crontab是用来定期执行程序的命令</li>
<li><a href="https://www.runoob.com/linux/linux-comm-crontab.html">菜鸟教程文档</a></li>
</ul>
<h3 id="2-2-crontab相关命令"><a href="#2-2-crontab相关命令" class="headerlink" title="2.2. crontab相关命令"></a>2.2. crontab相关命令</h3><blockquote>
<p>crontab -l</p>
</blockquote>
<ul>
<li>显示任务，只能看到当前用户下添加的任务</li>
</ul>
<blockquote>
<p>crontab /etc/crontab</p>
</blockquote>
<ul>
<li>加载任务</li>
</ul>
<blockquote>
<p>service crond restart</p>
</blockquote>
<ul>
<li>重启crontab服务</li>
</ul>
<blockquote>
<p>crontab help</p>
</blockquote>
<ul>
<li>帮助文档</li>
</ul>
<blockquote>
<p>crontab -e</p>
</blockquote>
<ul>
<li>用户下的任务编辑</li>
</ul>
<blockquote>
<p>vim /etc/crontab</p>
</blockquote>
<ul>
<li>系统下的任务编辑</li>
<li>使用<code>crontab -l</code>不能查看系统下的任务，可以使用<code>cat /etc/crontab</code>命令来查看</li>
<li>使用这个操作进行修改，需要用户拥有root权限</li>
</ul>
<blockquote>
<p>crontab -r</p>
</blockquote>
<ul>
<li>删除任务</li>
<li>只能删除用户下的任务</li>
<li>删除系统下的任务，可以使用<code>vim /etc/crontab</code>，在crontab文件中删除不想执行的任务语句</li>
</ul>
<blockquote>
<p>service crond status</p>
</blockquote>
<ul>
<li>查看状态</li>
</ul>
<blockquote>
<p>cat /var/spool/mail/xxx(用户名)</p>
</blockquote>
<ul>
<li>查看执行定时任务时，给xxx发送的邮件</li>
<li>可以在里面看执行的任务是否有错误</li>
<li>只能看到使用<code>crontab -e</code>创建的用户下的任务</li>
<li>通过<code>vim /etc/crontab</code>编辑的任务看不到</li>
</ul>
<blockquote>
<p>systemctl start crond</p>
</blockquote>
<ul>
<li>启动crond服务</li>
</ul>
<h3 id="2-3-使用"><a href="#2-3-使用" class="headerlink" title="2.3. 使用"></a>2.3. 使用</h3><ul>
<li>特殊字符的含义<ul>
<li>星号<code>*</code>：表示每，<code>* * * * *</code>依次表示每分钟、每小时、每天、每周、每月</li>
<li>正斜线<code>/</code>：指定时间间隔频率，<code>*/5</code>表示每5分钟执行一次</li>
</ul>
</li>
<li>范例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*&#x2F;5 * * * * toot &#x2F;usr&#x2F;bin&#x2F;sh &#x2F;root&#x2F;work&#x2F;EntranceForLinux.sh</span><br></pre></td></tr></table></figure>
<ul>
<li>root表示指定root的任务，可以写其他用户，但需要有其权限(指定root，需要有root权限)，不写时表示指定自己的任务</li>
</ul>
</li>
</ul>
<h3 id="2-4-使用sh文件执行定时任务范例"><a href="#2-4-使用sh文件执行定时任务范例" class="headerlink" title="2.4. 使用sh文件执行定时任务范例"></a>2.4. 使用sh文件执行定时任务范例</h3><h4 id="2-4-1-方法一"><a href="#2-4-1-方法一" class="headerlink" title="2.4.1. 方法一"></a>2.4.1. 方法一</h4><ul>
<li>不需要root权限</li>
<li>是在当前用户创建定时任务<blockquote>
<p>步骤一：创建<code>LinuxOpsRun.sh</code>文件</p>
</blockquote>
</li>
<li>代码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"># 获取当前系统的用户并在末尾添加cron，并赋给变量file_name。例如：我的用户名为admin，添加cron之后，file_name的值为admincron</span><br><span class="line">file_name&#x3D;&#96;whoami&#96;cron</span><br><span class="line"># 获取当前文件所在的路径(不包含文件名)，相对于工作目录（终端）的路径</span><br><span class="line">now_dir&#x3D;&#96;dirname $0&#96;</span><br><span class="line"># 将工作目录跳转到now_dir</span><br><span class="line">cd $now_dir</span><br><span class="line"># 获取当前文件的路径，并赋给变量now_dir</span><br><span class="line">now_dir&#x3D;&#96;pwd&#96;</span><br><span class="line"># 在now_dir路径下创建file_name文件</span><br><span class="line">touch $now_dir&#x2F;$file_name</span><br><span class="line"># 将定时任务重定向到file_name文件中</span><br><span class="line">echo &quot;*&#x2F;5 * * * * &#x2F;usr&#x2F;bin&#x2F;sh $now_dir&#x2F;LinuxCallPy.sh $now_dir&quot; &gt; $now_dir&#x2F;$file_name</span><br><span class="line"># 加载定时任务，会将file_name文件复制到&#x2F;var&#x2F;spool&#x2F;cron文件夹中，且文件名为用户名，即去掉了末尾的cron</span><br><span class="line">crontab $file_name</span><br></pre></td></tr></table></figure></li>
<li><code>/var/spool/cron/</code>是所有用户crontab文件存放的目录,以用户名命名</li>
</ul>
<blockquote>
<p>步骤二：执行<code>LinuxOpsRun.sh</code>文件</p>
</blockquote>
<ul>
<li>在<code>LinuxOpsRun.sh</code>文件所在的文件夹中，右键打开终端</li>
<li>输入命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sh LinuxOpsRun.sh</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="2-4-2-方法二"><a href="#2-4-2-方法二" class="headerlink" title="2.4.2. 方法二"></a>2.4.2. 方法二</h4><ul>
<li>需要root权限</li>
<li>是在整个系统中创建定时任务</li>
</ul>
<blockquote>
<p>步骤一：创建<code>OpsRunLinux.sh</code>文件</p>
</blockquote>
<ul>
<li>代码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;*&#x2F;5 * * * * root &#x2F;usr&#x2F;bin&#x2F;sh &#96;pwd&#96;&#x2F;EntranceForLinux.sh &#96;pwd&#96;&quot; &gt;&gt; &#x2F;etc&#x2F;crontab</span><br><span class="line">cat &#x2F;etc&#x2F;crontab</span><br></pre></td></tr></table></figure></li>
<li>添加定时任务，每5分钟执行一次</li>
<li><code>pwd</code>表示获取当前文件所在路径</li>
<li><code>&gt;&gt;</code>表示将下面的语句添加到<code>/etc/crontab</code>文件的末尾<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;*&#x2F;5 * * * * root &#x2F;usr&#x2F;bin&#x2F;sh &#96;pwd&#96;&#x2F;EntranceForLinux.sh &#96;pwd&#96;&quot;</span><br></pre></td></tr></table></figure></li>
<li>/usr/bin/sh <code>pwd</code>/EntranceForLinux.sh <code>pwd</code><ul>
<li>sh表示执行.sh文件</li>
<li>最后的<code>pwd</code>表示将<code>pwd</code>传入<code>EntranceForLinux.sh</code>文件中，即EntranceForLinux.sh文件中的<code>$&#123;1&#125;</code></li>
</ul>
</li>
<li><code>cat /etc/crontab</code>表示将<code>/etc/crontab</code>文件的内容打印到终端中</li>
</ul>
<blockquote>
<p>步骤二：创建<code>EntranceForLinux.sh</code>文件</p>
</blockquote>
<ul>
<li>代码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">source ~&#x2F;.bash_profile</span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;python3 $&#123;1&#125;&#x2F;MainEntrance.py</span><br></pre></td></tr></table></figure></li>
<li>用<code>python3</code>执行<code>$&#123;1&#125;</code>路径下的<code>MainEntrance.py</code>文件</li>
<li><code>source ~/.bash_profile</code>：若不执行该语句，则使用定时任务执行python程序时，会无法找到oralce客户端，导致数据库连接失败</li>
<li>注意：使用定时任务时，<code>sh</code>文件中的路径也要是绝对路径<ul>
<li>例如：<code>/usr/local/bin/python3 /home/admin/work/MainEntrance.py</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>步骤三：执行定时任务</p>
</blockquote>
<ul>
<li>在文件所在文件夹中打开终端</li>
<li>使用<code>root</code><ul>
<li>执行命令：<code>su root</code></li>
</ul>
</li>
<li>运行`OpsRunLinux.sh文件<ul>
<li>执行命令：<code>sh OpsRunLinux.sh</code></li>
</ul>
</li>
</ul>
<h2 id="三、定时执行python程序"><a href="#三、定时执行python程序" class="headerlink" title="三、定时执行python程序"></a>三、定时执行python程序</h2><h3 id="3-1-Windows下的定时任务"><a href="#3-1-Windows下的定时任务" class="headerlink" title="3.1. Windows下的定时任务"></a>3.1. Windows下的定时任务</h3><h4 id="3-1-1-创建文件WinCallPy-bat"><a href="#3-1-1-创建文件WinCallPy-bat" class="headerlink" title="3.1.1. 创建文件WinCallPy.bat"></a>3.1.1. 创建文件<code>WinCallPy.bat</code></h4><ul>
<li>用于执行python程序</li>
<li>文件内容<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">:: 进入文件所在目录</span><br><span class="line"><span class="built_in">cd</span> %~dp0</span><br><span class="line">:: 进入上一级目录</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">:: 执行py文件</span><br><span class="line">python MainEntrance.py</span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="3-1-2-创建文件WinRun-bat"><a href="#3-1-2-创建文件WinRun-bat" class="headerlink" title="3.1.2. 创建文件WinRun.bat"></a>3.1.2. 创建文件<code>WinRun.bat</code></h4><ul>
<li>用于执行定时任务</li>
<li>文件内容<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">:: 创建定时任务，每隔一分钟执行当前文件所在路径下的EntranceForWindows.bat文件</span><br><span class="line">schtasks /create /sc minute /mo <span class="number">1</span> /tn phd /tr %~dp0\WinCallPy.bat</span><br></pre></td></tr></table></figure>
<ul>
<li><code>phd</code>为任务名</li>
</ul>
</li>
</ul>
<h4 id="3-1-3-创建文件WinEnd-bat"><a href="#3-1-3-创建文件WinEnd-bat" class="headerlink" title="3.1.3. 创建文件WinEnd.bat"></a>3.1.3. 创建文件<code>WinEnd.bat</code></h4><ul>
<li>用于关闭定时任务</li>
<li>文件内容<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">schtasks /delete /tn phd /f</span><br></pre></td></tr></table></figure>
<ul>
<li><code>/f</code>表示强制删除</li>
</ul>
</li>
</ul>
<h3 id="3-2-linux下的定时任务"><a href="#3-2-linux下的定时任务" class="headerlink" title="3.2. linux下的定时任务"></a>3.2. linux下的定时任务</h3><h4 id="3-2-1-创建文件LinuxCallPy-sh"><a href="#3-2-1-创建文件LinuxCallPy-sh" class="headerlink" title="3.2.1. 创建文件LinuxCallPy.sh"></a>3.2.1. 创建文件<code>LinuxCallPy.sh</code></h4><ul>
<li>用于执行定时任务</li>
<li>文件内容<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!bin/bash</span></span><br><span class="line">now_dir=`dirname <span class="variable">$0</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$now_dir</span> != <span class="string">&#x27;.&#x27;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">cd</span> <span class="variable">$now_dir</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/python3 MainEntrance.py</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="3-2-2-创建文件LinuxRun-sh"><a href="#3-2-2-创建文件LinuxRun-sh" class="headerlink" title="3.2.2. 创建文件LinuxRun.sh"></a>3.2.2. 创建文件<code>LinuxRun.sh</code></h4><ul>
<li>用于执行定时任务</li>
<li>文件内容<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 获取当前系统的用户并在末尾添加cron，并赋给变量file_name。例如：我的用户名为admin，添加cron之后，file_name的值为admincron</span></span><br><span class="line">file_name=`whoami`cron</span><br><span class="line"><span class="comment"># 获取当前文件所在的路径(不包含文件名)，相对于工作目录（终端）的路径</span></span><br><span class="line">now_dir=`dirname <span class="variable">$0</span>`</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$now_dir</span></span><br><span class="line"><span class="comment"># 获取当前文件的路径，并赋给变量now_dir</span></span><br><span class="line">now_dir=`<span class="built_in">pwd</span>`</span><br><span class="line"><span class="comment"># 在now_dir路径下创建file_name文件</span></span><br><span class="line">touch <span class="variable">$now_dir</span>/<span class="variable">$file_name</span></span><br><span class="line"><span class="comment"># 将定时任务重定向到file_name文件中</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;*/5 * * * * /usr/bin/sh <span class="variable">$now_dir</span>/LinuxCallPy.sh&quot;</span> &gt; <span class="variable">$now_dir</span>/<span class="variable">$file_name</span></span><br><span class="line"><span class="comment"># 加载定时任务，会将file_name文件复制到/var/spool/cron文件夹中，且文件名为用户名，即去掉了末尾的cron</span></span><br><span class="line">crontab <span class="variable">$file_name</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="3-2-3-创建文件LinuxEnd-sh"><a href="#3-2-3-创建文件LinuxEnd-sh" class="headerlink" title="3.2.3. 创建文件LinuxEnd.sh"></a>3.2.3. 创建文件<code>LinuxEnd.sh</code></h4><ul>
<li>用于关闭定时任务</li>
<li>文件内容<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">crontab -r</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>可执行文件</category>
      </categories>
      <tags>
        <tag>BAT</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>Python知识点</title>
    <url>/2021/06/26/Python%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h2 id="一、关键字"><a href="#一、关键字" class="headerlink" title="一、关键字"></a>一、关键字</h2><ul>
<li>关键字就是在Python内部已经使用的标识符</li>
<li>关键字具有特殊的功能和含义</li>
<li>开发者不允许定义和关键字相同的名字的标识符</li>
<li>通过以下命令可以查看Python中的关键字<ul>
<li>import keyword</li>
<li>print(keyword.kwlist)</li>
</ul>
</li>
<li>Python中的关键字：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">False,None,True,and,as,assert,break,class,</span><br><span class="line">continue,def,del,elif,else,except,finally,for,</span><br><span class="line">from,global,if,import,in,is,lambda,nonlocal,not,</span><br><span class="line">or,pass,raise,return,try,while,with,yield</span><br></pre></td></tr></table></figure></li>
<li>import关键字可以导入一个“工具包”，在Python中不同的工具包，提供有不同的工具。</li>
<li>pass<ul>
<li>如果在开发程序时，不希望立刻编写分支内部的代码，可以使用pass关键字，表示一个占位符，能够保证程序的代码结构正确。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if action_str in [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]:</span><br><span class="line">    pass</span><br><span class="line">elif action_str &#x3D;&#x3D; &quot;0&quot;:</span><br><span class="line">    pass</span><br><span class="line">else:</span><br><span class="line">    print(&quot;宝剑锋从磨砺出，梅花香自苦寒来&quot;)</span><br></pre></td></tr></table></figure>
<a id="more"></a>


</li>
</ul>
</li>
</ul>
<h2 id="二、哈希（hash）"><a href="#二、哈希（hash）" class="headerlink" title="二、哈希（hash）"></a>二、哈希（hash）</h2><h3 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1. 定义"></a>2.1. 定义</h3><ul>
<li>python中内置有一个名字叫做hash(o)的函数<ul>
<li>接收一个不可变类型的数据作为参数</li>
<li>返回结果是一个整数</li>
</ul>
</li>
</ul>
<h3 id="2-2-作用"><a href="#2-2-作用" class="headerlink" title="2.2. 作用"></a>2.2. 作用</h3><ul>
<li>哈希是一种算法，其作用就是提取数据的特征码（指纹）<ul>
<li>相同的内容得到相同的结果</li>
<li>不同的内容得到不同的结果</li>
</ul>
</li>
<li>在python中，设置字典的键值对时，会首先对key进行hash已决定如何在内存中保存字典的数据，以方便后续对字典的操作：增、删、改、查<ul>
<li>键值对的key必须是不可变类型数据</li>
<li>键值对的value可以是任意类型的数据</li>
</ul>
</li>
</ul>
<h2 id="三、is与-的区别"><a href="#三、is与-的区别" class="headerlink" title="三、is与==的区别"></a>三、is与==的区别</h2><ul>
<li><code>is</code>用于判断另两个变量引用对象是否为同一个</li>
<li><code>==</code>用于判断引用变量的值是否相等</li>
</ul>
<h2 id="四、Python中的计数方法"><a href="#四、Python中的计数方法" class="headerlink" title="四、Python中的计数方法"></a>四、Python中的计数方法</h2><ul>
<li>常见的计数方法有两种，可以分别称为：<ul>
<li>自然计数法（从1开始）——更符合人类的习惯。</li>
<li>程序计数法（从0开始）——几乎所有的程序语言都选择从0开始计数。</li>
</ul>
</li>
<li>因此在编写程序时，应该尽量养成习惯：除非需求的特殊要求，否则循环的计数都从0开始。</li>
</ul>
<h2 id="五、random"><a href="#五、random" class="headerlink" title="五、random"></a>五、random</h2><ul>
<li>在Python中，要使用随机数，首先需要导入随机数的模块——“工具包”。<ul>
<li>import random</li>
</ul>
</li>
<li>random.randint(a,b),返回[a,b]之间的整数，包含a和b，且a&lt;=b。</li>
<li>在ipython中，导入模块后，可以直接在模块名称后面敲一个“.”，然后按Tab键，会提示该模块中包含的所有函数。</li>
</ul>
<h2 id="六、print"><a href="#六、print" class="headerlink" title="六、print"></a>六、print</h2><ul>
<li>在默认情况下，print函数输出内容之后，会自动在内容末尾增加换行</li>
<li>如果不希望末尾增加换行，可以在print函数输出内容的后面增加：, end=””</li>
<li>其中””中间可以指定print函数输出内容之后，继续希望显示的内容<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 向控制台输出内容结束之后，不会换行</span><br><span class="line">print(&quot;*&quot;, end&#x3D;&quot;&quot;)</span><br><span class="line">print(&quot;*&quot;)</span><br><span class="line"># 输出结果为：**</span><br><span class="line">print(&quot;*&quot;, end&#x3D;&quot;---&quot;)</span><br><span class="line">print(&quot;*&quot;)</span><br><span class="line"># 输出结果为：*---*</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="七、逻辑运算"><a href="#七、逻辑运算" class="headerlink" title="七、逻辑运算"></a>七、逻辑运算</h2><ul>
<li>在程序开发中，通常在判断条件时，会需要同时判断多个条件。</li>
<li>只有多个条件都满足，才能够执行后续代码，这个时候需要使用到逻辑运算符。</li>
<li>逻辑运算符可以把多个条件按照逻辑进行连接，变成更复杂的条件。</li>
<li>Python中的逻辑运算符包括：与and/或or/非not（通常希望某个条件不满足时，执行一些代码，可以使用not）三种。</li>
</ul>
<h2 id="八、Pyc文件"><a href="#八、Pyc文件" class="headerlink" title="八、Pyc文件"></a>八、Pyc文件</h2><ul>
<li>C是compiled编译过的意思<h3 id="8-1-操作步骤"><a href="#8-1-操作步骤" class="headerlink" title="8.1. 操作步骤"></a>8.1. 操作步骤</h3></li>
<li>浏览程序目录会发现一个_pycache_的目录</li>
<li>目录下会有一个自己编写的文件名.cpython.pyc 文件，cpython-35表示Python解释器的版本</li>
<li>这个pyc文件是由Python解释器将模块的源码转换为字节码</li>
<li>Python这样保存字节码是作为一种启动速度的优化</li>
</ul>
<h3 id="8-2-字节码"><a href="#8-2-字节码" class="headerlink" title="8.2. 字节码"></a>8.2. 字节码</h3><ul>
<li>Python在解释源程序时是分成两个步骤的<ul>
<li>首先处理源代码，编译生成一个二进制字节码</li>
<li>再对字节码进行处理，才会生成CPU能够识别的机器码</li>
</ul>
</li>
<li>有了模块的字节码文件之后，下一次运行程序时，如果在上次保存字节码之后没有修改过源代码，Python将会加载.pyc文件并跳过编译这个步骤</li>
<li>当Python重编译时，它会自动检查源文件和字节码文件的时间戳</li>
<li>如果你又修改了源代码，下次程序运行时，字节码将自动重新创建</li>
</ul>
<h2 id="九、关键字、函数和方法的特点和区别"><a href="#九、关键字、函数和方法的特点和区别" class="headerlink" title="九、关键字、函数和方法的特点和区别"></a>九、关键字、函数和方法的特点和区别</h2><h3 id="9-1-关键字"><a href="#9-1-关键字" class="headerlink" title="9.1. 关键字"></a>9.1. 关键字</h3><ul>
<li>关键字是Python内置的、具有特殊意义的标识符</li>
<li>关键字后面不需要使用括号</li>
<li>Python中有33个关键字</li>
<li>通过输入如下代码可以查看python中有哪些关键字<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import keyword</span><br><span class="line">print(keyword.kwlist)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="9-2-函数"><a href="#9-2-函数" class="headerlink" title="9.2. 函数"></a>9.2. 函数</h3><ul>
<li>函数封装了独立功能，可以直接调用</li>
<li>格式：函数名（参数）</li>
<li>函数需要死记硬背</li>
</ul>
<h3 id="9-3-方法"><a href="#9-3-方法" class="headerlink" title="9.3. 方法"></a>9.3. 方法</h3><ul>
<li>方法和函数类似，同样是封装了独立的功能</li>
<li>方法需要通过对象来调用，表示针对这个对象要做的操作</li>
<li>格式：对象.方法名（参数）</li>
<li>在变量后面输入 . ，然后选择针对这个变量要执行的操作，记忆起来比函数要简单很多</li>
</ul>
<h2 id="十、循环遍历"><a href="#十、循环遍历" class="headerlink" title="十、循环遍历"></a>十、循环遍历</h2><ul>
<li>遍历就是从头到尾依次从列表中获取数据，在循环体内部针对每一个元素，执行相同的操作</li>
<li>在Python中为了提高列表的遍历效率，专门提高的迭代iteration遍历</li>
<li>使用for就能够实现迭代遍历</li>
<li>格式：for 循环内部使用的遍历 in 列表<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for name in name_list:</span><br><span class="line">    print(name)</span><br></pre></td></tr></table></figure></li>
<li>在Python中，可以使用for循环遍历所有非数字型类型的变量：列表、元组、字典以及字符串</li>
<li>在实际开发中，除非能够确认元组中的数据类型，否则针对元组的循环遍历需求并不是很多</li>
</ul>
<h2 id="十一、完整的for循环"><a href="#十一、完整的for循环" class="headerlink" title="十一、完整的for循环"></a>十一、完整的for循环</h2><ul>
<li>在Python中完整的for循环的语法如下<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for 变量 in 集合:</span><br><span class="line">    循环体代码</span><br><span class="line">else:</span><br><span class="line">    没有通过 break 退出循环，循环结束后，会执行的代码。</span><br><span class="line">    如果循环体代码中使用了break，则不会执行else中的语句。</span><br></pre></td></tr></table></figure></li>
<li>应用场景<ul>
<li>在迭代遍历嵌套的数据类型时，例如一个列表包含了多个字典</li>
<li>需求：要判断某一个字典中是否存在指定的值<ul>
<li>如果存在，提示并且退出循环</li>
<li>如果不存在，在循环整体结束后，希望得到一个统一的提示</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="十二、切片"><a href="#十二、切片" class="headerlink" title="十二、切片"></a>十二、切片</h2><ul>
<li>切片方法适用于字符串、列表、元组</li>
<li>切片使用索引值来限定范围，从一个大的字符串中切出小的字符串</li>
<li>列表和元组都是有序的集合，都能够通过索引值获取到对应的数据</li>
<li>字典是一个无序的集合，是使用键值对保存数据<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 字符串切片</span><br><span class="line">&quot;0123456789&quot;[::-2]  # 结果为: &quot;97531&quot;</span><br><span class="line"># 列表切片</span><br><span class="line">[0, 1, 2, 3, 4][1:3]  # 结果为：[1,2]</span><br><span class="line"># 元组切片</span><br><span class="line">(0, 1, 2, 3, 4)[1:3]  # 结果为：(1, 2))</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="十三、eval函数"><a href="#十三、eval函数" class="headerlink" title="十三、eval函数"></a>十三、eval函数</h2><ul>
<li><code>eval()</code>函数是将字符串当成有效的表达式来求值并返回计算结果<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 基本的数学计算</span><br><span class="line">In[1]: eval(&quot;1 + 1&quot;)</span><br><span class="line">Out[1]: 2</span><br><span class="line"># 字符串重复</span><br><span class="line">In[2]: eval(&quot;&#39;*&#39; * 10&quot;)</span><br><span class="line">Out[2]: &#39;**********&#39;</span><br><span class="line"># 将字符串转换成列表</span><br><span class="line">In[3]: type(eval(&quot;[1, 2, 3, 4, 5]&quot;))</span><br><span class="line">Out[3]: list</span><br><span class="line"># 将字符串转换成字典</span><br><span class="line">In[4]: type(eval(&quot;&#123;&#39;name&#39;: &#39;phd&#39;, &#39;age&#39;: 18&#125;&quot;))</span><br><span class="line">Out[4]: dict</span><br></pre></td></tr></table></figure></li>
<li>不要滥用eval<ul>
<li>eval会把字符串中的内容当成python的代码去执行</li>
<li>在开发时千万不要使用 eval 直接转换 input 的结果</li>
<li>用户可以通过os模块来调用system方法，就可以执行任何的终端命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">__import__(&#39;os&#39;).system(&#39;ls&#39;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>等价代码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import os</span><br><span class="line">os.system(&quot;终端命令&quot;)</span><br></pre></td></tr></table></figure>
<ul>
<li>执行成功，返回0</li>
<li>执行失败，返回错误信息</li>
</ul>
</li>
</ul>
<!--more-->
]]></content>
      <categories>
        <category>技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础</title>
    <url>/2021/06/25/Python%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="一、Python介绍"><a href="#一、Python介绍" class="headerlink" title="一、Python介绍"></a>一、Python介绍</h2><h3 id="1-1-创始人"><a href="#1-1-创始人" class="headerlink" title="1.1. 创始人"></a>1.1. 创始人</h3><ul>
<li>Python的创始人为吉多·范罗苏姆（Guido van Rossum）</li>
</ul>
<a id="more"></a>
<h3 id="1-2-解释器"><a href="#1-2-解释器" class="headerlink" title="1.2. 解释器"></a>1.2. 解释器</h3><ul>
<li>计算机不能直接理解任何除机器语言以外的语言，所以必须要把程序员所写的程序语言翻译成机器语言，计算机才能执行程序。将其他语言翻译成机器语言的工具，被称为编译器。</li>
<li>编译器翻译的方式有两种：一个是编译，另外一个是解释。两种方式之间的区别在于翻译时间点的不同。当编译器以解释方式运行的时候，也称之为解释器。</li>
</ul>
<h4 id="1-2-1-编译型语言"><a href="#1-2-1-编译型语言" class="headerlink" title="1.2.1. 编译型语言"></a>1.2.1. 编译型语言</h4><ul>
<li>工作方式：在开发环境内编写代码 -&gt; 将开发完成的代码统一交给编译器 -&gt; 保存为可执行文件 -&gt; 通过操作系统交给CPU进行处理</li>
<li>语言：C、C++</li>
<li>优点：执行速度相对较快</li>
</ul>
<h4 id="1-2-2-解释型语言"><a href="#1-2-2-解释型语言" class="headerlink" title="1.2.2. 解释型语言"></a>1.2.2. 解释型语言</h4><ul>
<li>工作方式：在开发环境内编写代码 -&gt; 将源程序交给解释器 -&gt; 解释器通过源程序从上到下逐一读取代码（逐行解释每一行代码），读一行代码就立刻翻译成机器码并交给CPU执行 -&gt; 再读取第二行代码，并翻译成机器码，然后交给CPU执行</li>
<li>语言：Python</li>
<li>优点：跨平台（在不同的操作系统上安装不同的解释器）</li>
</ul>
<h3 id="1-3-Python的设计目标"><a href="#1-3-Python的设计目标" class="headerlink" title="1.3. Python的设计目标"></a>1.3. Python的设计目标</h3><ul>
<li>一门简单直观的语言并与主要竞争者一样强大</li>
<li>开源，以便任何人都可以为它做贡献</li>
<li>代码像纯英语那样容易理解</li>
<li>适用于短期开发的日常任务</li>
</ul>
<h3 id="1-4-Python的设计哲学"><a href="#1-4-Python的设计哲学" class="headerlink" title="1.4. Python的设计哲学"></a>1.4. Python的设计哲学</h3><ul>
<li>优雅：源代码工整、整洁、阅读轻松</li>
<li>明确：明确每句代码要做的事情</li>
<li>简单：让每句代码都尽量的简单</li>
<li>Python开发者的哲学是：用一种方法，最好是只有一种方法来做一件事</li>
<li>如果面临多种选择，Python开发者一般会拒绝花哨的语法，而选择明确没有或者很少有歧义的语法</li>
</ul>
<h3 id="1-5-Python特点"><a href="#1-5-Python特点" class="headerlink" title="1.5. Python特点"></a>1.5. Python特点</h3><ul>
<li>Python是完全面向对象的语言<br>函数、模块、数字、字符串都是对象，在Python中一切皆为对象<br>完全支持继承、重载、多重继承<br>支持重载运算符，也支持泛型设计</li>
<li>Python拥有一个强大的标准库，Python语言的核心只包含数字、字符串、列表、字典、文件等常见类型和函数，而由Python标准库提供了系统管理、网络通信、文本处理、数据库接口、图形系统、XML处理等额外的功能。</li>
<li>Python社区提供了大量的第三方模块、使用方式与标准库类似。它们的功能覆盖科学计算、人工智能、机器学习、web开发、数据库接口、图形系统多个领域。</li>
</ul>
<h3 id="1-6-面向对象的思维方式"><a href="#1-6-面向对象的思维方式" class="headerlink" title="1.6. 面向对象的思维方式"></a>1.6. 面向对象的思维方式</h3><ul>
<li>面向对象是一种思维方式，也是一门程序设计技术。</li>
<li>要解决一个问题前，首先考虑由谁来做，怎么做事情是谁的职责，最后把事情做好就行。</li>
<li>要解决复杂的问题，就可以找多个不同的对象、各司其职，共同实现，最终完成需求。</li>
</ul>
<h3 id="1-7-Python的优缺点"><a href="#1-7-Python的优缺点" class="headerlink" title="1.7. Python的优缺点"></a>1.7. Python的优缺点</h3><h4 id="1-7-1-优点"><a href="#1-7-1-优点" class="headerlink" title="1.7.1. 优点"></a>1.7.1. 优点</h4><ul>
<li>简单、易学</li>
<li>免费、开源</li>
<li>面向对象</li>
<li>丰富的库</li>
<li>可扩展性</li>
<li>如果需要一段关键代码运行得更快或者希望某些算法不公开，可以把这部分程序用C或C++编写，然后在Python程序中使用它们</li>
</ul>
<h4 id="1-7-2-缺点"><a href="#1-7-2-缺点" class="headerlink" title="1.7.2. 缺点"></a>1.7.2. 缺点</h4><ul>
<li>运行速度</li>
<li>国内市场较小</li>
<li>中文资料匮乏</li>
</ul>
<h3 id="1-8-Python文件名命名规则"><a href="#1-8-Python文件名命名规则" class="headerlink" title="1.8. Python文件名命名规则"></a>1.8. Python文件名命名规则</h3><ul>
<li>命名文件名时建议只使用小写字母、数字和下划线</li>
<li>文件名不能以数字开始</li>
</ul>
<h3 id="1-9-代码规范"><a href="#1-9-代码规范" class="headerlink" title="1.9. 代码规范"></a>1.9. 代码规范</h3><ul>
<li>Python官方提供有一系列PEP文档</li>
<li>其中第8篇文档专门针对Python的代码格式给出了建议，也就是俗称的PEP8</li>
<li><a href="https://www.python.org/dev/peps/pep-0008/">文档地址</a></li>
<li><a href="https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/">谷歌有对应的中文文档</a></li>
</ul>
<h3 id="1-10-Python程序执行原理"><a href="#1-10-Python程序执行原理" class="headerlink" title="1.10. Python程序执行原理"></a>1.10. Python程序执行原理</h3><ul>
<li>1、操作系统会首先让CPU把Python解释器的程序复制到内存中。</li>
<li>2、Python解释器根据语法规则，从上向下让CPU翻译Python程序中的代码。</li>
<li>3、CPU负责执行翻译完成的代码</li>
</ul>
<h3 id="1-11-程序的作用"><a href="#1-11-程序的作用" class="headerlink" title="1.11. 程序的作用"></a>1.11. 程序的作用</h3><ul>
<li>程序就是用来处理数据的</li>
<li>新闻软件提供的新闻内容、评论……是数据</li>
<li>电商软件提供的商品信息、配送信息……是数据</li>
<li>运动类软件提供的运动数据……是数据</li>
<li>地图类软件提供的地图信息、定位信息、车辆信息……是数据</li>
<li>即时通讯软件提供的聊天信息、好友信息……是数据</li>
<li>等等</li>
</ul>
<h3 id="1-12-程序的三大流程"><a href="#1-12-程序的三大流程" class="headerlink" title="1.12. 程序的三大流程"></a>1.12. 程序的三大流程</h3><ul>
<li>在程序开发中，一共有三种流程方式：<ul>
<li>顺序——从上向下，顺序执行代码</li>
<li>分支——根据条件判断，决定执行代码的分支</li>
<li>循环——让特定代码重复执行</li>
</ul>
</li>
</ul>
<h2 id="二、执行Python的三种方式"><a href="#二、执行Python的三种方式" class="headerlink" title="二、执行Python的三种方式"></a>二、执行Python的三种方式</h2><h3 id="2-1-第一种：解释器python-python3"><a href="#2-1-第一种：解释器python-python3" class="headerlink" title="2.1. 第一种：解释器python/python3"></a>2.1. 第一种：解释器python/python3</h3><ul>
<li>使用python 2.x解释器<ul>
<li><code>python xxx.py</code></li>
</ul>
</li>
<li>使用python 3.x解释器<ul>
<li><code>python xxx.py</code></li>
</ul>
</li>
</ul>
<h3 id="2-2-第二种：交互式运行Python程序"><a href="#2-2-第二种：交互式运行Python程序" class="headerlink" title="2.2. 第二种：交互式运行Python程序"></a>2.2. 第二种：交互式运行Python程序</h3><ul>
<li>直接在终端中运行解释器，而不输入要执行的文件名</li>
<li>在Python的Shell中直接输入Python的代码，会立即看到程序执行结果</li>
</ul>
<h4 id="2-2-1-交互式运行Python的优缺点"><a href="#2-2-1-交互式运行Python的优缺点" class="headerlink" title="2.2.1. 交互式运行Python的优缺点"></a>2.2.1. 交互式运行Python的优缺点</h4><ul>
<li>优点<ul>
<li>适合于学习/验证Python语法或者局部代码</li>
</ul>
</li>
<li>缺点<ul>
<li>代码不能保存</li>
<li>不适合运行太大的程序</li>
</ul>
</li>
</ul>
<h4 id="2-2-2-退出官方的解释器"><a href="#2-2-2-退出官方的解释器" class="headerlink" title="2.2.2. 退出官方的解释器"></a>2.2.2. 退出官方的解释器</h4><ul>
<li>方法一：直接输入`exit()``</li>
<li>方法二：使用热键退出：在Python解释器中，按热键<code>ctrl+d</code>可以退出解释器</li>
</ul>
<h4 id="2-2-3-IPython"><a href="#2-2-3-IPython" class="headerlink" title="2.2.3. IPython"></a>2.2.3. IPython</h4><ul>
<li>IPython中“i”代表交互Interactive<ul>
<li>特点<ul>
<li>IPython是一个python的交互式shell，比默认的python shell好用的多</li>
<li>支持自动补全、自动缩进、支持<code>bash shell</code>命令、内置了许多很有用的功能和函数</li>
<li>IPython是基于BSD开源的</li>
</ul>
</li>
</ul>
</li>
<li>退出解释器<ul>
<li>方法一：exit</li>
<li>方法二：在IPython解释器中，按热键<code>ctrl+d</code>，IPython会询问是否退出解释器</li>
</ul>
</li>
</ul>
<h3 id="2-3-第三种：Python的IDE——PyCharm"><a href="#2-3-第三种：Python的IDE——PyCharm" class="headerlink" title="2.3. 第三种：Python的IDE——PyCharm"></a>2.3. 第三种：Python的IDE——PyCharm</h3><ul>
<li>集成开发环境（IDE）</li>
<li>集成开发环境集成了开发软件需要的所有工具，一般包括以下工具<ul>
<li>图形用户界面</li>
<li>代码编辑器（支持 代码补全/自动缩进）</li>
<li>编译器/解释器</li>
<li>调试器（断点/单步执行）</li>
</ul>
</li>
</ul>
<h2 id="三、注释"><a href="#三、注释" class="headerlink" title="三、注释"></a>三、注释</h2><h3 id="3-1-单行注释"><a href="#3-1-单行注释" class="headerlink" title="3.1. 单行注释"></a>3.1. 单行注释</h3><ul>
<li>以#开头，#右边的所有东西都被当做说明文字，而不是真正要执行的程序，只起到辅助说明作用。</li>
<li>为了保证代码的可读性，#后面建议先添加一个空格，然后再编写相应的说明文字。</li>
<li>若在代码后面增加单行注释，为了保证代码的可读性，注释和代码之间至少要有两个空格。</li>
<li>点击黄色的灯泡，点击Reformat file可以将所有注释的#后面都空一格。</li>
</ul>
<h3 id="3-2-多行注释"><a href="#3-2-多行注释" class="headerlink" title="3.2. 多行注释"></a>3.2. 多行注释</h3><ul>
<li>如果希望填写的注释信息很多，一行无法显示，就可以使用多行注释。</li>
<li>要在Python程序中使用多行注释，可以用一对连续的三个引号（单引号和双引号都可以）。</li>
</ul>
<h3 id="3-3-什么时候需要使用注释"><a href="#3-3-什么时候需要使用注释" class="headerlink" title="3.3. 什么时候需要使用注释"></a>3.3. 什么时候需要使用注释</h3><ul>
<li>1、注释不是越多越好，对于一目了然的代码，不需要添加注释。</li>
<li>2、对于复杂的操作，应该在操作开始前写上若干行注释。</li>
<li>3、对于不是一目了然的代码，应在其行尾添加注释（为了提高可读性，注释应该至少离开代码2个空格）。</li>
<li>4、觉不要描述代码，假设阅读代码的人比你更懂Python，他只是不知道你的代码要做什么。</li>
<li>在一些正规的开发团队，通常会有代码审核的惯例，就是一个团队中彼此阅读对方的代码。</li>
</ul>
<h3 id="3-4-TODO注释"><a href="#3-4-TODO注释" class="headerlink" title="3.4. TODO注释"></a>3.4. TODO注释</h3><ul>
<li>使用TODO注释可以使注释更加醒目</li>
<li>在 # 后跟上 TODO，用于标记需要去做的工作</li>
</ul>
<h2 id="四、运算符"><a href="#四、运算符" class="headerlink" title="四、运算符"></a>四、运算符</h2><h3 id="4-1-算术运算符"><a href="#4-1-算术运算符" class="headerlink" title="4.1. 算术运算符"></a>4.1. 算术运算符</h3><h4 id="4-1-1-简介"><a href="#4-1-1-简介" class="headerlink" title="4.1.1. 简介"></a>4.1.1. 简介</h4><ul>
<li>算术运算符是运算符的一种，是完成基本的算术运算使用的符号，用来处理四则运算。</li>
<li><code>+</code> 加 10 + 20 = 30<ul>
<li>合并，适用于字符串、列表、元组</li>
<li>范例：<code>[1,2]+[3,4]</code></li>
<li>结果：<code>[1,2,3,4]</code></li>
</ul>
</li>
<li><code>-</code> 减 10 - 20 = -10</li>
<li><code>*</code> 乘 10 * 20 = 200<ul>
<li>“-“ * 10 = ‘———-‘，运算符可以用于字符串，计算结果就是字符串重复指定次数的结果</li>
<li>重复，适用于字符串、列表、元组</li>
<li>范例：<code>[&quot;hi&quot;]*4</code></li>
<li>结果：<code>[&quot;hi&quot;,&quot;hi&quot;,&quot;hi&quot;,&quot;hi&quot;]</code></li>
</ul>
</li>
<li><code>/</code> 除 10 / 20 = 0.5</li>
<li><code>//</code> 取整除 返回除法的整数部分（商）<ul>
<li>9//2输出结果为4</li>
</ul>
</li>
<li><code>%</code> 取余数 返回除法的余数9%2 = 1</li>
<li><code>**</code> 幂 又称次方、乘方，2**3 = 8</li>
</ul>
<h4 id="4-1-2-算术运算符优先级"><a href="#4-1-2-算术运算符优先级" class="headerlink" title="4.1.2. 算术运算符优先级"></a>4.1.2. 算术运算符优先级</h4><ul>
<li>和数学中的运算符的优先级一致</li>
<li>先乘除后加减</li>
<li>同级运算符是从左至右计算</li>
<li>可以使用（）调整计算的优先级</li>
<li>以下表格的算术优先级由高到最低顺序排列<ul>
<li><code>**</code> 幂（最高优先级）</li>
<li><code>* / % //</code> 乘、除、取余数、取整数</li>
<li><code>+ -</code> 加法、减法</li>
</ul>
</li>
</ul>
<h3 id="4-2-赋值运算符"><a href="#4-2-赋值运算符" class="headerlink" title="4.2. 赋值运算符"></a>4.2. 赋值运算符</h3><ul>
<li>在Python中，使用=可以给变量赋值</li>
<li>在算术运算时，为了简化代码的编写，Python还提供了一系列的与算术运算符对应的赋值运算符</li>
<li>注意：赋值运算符中间不能使用空格</li>
<li><code>=</code> 简单的赋值运算符 c = a+b 将a+b的运算结果赋值为c</li>
<li><code>+=</code> 加法赋值运算符 c += a等效于c = c+a</li>
<li><code>-=</code> 减法赋值运算符 c -= a等效于c = c-a</li>
<li><code>*=</code> 乘法赋值运算符 c <em>= a等效于c = c</em>a</li>
<li><code>/=</code> 除法赋值运算符 c /= a等效于c = c/a</li>
<li><code>//=</code> 取整除赋值运算符 c //= a等效于 c = c//a</li>
<li><code>%=</code> 取模（余数）赋值运算符 c %= a等效于 c = c%a</li>
<li><code>**=</code> 幂赋值运算符 c <strong>= a等效于c = c</strong>a</li>
</ul>
<h3 id="4-3-身份运算符"><a href="#4-3-身份运算符" class="headerlink" title="4.3. 身份运算符"></a>4.3. 身份运算符</h3><ul>
<li>身份运算符用于比较两个对象的内存地址是否一致，即是否是对同一个对象的引用</li>
<li>在python中针对None比较时，建议使用is判断</li>
<li><code>is</code><ul>
<li>是判断两个标识符是不是引用同一个对象 x is y，类似 id(x) == id(y)</li>
</ul>
</li>
<li><code>is not</code><ul>
<li>是判断两个标识符是不是引用不同对象 x is not y，类似 id(a) != id(b)</li>
</ul>
</li>
</ul>
<h3 id="4-4-比较运算符"><a href="#4-4-比较运算符" class="headerlink" title="4.4. 比较运算符"></a>4.4. 比较运算符</h3><ul>
<li><code>&gt;  &gt;=  ==  &lt;  &lt;=</code><ul>
<li>元素比较适用于字符串、列表、元组</li>
<li>范例：<code>(1,2,3) &lt; (2,2,3)</code></li>
<li>结果：<code>True</code></li>
<li>注意<ul>
<li>in在对字典操作时，判断的是字典的键</li>
<li>in和not in被称为成员运算符</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="4-5-成员运算符"><a href="#4-5-成员运算符" class="headerlink" title="4.5. 成员运算符"></a>4.5. 成员运算符</h3><ul>
<li>成员运算符用于测试序列中是否包含指定的成员</li>
<li><code>in</code><ul>
<li>如果在指定的序列中找到值返回True，否则返回False</li>
<li>元素是否存在，适用于字符串、列表、元组、字典</li>
<li>范例：<code>3 in (1,2,3)</code><ul>
<li>返回True</li>
</ul>
</li>
</ul>
</li>
<li><code>not in</code><ul>
<li>如果在指定的序列中没有找到值返回True，否则返回False</li>
<li>元素是否不存在，适用于字符串、列表、元组、字典</li>
<li>范例：<code>3 not in (1,2,3)</code><ul>
<li>返回False</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="五、变量"><a href="#五、变量" class="headerlink" title="五、变量"></a>五、变量</h2><h3 id="5-1-变量的定义"><a href="#5-1-变量的定义" class="headerlink" title="5.1. 变量的定义"></a>5.1. 变量的定义</h3><ul>
<li>变量名 = 值</li>
<li>使用交互式方式，如果要查看变量内容，直接输入变量名即可，不需要使用print函数。</li>
<li>使用解释器执行，如果要输出变量的内容，必须要使用print函数。</li>
</ul>
<h3 id="5-2-变量的类型"><a href="#5-2-变量的类型" class="headerlink" title="5.2. 变量的类型"></a>5.2. 变量的类型</h3><ul>
<li>在内存中创建一个变量，会包括<ul>
<li>(1)变量的名称</li>
<li>(2)变量保存的数据</li>
<li>(3)变量存储数据的类型</li>
<li>(4)变量的地址</li>
</ul>
</li>
<li>Python可以根据=等号右侧的值，自动推导出变量中存储数据的类型。</li>
<li>在Python中定义变量是不需要指定类型的（在其他很多高级语言中都需要）。</li>
<li>数据类型可以分为数字型和非数字型。</li>
<li>使用type函数可以查看一个变量的类型，<code>type(name)</code>。</li>
</ul>
<h3 id="5-3-数字型和非数字型"><a href="#5-3-数字型和非数字型" class="headerlink" title="5.3. 数字型和非数字型"></a>5.3. 数字型和非数字型</h3><h4 id="5-3-1-数字型"><a href="#5-3-1-数字型" class="headerlink" title="5.3.1. 数字型"></a>5.3.1. 数字型</h4><ul>
<li>整型（int）、浮点型（flaot）、布尔型（bool，非零即真）、复数型（complex，主要用于科学计算，例如：平面场问题、波动问题、电感电容等问题。</li>
</ul>
<h4 id="5-3-2-非数字型"><a href="#5-3-2-非数字型" class="headerlink" title="5.3.2. 非数字型"></a>5.3.2. 非数字型</h4><ul>
<li>字符串、列表、元组、字典</li>
<li>在Python中，所有非数字型变量都支持以下特点：<ul>
<li>(1)都是一个序列 sequence，也可以理解为 容器</li>
<li>(2)取值[]</li>
<li>(3)遍历 for in</li>
<li>(4)计算长度、最大/最小值、比较、删除</li>
<li>(5)链接 + 和重复 *</li>
<li>(6)切片</li>
</ul>
</li>
</ul>
<h3 id="5-4-可变和不可变类型"><a href="#5-4-可变和不可变类型" class="headerlink" title="5.4. 可变和不可变类型"></a>5.4. 可变和不可变类型</h3><h4 id="5-4-1-不可变类型"><a href="#5-4-1-不可变类型" class="headerlink" title="5.4.1. 不可变类型"></a>5.4.1. 不可变类型</h4><ul>
<li>内存中的数据不允许被修改，赋予新的值时，变量对应的内存地址会发生变化。</li>
<li>数字类型：int、bool、float、complex、long(2.x)</li>
<li>字符串：str</li>
<li>元组：tuple</li>
</ul>
<h4 id="5-4-2-可变类型"><a href="#5-4-2-可变类型" class="headerlink" title="5.4.2. 可变类型"></a>5.4.2. 可变类型</h4><ul>
<li>内存中的数据可以被修改，通过调用方法来赋予新的值时，变量对应的内存地址不会发生变化；直接使用等号赋值还是会改变变量对应的内存地址。</li>
<li>列表：list</li>
<li>字典：dict，字典的key只能使用不可变类型的数据</li>
</ul>
<h4 id="5-4-3-注意"><a href="#5-4-3-注意" class="headerlink" title="5.4.3. 注意"></a>5.4.3. 注意</h4><ul>
<li>可变类型的数据变化，是通过方法来实现的</li>
<li>如果给一个可变类型的变量，赋值了一个新的数据，引用会修改<ul>
<li>变量不再对之前的数据引用</li>
<li>变量改为对新赋值的数据引用</li>
</ul>
</li>
</ul>
<h4 id="5-4-4-不同类型变量之间的计算"><a href="#5-4-4-不同类型变量之间的计算" class="headerlink" title="5.4.4. 不同类型变量之间的计算"></a>5.4.4. 不同类型变量之间的计算</h4><ul>
<li>数字型变量之间可以直接计算<ul>
<li>在Python中，两个数字型变量是可以直接进行算术运算的。</li>
<li>如果变量是bool型，在计算时True对应的数字是1，False对应的数字是。</li>
</ul>
</li>
<li>字符串变量之间使用+拼接字符串<ul>
<li>在Python中，字符串之间可以使用+拼接生成新的字符串</li>
</ul>
</li>
<li>字符串变量可以和整数使用*重复拼接相同的字符串<ul>
<li>范例：”-“ * 10，输出结果为：’———-‘</li>
</ul>
</li>
<li>数字型变量和字符串之间不能进行其他计算</li>
</ul>
<h3 id="5-5-变量的输入"><a href="#5-5-变量的输入" class="headerlink" title="5.5. 变量的输入"></a>5.5. 变量的输入</h3><ul>
<li>所谓输入，就是用代码获取用户通过键盘输入的信息</li>
<li>在Python中，如果要获取用户在键盘上的输入信息，需要使用到input函数</li>
<li>在Python中可以使用input函数从键盘等待用户的输入</li>
<li>用户输入的任何内容Python都认为是一个字符串</li>
<li>格式：字符串变量 = input(“提示信息: “)</li>
</ul>
<h3 id="5-6-类型转换函数"><a href="#5-6-类型转换函数" class="headerlink" title="5.6. 类型转换函数"></a>5.6. 类型转换函数</h3><ul>
<li>int(x)：将x转换为一个整数</li>
<li>float(x)：将x转换到一个浮点数</li>
</ul>
<h3 id="5-7-变量的格式化输出"><a href="#5-7-变量的格式化输出" class="headerlink" title="5.7. 变量的格式化输出"></a>5.7. 变量的格式化输出</h3><ul>
<li>在Python中可以使用print函数将信息输出到控制台。</li>
<li>如果希望输出文字信息的同时，一起输出数据，就需要使用到格式化操作符。</li>
<li><code>%</code>被称为格式化操作符，专门用于处理字符串中的格式。包含%的字符串被称为格式化字符串，%和不同的字符连用，不同类型的数据需要使用不同的格式化字符。</li>
<li><code>%s</code> 字符串</li>
<li><code>%d</code> 有符号十进制整数，%06d表示输出的整数显示6位数，不足的地方使用0补全</li>
<li><code>%f</code> 浮点数，%.02f表示小数点后只显示两位</li>
<li><code>%%</code> 输出%<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(&quot;我的名字叫 %s &quot; % name)</span><br><span class="line">print(&quot;姓名 %s, 年龄 %d, 成绩 %f&quot; % (name_str, age_int, grade_float))</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="5-8-标识符"><a href="#5-8-标识符" class="headerlink" title="5.8. 标识符"></a>5.8. 标识符</h3><ul>
<li>标识符就是程序员定义的变量名、函数名</li>
<li>名字需要有见名知意的效果<ul>
<li>标识符可以由字母、下划线和数字组成</li>
<li>不能以数字开头</li>
<li>不能与关键字重名</li>
</ul>
</li>
</ul>
<h3 id="5-9-变量的命名规则"><a href="#5-9-变量的命名规则" class="headerlink" title="5.9. 变量的命名规则"></a>5.9. 变量的命名规则</h3><ul>
<li>命名规则可以被视为一种惯例，并无绝对与强制</li>
<li>目的是为了增加代码的识别和可读性</li>
<li>注意：Python中的标识符是区分大小写的</li>
</ul>
<h4 id="5-9-1-官方命名规范"><a href="#5-9-1-官方命名规范" class="headerlink" title="5.9.1. 官方命名规范"></a>5.9.1. 官方命名规范</h4><ul>
<li>在定义变量时，为了保证代码格式，=的左右应该各保留一个空格。</li>
<li>在Python中，如果变量名需要由二个或多个单词组成时，可以按照以下方式命名<ul>
<li>每个单词都使用小写字母</li>
<li>单词与单词之间使用_下划线连接</li>
<li>例如：first_name、last_name、qq_number、qq_password</li>
</ul>
</li>
</ul>
<h4 id="5-9-2-驼峰命名法"><a href="#5-9-2-驼峰命名法" class="headerlink" title="5.9.2. 驼峰命名法"></a>5.9.2. 驼峰命名法</h4><ul>
<li>当变量名是由二个或多个单词组成时，还可以利用驼峰命名法来命名</li>
</ul>
<h5 id="5-9-2-1-小驼峰式命名法"><a href="#5-9-2-1-小驼峰式命名法" class="headerlink" title="5.9.2.1. 小驼峰式命名法"></a>5.9.2.1. 小驼峰式命名法</h5><ul>
<li>第一个单词以小写字母开始，后续单词的首字母大写</li>
<li>例如：firstName、lastName</li>
</ul>
<h5 id="5-9-2-2-大驼峰式命名法"><a href="#5-9-2-2-大驼峰式命名法" class="headerlink" title="5.9.2.2. 大驼峰式命名法"></a>5.9.2.2. 大驼峰式命名法</h5><ul>
<li>每一个单词的首字母都采用大写字母</li>
<li>例如：FirstName、LastName、CamelCase</li>
</ul>
<h3 id="5-10-变量的引用"><a href="#5-10-变量的引用" class="headerlink" title="5.10. 变量的引用"></a>5.10. 变量的引用</h3><h4 id="5-10-1-概念"><a href="#5-10-1-概念" class="headerlink" title="5.10.1. 概念"></a>5.10.1. 概念</h4><ul>
<li>变量和数据是分开存储的</li>
<li>数据保存在内存中的一个位置</li>
<li>变量中保存着数据在内存中的地址</li>
<li>变量中记录数据的地址的这个动作，就叫做引用</li>
<li>使用id()函数可以查看变量中保存数据所在的内存地址</li>
<li>注意：如果变量已经被定义，当给一个变量赋值的时候，本质上是修改了数据的引用<ul>
<li>变量不再对之前的数据引用</li>
<li>变量改为对新赋值的数据引用</li>
</ul>
</li>
<li>函数的参数和返回值的传递<ul>
<li>在python中，函数的实参/返回值都是靠引用来传递来的</li>
</ul>
</li>
</ul>
<h4 id="5-10-2-局部变量和全局变量"><a href="#5-10-2-局部变量和全局变量" class="headerlink" title="5.10.2. 局部变量和全局变量"></a>5.10.2. 局部变量和全局变量</h4><ul>
<li>局部变量是在函数内部定义的变量，只能在函数内部使用。</li>
<li>全局变量是在函数外部定义的变量（没有定义在某一个函数内），所有函数内部都可以使用这个变量。</li>
<li>在其他开发语言中，大多不推荐使用全局变量，因为可变范围太大，导致程序不好维护。</li>
</ul>
<h5 id="5-10-2-1-局部变量"><a href="#5-10-2-1-局部变量" class="headerlink" title="5.10.2.1. 局部变量"></a>5.10.2.1. 局部变量</h5><ul>
<li>定义<ul>
<li>局部变量是在函数内部定义的变量，只能在函数内部使用。</li>
<li>函数执行结束后，函数内部的局部变量，会被系统回收。</li>
<li>不同的函数，可以定义相同的名字的局部变量，但是各用各的，不会产生影响。</li>
</ul>
</li>
<li>局部变量的作用<ul>
<li>在函数内部使用，临时保存函数内部需要使用的数据。</li>
</ul>
</li>
<li>局部变量的生命周期<ul>
<li>所谓生命周期就是变量从被创建到被系统回收的过程</li>
<li>局部变量在函数执行时才会被创建</li>
<li>函数执行结束后，局部变量被系统回收</li>
<li>局部变量在生命周期内，可以用来存储函数内部临时使用到的数据</li>
</ul>
</li>
</ul>
<h5 id="5-10-2-2-全局变量"><a href="#5-10-2-2-全局变量" class="headerlink" title="5.10.2.2. 全局变量"></a>5.10.2.2. 全局变量</h5><ul>
<li><p>全局变量是在函数外部定义的变量，所有函数内部都可以使用这个变量</p>
</li>
<li><p>注意：函数执行时，需要处理变量时会：</p>
<ul>
<li>(1)首先查找函数内部是否存在指定名称的局部变量，如果有，直接使用</li>
<li>(2)如果没有，查找函数外部是否存在指定名称的全局变量，如果有，直接使用</li>
<li>(3)如果还没有，程序报错</li>
</ul>
</li>
<li><p>函数不能直接修改全局变量的引用</p>
<ul>
<li>全局变量是在函数外部定义的变量（没有定义在某一个函数内），所有函数内部都可以使用这个变量。</li>
<li>在函数内部，可以通过全局变量的引用获取对应的数据。</li>
<li>但是，不允许直接修改全局变量的引用，即在函数内部不能使用赋值语句修改全局变量的值。如果使用赋值语句，会在函数内部，定义一个局部变量。</li>
</ul>
</li>
<li><p>在函数内部修改全局变量的值</p>
<ul>
<li>如果在函数中需要修改全局变量，需要使用global进行声明。</li>
<li>global关键字会告诉解释器后面的变量是一个全局变量，再使用赋值语句时，就不会创建局部变量<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">num &#x3D; 11</span><br><span class="line">def demo():</span><br><span class="line">    global num</span><br><span class="line">    num &#x3D; 99</span><br><span class="line">    print(&quot;num &#x3D;&#x3D; %d&quot; % num)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>全局变量定义的位置</p>
<ul>
<li>为了保证所有的函数都能够正确使用到全局变量，应该将全局变量定义在其他函数的上方</li>
</ul>
</li>
<li><p>全局变量命名的建议</p>
<ul>
<li>为了避免局部变量和全局变量出现混淆，在定义全局变量时，有些公司会有一些开发要求，例如：全局变量名前应该增加g_或者gl_的前缀</li>
</ul>
</li>
</ul>
<h2 id="六、if判断语句"><a href="#六、if判断语句" class="headerlink" title="六、if判断语句"></a>六、if判断语句</h2><ul>
<li>判断语句也被称为分支语句</li>
</ul>
<h3 id="6-1-if"><a href="#6-1-if" class="headerlink" title="6.1. if"></a>6.1. if</h3><ul>
<li>格式<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if 要判断的条件</span><br><span class="line">    条件成立时，要做的事情</span><br><span class="line">    ……</span><br></pre></td></tr></table></figure>
<ul>
<li>代码的缩进为一个tab键，或者4个空格，建议使用空格。在Python开发中，tab和空格不要混用，要么都用tab要么都用空格。</li>
<li>if语句以及缩进部分是一个完整的代码块</li>
</ul>
</li>
</ul>
<h3 id="6-2-else"><a href="#6-2-else" class="headerlink" title="6.2. else"></a>6.2. else</h3><ul>
<li>else处理条件不满足的情况</li>
<li>格式<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if 要判断的条件:</span><br><span class="line">    条件成立时，要做的事情</span><br><span class="line">else:</span><br><span class="line">    条件不成立时，要做的事情</span><br><span class="line">    ……</span><br></pre></td></tr></table></figure>
<ul>
<li>if和else语句以及各自的缩进部分共同是一个完整的代码块</li>
</ul>
</li>
</ul>
<h3 id="6-3-elif"><a href="#6-3-elif" class="headerlink" title="6.3. elif"></a>6.3. elif</h3><ul>
<li>在开发中，使用if可以判断条件</li>
<li>使用else可以处理条件不成立的情况</li>
<li>但是，如果希望再增加一些条件，条件不同，需要执行的代码也不同时，就可以使用elif</li>
<li>格式<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if 条件1:</span><br><span class="line">    条件1满足时，执行的代码</span><br><span class="line">    ……</span><br><span class="line">elif 条件2:</span><br><span class="line">    条件2满足时，执行的代码</span><br><span class="line">    ……</span><br><span class="line">elif 条件3:</span><br><span class="line">    条件3满足时，执行的代码</span><br><span class="line">    ……</span><br><span class="line">else:</span><br><span class="line">    以上条件都不满足时，执行的代码</span><br><span class="line">    ……</span><br></pre></td></tr></table></figure>
<ul>
<li>elif和else都必须和if联合使用，而不能单独使用</li>
<li>可以将if、elif和else以及各自缩进的代码，看成一个完整的代码块</li>
</ul>
</li>
</ul>
<h3 id="6-4-if嵌套"><a href="#6-4-if嵌套" class="headerlink" title="6.4. if嵌套"></a>6.4. if嵌套</h3><ul>
<li>格式<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if 条件 1:</span><br><span class="line">    条件1满足时，执行的代码</span><br><span class="line">    ……</span><br><span class="line">    if 条件1基础上的条件2:</span><br><span class="line">        条件2满足时，执行的代码</span><br><span class="line">        ……</span><br><span class="line">    else:  # 条件2不满足的处理</span><br><span class="line">        条件2不满足时，执行的代码</span><br><span class="line">        ……</span><br><span class="line">else:  # 条件1不满足的处理</span><br><span class="line">    条件1不满足时，执行的代码</span><br><span class="line">    ……</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="七、while循环基本使用"><a href="#七、while循环基本使用" class="headerlink" title="七、while循环基本使用"></a>七、while循环基本使用</h2><h3 id="7-1-循环的作用"><a href="#7-1-循环的作用" class="headerlink" title="7.1. 循环的作用"></a>7.1. 循环的作用</h3><ul>
<li>循环的作用就是让指定的代码重复的执行</li>
<li>while循环最常用的应用场景就是让执行的代码按照指定的次数重复执行</li>
</ul>
<h3 id="7-2-格式"><a href="#7-2-格式" class="headerlink" title="7.2. 格式"></a>7.2. 格式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while 条件(判断 计数器 是否达到 目标次数):</span><br><span class="line">    条件满足时，做的事情1</span><br><span class="line">    条件满足时，做的事情2</span><br><span class="line">    条件满足时，做的事情3</span><br><span class="line">    ……</span><br><span class="line">    处理条件（计数器 + 1）</span><br><span class="line"></span><br><span class="line">while i &lt;&#x3D; 100:</span><br><span class="line">    print(i)</span><br><span class="line">    i++</span><br></pre></td></tr></table></figure>

<h3 id="7-3-死循环"><a href="#7-3-死循环" class="headerlink" title="7.3. 死循环"></a>7.3. 死循环</h3><ul>
<li>由于程序员的原因，忘记在循环内部修改循环的判断条件，导致循环持续执行，程序无法终止！</li>
</ul>
<h3 id="7-4-break和continue"><a href="#7-4-break和continue" class="headerlink" title="7.4. break和continue"></a>7.4. break和continue</h3><ul>
<li>break和continue是专门在循环中使用的关键字</li>
<li>break，某一条件满足时，退出循环，不再执行后续重复的代码</li>
<li>continue，某一条件满足时，不执行后续重复的代码，进入下一次循环</li>
<li>break和continue只针对当前所在循环有效</li>
</ul>
<h3 id="7-5-PyCharm的调试工具"><a href="#7-5-PyCharm的调试工具" class="headerlink" title="7.5. PyCharm的调试工具"></a>7.5. PyCharm的调试工具</h3><ul>
<li><code>F8 Step Over</code>可以单步执行代码，会把函数调用看作是一行代码直接执行</li>
<li><code>F7 Step Into</code>可以单步执行代码，如果是函数，会进入函数内部</li>
</ul>
<h2 id="八、函数"><a href="#八、函数" class="headerlink" title="八、函数"></a>八、函数</h2><h3 id="8-1-简介"><a href="#8-1-简介" class="headerlink" title="8.1. 简介"></a>8.1. 简介</h3><ul>
<li>函数就是把具有独立功能的代码块组织为一个小模块，在需要的时候调用，</li>
<li>函数的使用包含了两个步骤<ul>
<li>1、定义函数——封装独立的功能</li>
<li>2、调用函数——享受封装的成果</li>
</ul>
</li>
<li>函数的作用，在开发程序时，使用函数可以提高编写的效率以及代码的重用。</li>
</ul>
<h3 id="8-2-格式"><a href="#8-2-格式" class="headerlink" title="8.2. 格式"></a>8.2. 格式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def 函数名(参数1, 参数2):</span><br><span class="line">    函数封装的代码</span><br><span class="line">    ……</span><br><span class="line"></span><br><span class="line">def han_shu():</span><br><span class="line">    print(&quot;hello1&quot;)</span><br><span class="line">    print(&quot;hello2&quot;)</span><br><span class="line">    print(&quot;hello3&quot;)</span><br><span class="line"></span><br><span class="line">han_shu()</span><br><span class="line"></span><br><span class="line">def dai_can(num1, num2):</span><br><span class="line">    result &#x3D; num1 + num2</span><br><span class="line">    print(&quot;%d + %d &#x3D; %d&quot; % (num1, num2, result))</span><br><span class="line"></span><br><span class="line">dai_can(50, 20)</span><br></pre></td></tr></table></figure>
<ul>
<li>def是英文define的缩写</li>
<li>函数名称应该能够表达函数封装代码的功能，方便后续的调用</li>
<li>函数名称的命名应该符合标识符的命名规则<ul>
<li>可以由字母、下划线和数字组成</li>
<li>不能以数字开头</li>
<li>不能与关键字重名</li>
</ul>
</li>
<li>通过 函数名() 即可完成对函数的调用</li>
<li>定义好函数之后，只表示这个函数封装了一段代码而已</li>
<li>如果不主动调用函数，函数是不会主动执行的</li>
<li>函数执行完之后，会重新回到之前的程序中，继续执行后续的代码</li>
<li>注意</li>
<li>不能将函数调用放在函数定义的上方，因为在使用函数名调用函数之前，必须要保证Python已经知道函数的存在。否则控制台会提示：函数名没有定义</li>
<li>函数的文档注释</li>
<li>在开发中，如果希望给函数添加注释，应该在定义函数的下方，使用连续的三对引号</li>
<li>在连续的三对引号之间编写对函数的说明文字<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def han_shu():</span><br><span class="line">    &quot;&quot;&quot;这是一个注释&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    print(&quot;hello1&quot;)</span><br><span class="line">    print(&quot;hello2&quot;)</span><br><span class="line">    print(&quot;hello3&quot;)</span><br></pre></td></tr></table></figure></li>
<li>在函数调用位置，使用快捷键<code>CTRL + q</code>可以查看函数的说明信息</li>
<li>因为函数体相对比较独立，函数定义的上方，应该和其他代码（包括注释）保留两个空行</li>
<li>在pycharm中，选择定义的函数名，在左侧会出现一个小灯泡，点击之后选择第二项<code>Insert documentation string stub</code></li>
</ul>
<h3 id="8-3-参数的作用"><a href="#8-3-参数的作用" class="headerlink" title="8.3. 参数的作用"></a>8.3. 参数的作用</h3><ul>
<li>函数把具有独立功能的代码块组织为一个小模块，在需要的时候调用</li>
<li>函数的参数，增加函数的通用性，针对相同的数据处理逻辑，能够适应更多的数据</li>
<li>在函数内部，把参数当做变量使用，进行需要的数据处理</li>
<li>函数调用时，按照函数定义的参数顺序，把希望在函数内部处理的数据，通过参数传递</li>
</ul>
<h3 id="8-4-形参和实参"><a href="#8-4-形参和实参" class="headerlink" title="8.4. 形参和实参"></a>8.4. 形参和实参</h3><ul>
<li>形参：定义函数时，小括号中的参数，是用来接收参数用的，在函数内部作为变量使用。</li>
<li>实参：调用函数时，小括号中的参数，是用来把数据传递到函数内部用的。</li>
</ul>
<h3 id="8-5-函数的返回值"><a href="#8-5-函数的返回值" class="headerlink" title="8.5. 函数的返回值"></a>8.5. 函数的返回值</h3><ul>
<li>在程序开发中，有时候，会希望一个函数执行结束后，告诉调用者一个结果，以便调用者针对具体的结果做后续的处理。</li>
<li>返回值是函数完成工作后，最后给调用者的一个结果</li>
<li>在函数中使用return关键字可以返回结果</li>
<li>调用函数一方，可以使用变量来接受函数的返回结果</li>
<li>注意：return表示返回，后续的代码都不会被执行<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def sum_2_num(num1, num2):</span><br><span class="line">    &quot;&quot;&quot;对两个数字的求和&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    return num1 + num2</span><br><span class="line"># 调用函数，并使用 result 变量接受计算结果</span><br><span class="line">result &#x3D; sum_2_num(10, 20)</span><br><span class="line">print(&quot;计算结果是 %d&quot; % result)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="8-6-函数的嵌套调用"><a href="#8-6-函数的嵌套调用" class="headerlink" title="8.6. 函数的嵌套调用"></a>8.6. 函数的嵌套调用</h3><ul>
<li>一个函数里面又调用了另外一个函数，这就是函数嵌套调用</li>
<li>如果函数 test2 中，调用了另外一个函数 test1<ul>
<li>那么执行到调用 test1 函数时，会先把函数 test1 中的任务都执行完</li>
<li>才会回到 test2 中调用函数 test1 的位置，继续执行后续的代码</li>
</ul>
</li>
</ul>
<h3 id="8-7-函数参数和返回值的作用"><a href="#8-7-函数参数和返回值的作用" class="headerlink" title="8.7. 函数参数和返回值的作用"></a>8.7. 函数参数和返回值的作用</h3><ul>
<li><p>函数根据有没有参数以及有没有返回值，可以互相组合，一共有4中组合形式</p>
<ul>
<li>1、无参数，无返回值</li>
<li>2、无参数，有返回值</li>
<li>3、有参数，无返回值</li>
<li>4、有参数，有返回值</li>
</ul>
</li>
<li><p>如果函数内部处理的数据不确定，就可以将外界的数据以参数传递到函数内部。</p>
</li>
<li><p>如果希望一个函数执行完成后，向外界汇报执行结果，就可以增加函数的返回值。</p>
</li>
</ul>
<h3 id="8-8-函数的返回值"><a href="#8-8-函数的返回值" class="headerlink" title="8.8 函数的返回值"></a>8.8 函数的返回值</h3><ul>
<li>在程序开发中，有时候，会希望一个函数执行结束后，告诉调用者一个结果，以便调用者针对具体的结果做后续的处理。</li>
<li>返回值是函数完成工作后，最后给调用者的一个结果。</li>
<li>在函数中使用return关键字可以返回结果。</li>
<li>元组可以包含多个数据，因此可以使用元组让函数一次返回多个值，如果函数返回的类型是元组，小括号可以省略。</li>
<li>如果函数返回的类型是元组，同时希望单独的处理元组中的元素，可以使用多个变量，一次接收函数的返回结果<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 1</span><br><span class="line">gl_temp, gl_wetness &#x3D; measure()  # measure是定义的一个函数，返回一个包含两个元素的元组</span><br><span class="line"># 2</span><br><span class="line">a, b &#x3D; (b, a)</span><br><span class="line">a, b &#x3D; b, a  # 小括号可以省略</span><br></pre></td></tr></table></figure>
<ul>
<li>注意：使用多个变量接收结果时，变量的个数应该和元组中元素的个数保持一致。</li>
</ul>
</li>
</ul>
<h3 id="8-9-函数的参数"><a href="#8-9-函数的参数" class="headerlink" title="8.9. 函数的参数"></a>8.9. 函数的参数</h3><ul>
<li>无论传递的参数是可变还是不可变，只要针对参数使用赋值语句，会在函数内部修改局部变量的引用，不会影响到外部变量的引用。</li>
<li>如果传递的参数是可变类型，在函数内部，使用方法修改了数据的内容，同样会影响到外部的数据。</li>
</ul>
<h3 id="8-10-缺省参数"><a href="#8-10-缺省参数" class="headerlink" title="8.10. 缺省参数"></a>8.10. 缺省参数</h3><h4 id="8-10-1-简介"><a href="#8-10-1-简介" class="headerlink" title="8.10.1. 简介"></a>8.10.1. 简介</h4><ul>
<li>定义函数时，可以给某个参数指定一个默认值，具有默认值的参数就叫做缺省参数。</li>
<li>调用函数时，如果没有传入缺省参数的值，则在函数内部使用定义函数时指定的参数默认值。</li>
<li>函数的缺省参数，将常见的值设置为参数的缺省值，从而简化函数的调用。</li>
</ul>
<h4 id="8-10-2-指定函数的缺省参数"><a href="#8-10-2-指定函数的缺省参数" class="headerlink" title="8.10.2. 指定函数的缺省参数"></a>8.10.2. 指定函数的缺省参数</h4><ul>
<li><p>在参数后使用赋值语句，可以指定参数的缺省值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def print_info(name, gender&#x3D;True):</span><br><span class="line">    gender_text &#x3D; &quot;男生&quot;</span><br><span class="line">    if not gender:</span><br><span class="line">        gender_text &#x3D; &quot;女生&quot;</span><br><span class="line">    print(&quot;%s 是 %s&quot; % (name, gender_text))</span><br></pre></td></tr></table></figure>
</li>
<li><p>缺省参数，需要使用最常见的值作为默认值。</p>
</li>
<li><p>如果一个参数的值不能确定，则不应该设置默认值，具体的数值在调用函数时，由外界传递。</p>
<h4 id="8-10-3-注意"><a href="#8-10-3-注意" class="headerlink" title="8.10.3. 注意"></a>8.10.3. 注意</h4></li>
<li><p>缺省参数的定义位置</p>
<ul>
<li>必须保证带有默认值的缺省参数在参数列表末尾。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 错误的写法</span><br><span class="line">def print_info(name, gender&#x3D;True, title):</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>调用带有多个缺省参数的函数</p>
<ul>
<li>在调用函数时，如果有多个缺省参数，需要指定参数名，这样解释器才能够知道参数的对应关系。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print_info(&quot;老王&quot;, gender &#x3D; False)</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="8-11-多值参数"><a href="#8-11-多值参数" class="headerlink" title="8.11. 多值参数"></a>8.11. 多值参数</h3><ul>
<li>定义支持多值参数的函数</li>
<li>有时可能需要一个函数能够处理的参数个数是不确定的，这个时候，就可以使用多值参数</li>
<li>python中有两种多值参数：<ul>
<li>参数名前增加一个 * 可以接收元组</li>
<li>参数名前增加两个 ** 可以接收字典</li>
</ul>
</li>
<li>一般在给多值参数命名时，习惯使用以下两个名字<ul>
<li>*args —— 存放元组参数，注意前面有一个 *</li>
<li>**kwargs —— 存放字典参数，注意前面有两个 *</li>
</ul>
</li>
<li>args是arguments的缩写，有变量的含义</li>
<li>kw是keyword的缩写，kwargs可以记忆键值对参数<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def demo(num, *args, **kwargs):</span><br><span class="line">    print(num)</span><br><span class="line">    print(args)</span><br><span class="line">    print(kwargs)</span><br><span class="line"></span><br><span class="line">demo(1, 2, 3, 4, 5, name &#x3D; &quot;小明&quot;, age &#x3D; 18, gender &#x3D; True)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">输结果为：</span><br><span class="line">1</span><br><span class="line">(2, 3, 4, 5)</span><br><span class="line">&#123;&#39;age&#39;: 18, &#39;name&#39;: &#39;小明&#39;&#125;</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="8-12-元组和字典的拆包"><a href="#8-12-元组和字典的拆包" class="headerlink" title="8.12. 元组和字典的拆包"></a>8.12. 元组和字典的拆包</h3><ul>
<li>在调用带有多值参数的函数时，如果希望：<ul>
<li>将一个元组变量，直接传递给 args</li>
<li>将一个字典变量，直接传递给 kwargs</li>
</ul>
</li>
<li>就可以使用拆包，简化参数的传递，拆包的方式是：<ul>
<li>在元组变量前，增加一个 *</li>
<li>在字典变量前，增加两个 *<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def demo(*args, **kwargs):</span><br><span class="line">    print(args)</span><br><span class="line">    print(kwargs)</span><br><span class="line"># 需要将一个元组变量&#x2F;字典变量传递给函数对应的参数</span><br><span class="line">gl_nums &#x3D; (1, 2, 3)</span><br><span class="line">gl_xiaoming &#x3D; &#123;&quot;name&quot;: &quot;小明&quot;, &quot;age&quot;: 18&#125;</span><br><span class="line">demo(gl_nums, gl_xiaoming)  # 会把 num_tuple 和 xiaoming 作为元组传递给 args</span><br><span class="line">demo(*gl_nums, **gl_xiaoming)  # 将元组变量和字典变量传递给函数对应的参数</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="8-13-函数的递归"><a href="#8-13-函数的递归" class="headerlink" title="8.13. 函数的递归"></a>8.13. 函数的递归</h3><ul>
<li>函数调用自身的编程技巧称为递归。</li>
</ul>
<h4 id="8-13-1-递归函数的特点"><a href="#8-13-1-递归函数的特点" class="headerlink" title="8.13.1. 递归函数的特点"></a>8.13.1. 递归函数的特点</h4><ul>
<li>一个函数内部调用自己，函数内部可以调用其他函数，当然在函数内部也可以调用自己。</li>
</ul>
<h4 id="8-13-2-代码特点"><a href="#8-13-2-代码特点" class="headerlink" title="8.13.2. 代码特点"></a>8.13.2. 代码特点</h4><ul>
<li>函数内部的代码是相同的，只是针对参数不同，处理的结果不同。</li>
<li>当参数满足一个条件时，函数不再执行，通常被称为递归的出口，否则会出现死循环。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def sum_numbers(num):</span><br><span class="line">    print(num)</span><br><span class="line">    #递归的出口很重要，否则会出现死循环</span><br><span class="line">    if num &#x3D;&#x3D; 1:</span><br><span class="line">        return</span><br><span class="line">    sum_numbers(num - 1)</span><br><span class="line">sum_numbers(3)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="8-14-Python内置函数"><a href="#8-14-Python内置函数" class="headerlink" title="8.14. Python内置函数"></a>8.14. Python内置函数</h3><ul>
<li><code>len(item)</code><ul>
<li>计算容器中元素个数</li>
</ul>
</li>
<li><code>del(item)</code><ul>
<li>删除变量</li>
<li>del有两种方式</li>
</ul>
</li>
<li><code>max(item)</code><ul>
<li>返回容器中元素最大值</li>
<li>如果是字典，只针对key比较</li>
</ul>
</li>
<li><code>min(item)</code><ul>
<li>返回容器中元素最小值</li>
<li>如果是字典，只针对key比较</li>
</ul>
</li>
<li><code>cmp(item1,item2)</code><ul>
<li>比较两个值，-1小于/0相等/1大于</li>
<li>Python3.x取消了cmp函数</li>
</ul>
</li>
<li>注意：字符串比较符合以下规则：’0’ &lt; ‘A’ &lt; ‘a’</li>
</ul>
<h2 id="九、列表"><a href="#九、列表" class="headerlink" title="九、列表"></a>九、列表</h2><h3 id="9-1-定义"><a href="#9-1-定义" class="headerlink" title="9.1. 定义"></a>9.1. 定义</h3><ul>
<li>List（列表）时Python中使用最频繁的数据类型，在其他语言中通常叫做数组</li>
<li>专门用于存储一串信息</li>
<li>列表用 [] 定义，数据之间使用 , 分隔</li>
<li>列表的索引从0开始<ul>
<li>索引就是数据在列表中的位置编号，索引又可以被称为下标</li>
<li>从列表中取值时，如果超出索引范围，程序会报错</li>
</ul>
</li>
<li>应用<ul>
<li>Python的列表中可以存储不同类型的数据</li>
<li>在开发中，更多的应用场景是<ul>
<li>1、列表存储相同类型的数据</li>
<li>2、通过迭代遍历，在循环体内部，针对列表中的每一项元素，执行相同的操作</li>
</ul>
</li>
</ul>
</li>
<li>格式<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name_list &#x3D; [&quot;zhansan&quot;, &quot;lisi&quot;, &quot;wangwu&quot;]</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="9-2-列表常用操作"><a href="#9-2-列表常用操作" class="headerlink" title="9.2. 列表常用操作"></a>9.2. 列表常用操作</h3><ul>
<li>在ipython中定义一个列表，例如：name_list = []</li>
<li>输入name_list.按下TAB键，ipython会提示列表能够使用的方法如下<ul>
<li>增加<ul>
<li>列表.insert(索引, 数据) 在指定位置插入数据</li>
<li>列表.append(数据) 在末尾追加数据</li>
<li>列表1.extend(列表2) 将列表2的数据追加到列表1的末尾</li>
</ul>
</li>
<li>修改<ul>
<li>列表[索引] = 数据 从列表中取值</li>
</ul>
</li>
<li>删除<ul>
<li>del 列表[索引] 删除指定索引的数据</li>
<li>列表.remove[数据] 删除第一个出现的指定数据</li>
<li>列表.pop 删除末尾数据</li>
<li>列表.pop(索引) 删除指定索引的数据</li>
<li>列表.clear 清空列表</li>
</ul>
</li>
<li>统计<ul>
<li>(列表) 获取列表的长度，包含的元素的总数</li>
<li>列表.count(数据) 数据在列表中出现的次数</li>
</ul>
</li>
<li>排序<ul>
<li>列表.sort() 升序排序</li>
<li>列表.sort(reverse=True) 降序排序</li>
<li>列表.reverse() 反转/逆序，将123变成321</li>
</ul>
</li>
<li>查询<ul>
<li>列表.index(数据) 获取数据第一次出现的索引</li>
</ul>
</li>
</ul>
</li>
<li>在python中，列表变量调用 += 不会做相加再赋值的操作，本质上是在执行列表变量的 extend 方法，不会修改变量的引用。</li>
</ul>
<h3 id="9-3-del"><a href="#9-3-del" class="headerlink" title="9.3. del"></a>9.3. del</h3><ul>
<li>使用del关键字（delete）删除列表元素。</li>
<li>在日常开发中，要从列表删除数据，建议使用列表提供的方法。</li>
<li>del关键字本质上是用来将一个变量从内存中删除的。</li>
<li>注意：如果使用del关键字将变量从内存中删除，那么后续的代码就不能再使用这个变量了。</li>
</ul>
<h2 id="十、元组"><a href="#十、元组" class="headerlink" title="十、元组"></a>十、元组</h2><h3 id="10-1-定义"><a href="#10-1-定义" class="headerlink" title="10.1. 定义"></a>10.1. 定义</h3><ul>
<li>Tuple（元组）与列表类似，不同之处在于元组的元素不能修改<ul>
<li>元组表示多个元素组成的序列</li>
<li>元组在Python开发中，有特定的应用场景</li>
</ul>
</li>
<li>元组中通常保存不同类型的数据</li>
<li>用于存储一串信息，数据之间使用 ， 分隔</li>
<li>元组用 () 定义</li>
<li>元组的索引从0开始<ul>
<li>索引就是数据在元组中的位置编号</li>
</ul>
</li>
</ul>
<h3 id="10-2-格式"><a href="#10-2-格式" class="headerlink" title="10.2. 格式"></a>10.2. 格式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">info_tuple &#x3D; (&quot;zhangsan&quot;, 18, 1.75)</span><br><span class="line"></span><br><span class="line"># 创建空元组</span><br><span class="line">info_tuple2 &#x3D; ()</span><br><span class="line"></span><br><span class="line"># 创建一个只包含一个元素的元组</span><br><span class="line">info_tuple3 &#x3D; (99,)  # 元组中，只包含一个元素时，需要在元素后面添加逗号</span><br></pre></td></tr></table></figure>

<h3 id="10-3-元组常用操作"><a href="#10-3-元组常用操作" class="headerlink" title="10.3. 元组常用操作"></a>10.3. 元组常用操作</h3><ul>
<li>在ipython3中定义一个元组，例如：info = ()</li>
<li>输入 info. 按下 TAB 键，ipython会提示元组能够使用的函数如下<ul>
<li><code>info.count</code></li>
<li><code>info.index</code></li>
</ul>
</li>
</ul>
<h3 id="10-4-应用场景"><a href="#10-4-应用场景" class="headerlink" title="10.4. 应用场景"></a>10.4. 应用场景</h3><ul>
<li>尽管可以使用for in遍历元组，但是在开发中，更多的应用场景是<ul>
<li>1、函数的参数和返回值，一个函数可以接收任意多个参数，或者一次返回多个数据</li>
<li>2、格式字符串，格式化字符串后面的 () 本质上就是一个元组，格式字符可以拼接生成一个新的字符串<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">info &#x3D; (&quot;zhangsan&quot;, 18)</span><br><span class="line">print(&quot;%s 的年龄是 %d&quot; % info)</span><br><span class="line"># 通过格式字符串拼接生成一个新的字符串</span><br><span class="line">info_str &#x3D; &quot;%s 的年龄是 %d&quot; % info</span><br><span class="line">print(into_str)</span><br></pre></td></tr></table></figure></li>
<li>3.让列表不可以被修改，以保护数据安全</li>
</ul>
</li>
</ul>
<h3 id="10-5-元组和列表之间的转换"><a href="#10-5-元组和列表之间的转换" class="headerlink" title="10.5. 元组和列表之间的转换"></a>10.5. 元组和列表之间的转换</h3><ul>
<li>使用list函数可以把元组转换成列表<ul>
<li>list(元组)</li>
</ul>
</li>
<li>使用tuple函数可以把列表转换成元组<ul>
<li>tuple(列表)</li>
</ul>
</li>
</ul>
<h2 id="十一、字典"><a href="#十一、字典" class="headerlink" title="十一、字典"></a>十一、字典</h2><h3 id="11-1-定义"><a href="#11-1-定义" class="headerlink" title="11.1. 定义"></a>11.1. 定义</h3><ul>
<li>dictionary（字典）是除列表以外Python之中最灵活的数据类型</li>
<li>字典同样可以用来存储多个数据<ul>
<li>通常用于存储描述一个物体的相关信息</li>
</ul>
</li>
<li>和列表的区别是：<ul>
<li>列表时有序的对象集合</li>
<li>字典是无需的对象集合</li>
</ul>
</li>
<li>字典用 {} 定义</li>
<li>字典使用键值对存储数据，键值对之间使用 , 分隔<ul>
<li>键 key 是索引</li>
<li>值 value 是数据</li>
<li>键和值之间使用 : 分隔</li>
<li>键必须是唯一的</li>
<li>值可以取任何数据类型，但键只能使用字符串、数字或元组</li>
</ul>
</li>
<li>因为字典是一个无序的数据集合，使用print函数输出字典时，通常输出的顺序和定义的顺序是不一致的</li>
</ul>
<h3 id="11-2-格式"><a href="#11-2-格式" class="headerlink" title="11.2. 格式"></a>11.2. 格式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xiaoming &#x3D; &#123;&quot;name&quot;: &quot;小明&quot;,</span><br><span class="line">            &quot;age&quot;: 18,</span><br><span class="line">            &quot;gender&quot;: True,</span><br><span class="line">            &quot;height&quot;: 1.75&#125;</span><br></pre></td></tr></table></figure>

<h3 id="11-3-字典的使用"><a href="#11-3-字典的使用" class="headerlink" title="11.3. 字典的使用"></a>11.3. 字典的使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xiaoming_dict &#x3D; &#123;&quot;name&quot;: &quot;小明&quot;&#125;</span><br><span class="line"># 1.取值，在取值的时候，如果指定的key不存在，程序会报错</span><br><span class="line">print(xiaoming_dict[&quot;name&quot;])</span><br><span class="line"></span><br><span class="line"># 2.增加&#x2F;修改</span><br><span class="line"># 如果key不存在，会新增键值对</span><br><span class="line">xiaoming_dict[&quot;age&quot;] &#x3D; 18</span><br><span class="line"># 如果key存在, 会修改已经存在的键值对</span><br><span class="line">xiaoming_dict[&quot;name&quot;] &#x3D; &quot;小小明&quot;</span><br><span class="line"></span><br><span class="line"># 3.删除</span><br><span class="line">xiaoming_dict.pop(&quot;name&quot;)</span><br><span class="line"># 在删除指定键值对的时候，如果指定的key不存在，程序会报错</span><br><span class="line">xiaoming_dict.pop(&quot;name123&quot;)</span><br><span class="line"></span><br><span class="line">print(xiaoming_dict)</span><br></pre></td></tr></table></figure>

<h3 id="11-4-字典常用操作"><a href="#11-4-字典常用操作" class="headerlink" title="11.4. 字典常用操作"></a>11.4. 字典常用操作</h3><ul>
<li><p>在ipython3中定义一个字典，例如：xiaoming = {}</p>
</li>
<li><p>输入xiaoming. 按下TAB键， ipython会提示字典能够使用的函数</p>
</li>
<li><p>使用update合并字典时，如果被合并的字典中包含已经存在的键值对，会覆盖原有的键值对</p>
<ul>
<li><code>字典.values()</code>所有value列表</li>
<li><code>字典.items()</code>所有(key,value)元组列表</li>
</ul>
</li>
<li><p>字典.keys()所有key列表</p>
<ul>
<li><code>字典[key]</code>可以从字典中取值，key不存在时，会报错</li>
<li><code>字典.get(key)</code>可以从字典中取值，key不存在时，不会报错</li>
<li><code>del 字典[key]</code>删除指定键值对，key不存在会报错</li>
<li><code>字典.pop(key)</code>删除指定键值对，key不存在会报错</li>
<li><code>字典.popitem()</code>随机删除一个键值对</li>
<li><code>字典.clear()</code>清空字典</li>
<li><code>字典[key] = value</code>如果key存在，修改数据；如果key不存在，新建键值对</li>
<li><code>字典.setdefault(key,value)</code>如果key存在，不会修改数据；如果key不存在，新建键值对</li>
<li><code>字典.update(字典2)</code>将字典2的数据合并到字典1</li>
</ul>
</li>
</ul>
<h3 id="11-5-字典的循环遍历"><a href="#11-5-字典的循环遍历" class="headerlink" title="11.5. 字典的循环遍历"></a>11.5. 字典的循环遍历</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># for 循环内部使用的‘key的变量’ in 字典</span><br><span class="line">for k in xiaoming:</span><br><span class="line">    print(&quot;%s: %s&quot; % (k, xiaoming[k]))</span><br></pre></td></tr></table></figure>

<h3 id="11-6-应用场景"><a href="#11-6-应用场景" class="headerlink" title="11.6. 应用场景"></a>11.6. 应用场景</h3><ul>
<li>尽管可以使用 for in遍历字典，但是在开发中，更多的应用场景是：<ul>
<li>使用多个键值对，存储描述一个物体的相关信息——描述更复杂的数据信息</li>
<li>将多个字典放在一个列表中，再进行遍历，在循环体内部针对每一个字典进行相同的处理<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">card_list &#x3D; [&#123;&quot;name&quot;: &quot;张三&quot;,</span><br><span class="line">            &quot;qq&quot;: &quot;12345&quot;,</span><br><span class="line">            &quot;phone&quot;: &quot;10000&quot;&#125;,</span><br><span class="line">            &#123;&quot;name&quot;: &quot;李四&quot;,</span><br><span class="line">            &quot;qq&quot;: &quot;54321&quot;,</span><br><span class="line">            &quot;phone&quot;: &quot;10086&quot;&#125;]</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="十二、字符串"><a href="#十二、字符串" class="headerlink" title="十二、字符串"></a>十二、字符串</h2><h3 id="12-1-定义"><a href="#12-1-定义" class="headerlink" title="12.1. 定义"></a>12.1. 定义</h3><ul>
<li>字符串就是一串字符，是编程语言中表示文本的数据类型</li>
<li>在Python中可以使用一对双引号 “ 或者一对单引号 ‘ 定义一个字符串</li>
<li>虽然可以使用 &quot; 或者 &#39; 做字符串的转义，但是在实际开发中：<ul>
<li>如果字符串内部需要使用 “，可以使用 ‘ 定义字符串</li>
<li>如果字符串内部需要使用 ’，可以使用 “ 定义字符串</li>
</ul>
</li>
<li>可以使用索引获取一个字符串中指定位置的字符，索引计数从0开始</li>
<li>也可以使用for循环遍历字符串中每一个字符<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string &#x3D; &quot;hello python&quot;</span><br><span class="line">for c in string:</span><br><span class="line">    print(c)</span><br></pre></td></tr></table></figure></li>
<li>字符串的索引值是从0开始的</li>
<li><code>(字符串)</code>获取字符串的长度</li>
<li><code>字符串.count(字符串)</code>小字符串在大字符串中出现的次数</li>
<li><code>字符串[索引]</code>从字符串中取出单个字符</li>
<li><code>字符串.index(字符串)</code>获得小字符串第一次出现的索引</li>
</ul>
<h3 id="12-2-字符串的常用操作"><a href="#12-2-字符串的常用操作" class="headerlink" title="12.2. 字符串的常用操作"></a>12.2. 字符串的常用操作</h3><h4 id="12-2-1-如何查看能够使用的方法"><a href="#12-2-1-如何查看能够使用的方法" class="headerlink" title="12.2.1. 如何查看能够使用的方法"></a>12.2.1. 如何查看能够使用的方法</h4><ul>
<li>在ipython3中定义一个字符串，例如：`hello_str = “”``</li>
<li>输入<code>hello_str.</code>按下<code>TAB</code>键，ipython会提示字符串能够使用的方法</li>
</ul>
<h4 id="12-2-2-判断类型-9个"><a href="#12-2-2-判断类型-9个" class="headerlink" title="12.2.2. 判断类型(9个)"></a>12.2.2. 判断类型(9个)</h4><ul>
<li><p><code>string.isspace()</code></p>
<ul>
<li>如果string中包含空格，则返回true</li>
</ul>
</li>
<li><p><code>string.isalnum()</code></p>
<ul>
<li>如果string至少有一个字符并且所有字符都是字母或数字则返回true</li>
</ul>
</li>
<li><p><code>string.isalpha()</code></p>
<ul>
<li>如果string至少有一个字符并且所有字符都是字母则返回true</li>
</ul>
</li>
<li><p><code>string.isdecimal()</code></p>
<ul>
<li>如果string只包含数字则返回true，全角数字</li>
</ul>
</li>
<li><p><code>string.isdigit()</code></p>
<ul>
<li>如果string只包含数组则返回true，全角数字、(1)、\u00b2</li>
</ul>
</li>
<li><p><code>string.isnumeric()</code></p>
<ul>
<li>如果string只包含数字则返回true，全角数字、汉字数字</li>
</ul>
</li>
<li><p><code>string.istitle()</code></p>
<ul>
<li>如果string是标题化的(每个单词的首字母大写)则返回true</li>
</ul>
</li>
<li><p><code>string.islower()</code></p>
<ul>
<li>如果string中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回true</li>
</ul>
</li>
<li><p><code>string.isupper()</code></p>
<ul>
<li>如果string中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回true</li>
</ul>
</li>
<li><p>注意：这三个函数都不能判断小数。应该尽量使用<code>isdecimal()</code>方法，因为在程序开发中，绝大多数都是纯数字进行判断的，很少使用Unicode字符串和中文数字。</p>
<ul>
<li><code>isdecimal()</code>只能判断单纯的数字</li>
<li><code>isdigit()</code>还可以判断unicode字符串</li>
<li><code>isnumeric()</code>不仅可以判断unicode字符串，还可以判断中文数字（例如：一千九百）。</li>
</ul>
</li>
</ul>
<h4 id="12-2-3-查找和替换-7个"><a href="#12-2-3-查找和替换-7个" class="headerlink" title="12.2.3. 查找和替换(7个)"></a>12.2.3. 查找和替换(7个)</h4><ul>
<li><code>string.startswith(str)</code><ul>
<li>检查字符串是否是以str开头，是则返回true</li>
</ul>
</li>
<li><code>string.endswitch(str)</code><ul>
<li>检查字符串是否是以str结束，是则返回true</li>
</ul>
</li>
<li><code>string.find(str,start=0,end=len(string))</code><ul>
<li>检测str是否包含在string中，如果start和end指定范围，则检查是否包含在指定范围内，如果是则返回开始的索引值，否则返回<code>-1</code></li>
</ul>
</li>
<li><code>string.rfind(str,start=0,end=len(string))</code><ul>
<li>类似于<code>find()</code>函数，不过是从右边开始查找</li>
</ul>
</li>
<li><code>string.index(str,start=0,end=len(string))</code><ul>
<li>跟find()方法类似，只不过如果str不在时，string会报错</li>
</ul>
</li>
<li><code>string.rindex(str,start=0,end=len(string))</code><ul>
<li>类似于index()，不过是从右边开始</li>
</ul>
</li>
<li><code>string.replace(old_str,new_str,num=string.count(old))</code><ul>
<li>把string中的old_str替换成new_str，如果num指定，则替换不超过num次</li>
</ul>
</li>
</ul>
<h4 id="12-2-4-大小写转换-5个"><a href="#12-2-4-大小写转换-5个" class="headerlink" title="12.2.4.大小写转换(5个)"></a>12.2.4.大小写转换(5个)</h4><ul>
<li><code>string.capitalize()</code><ul>
<li>把字符串的第一个字符大写</li>
</ul>
</li>
<li><code>string.title()</code><ul>
<li>把字符串的每个单词首字母大写</li>
</ul>
</li>
<li><code>string.lower()</code><ul>
<li>转换string中所有大写字符为小写</li>
</ul>
</li>
<li><code>string.upper()</code><ul>
<li>转换string中的小写字母为大写</li>
</ul>
</li>
<li><code>string.swapcase()</code><ul>
<li>翻转string中的大小写</li>
</ul>
</li>
</ul>
<h4 id="12-2-5-文本对齐-3个"><a href="#12-2-5-文本对齐-3个" class="headerlink" title="12.2.5.文本对齐(3个)"></a>12.2.5.文本对齐(3个)</h4><ul>
<li><code>string.ljust(width)</code><ul>
<li>返回一个原字符串左对齐，并使用空格填充至长度width的新字符串</li>
</ul>
</li>
<li><code>string.rjust(width)</code><ul>
<li>返回一个原字符串右对齐，并使用空格填充至长度width的新字符串</li>
</ul>
</li>
<li><code>string.center(width)</code><ul>
<li>返回一个原字符串居中，并使用空格填充至长度width的新字符串</li>
</ul>
</li>
</ul>
<h4 id="12-2-6-去除空白字符-3个"><a href="#12-2-6-去除空白字符-3个" class="headerlink" title="12.2.6.去除空白字符(3个)"></a>12.2.6.去除空白字符(3个)</h4><ul>
<li><code>string.lstrip()</code><ul>
<li>截掉string左边(开始)的空白字符</li>
</ul>
</li>
<li><code>string.rstrip()</code><ul>
<li>截掉string右边(末尾)的空白字符</li>
</ul>
</li>
<li><code>string.strip()</code><ul>
<li>截掉string左右两边的空白字符</li>
</ul>
</li>
</ul>
<h4 id="12-2-7-拆分和连接-5个"><a href="#12-2-7-拆分和连接-5个" class="headerlink" title="12.2.7.拆分和连接(5个)"></a>12.2.7.拆分和连接(5个)</h4><ul>
<li><code>string.partition(str)</code><ul>
<li>把字符串string分成一个3元素的元组(str前面，str，str后面)</li>
</ul>
</li>
<li><code>string.rpartition(str)</code><ul>
<li>类似于partition()函数，不过是从右边开始查找</li>
</ul>
</li>
<li><code>string.split(str=&quot;&quot;,num)</code><ul>
<li>以str为分隔符切片string，如果num有指定值，则仅分隔<code>num + 1</code>个子字符串，str默认包含<code>\r</code>，<code>\t</code>，<code>\n</code>和空格</li>
</ul>
</li>
<li><code>string.splitlines()</code><ul>
<li>按照行(‘\r’,<code>\n</code>,<code>\r\n</code>)分隔，返回一个包含各行作为元素的列表</li>
</ul>
</li>
<li><code>string.join(&quot;-&quot;,seq)</code><ul>
<li>以<code>-</code>作为分隔符，将seq中所有的元素合并为一个新的字符串</li>
</ul>
</li>
</ul>
<h3 id="12-3-字符串的切片"><a href="#12-3-字符串的切片" class="headerlink" title="12.3. 字符串的切片"></a>12.3. 字符串的切片</h3><ul>
<li>切片方法适用于字符串、列表、元组</li>
<li>切片使用索引值来限定范围，从一个大的字符串中切出小的字符串</li>
<li>列表和元组都是有序的集合，都能够通过索引值获取到对应的数据</li>
<li>字典是一个无序的集合，是使用键值对保存数据</li>
<li>格式<ul>
<li>字符串[开始索引：结束索引：步长]</li>
</ul>
</li>
<li>注意<ul>
<li>指定的区间属于左闭右开型 [开始索引，结束索引） =&gt; 开始索引 &gt;= 范围 &lt; 结束索引</li>
<li>从起始位开始，到结束位的前一位结束（不包含结束位本身）</li>
<li>从头开始，开始索引数字可以省略，冒号不能省略。逆序时，从末尾开始，开始索引数字也可以省略。</li>
<li>到末尾结束，结束索引数字可以省略，冒号不能省略</li>
<li>步长默认为1，如果连续切片，数字和冒号都可以省略</li>
<li>步长就是跳跃连续间隔的切片，下一次切片的起始位置为 开始索引+步长</li>
<li>倒序时，最末尾的元素对应的索引为<code>-1</code></li>
</ul>
</li>
</ul>
<h3 id="12-4-字符串中的转义字符"><a href="#12-4-字符串中的转义字符" class="headerlink" title="12.4. 字符串中的转义字符"></a>12.4. 字符串中的转义字符</h3><ul>
<li><code>\t</code>在控制台输出一个制表符，协助在输出文本时，垂直方向保持对齐</li>
<li><code>\n</code>在控制台输出一个换行符</li>
<li>制表符的功能是在不使用表格的情况下在垂直方向按列对齐文本</li>
<li><code>\\</code> 反斜杠符号</li>
<li><code>\&#39;</code> 单引号</li>
<li><code>\&#39;&#39;</code> 双引号</li>
<li><code>\n</code> 换行</li>
<li><code>\t</code> 横向制表符</li>
<li><code>\r</code> 回车<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(&quot;1\t2\t3&quot;)</span><br><span class="line">print(&quot;10\t20\t30&quot;)</span><br></pre></td></tr></table></figure>


</li>
</ul>
<!--more-->
]]></content>
      <categories>
        <category>技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>个人制作小游戏之二</title>
    <url>/2021/06/16/%E4%B8%AA%E4%BA%BA%E5%88%B6%E4%BD%9C%E5%B0%8F%E6%B8%B8%E6%88%8F%E4%B9%8B%E4%BA%8C/</url>
    <content><![CDATA[<iframe src="https://www.bilibili.com/video/BV1bq4y1L7xP?share_source=copy_web" scrolling="no" width="800px" height="600px" border="0"
frameborder="no" framespacing="0" allowfullscreen="true"></iframe>
]]></content>
      <categories>
        <category>记录</category>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>个人制作小游戏之一</title>
    <url>/2021/06/16/%E4%B8%AA%E4%BA%BA%E5%88%B6%E4%BD%9C%E5%B0%8F%E6%B8%B8%E6%88%8F%E4%B9%8B%E4%B8%80/</url>
    <content><![CDATA[<iframe src="https://www.bilibili.com/video/BV1xo4y1k72y?share_source=copy_web" scrolling="no" width="800px" height="600px" border="0"
frameborder="no" framespacing="0" allowfullscreen="true"></iframe>
]]></content>
      <categories>
        <category>记录</category>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS之文字阴影</title>
    <url>/2021/06/08/CSS%E4%B9%8B%E6%96%87%E5%AD%97%E9%98%B4%E5%BD%B1/</url>
    <content><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><ul>
<li>在<code>CSS3</code>中，可以使用<code>text-shadow</code>属性将阴影应用于文本</li>
</ul>
<h2 id="二、语法"><a href="#二、语法" class="headerlink" title="二、语法"></a>二、语法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">text-shadow: h-shadow v-shadow blur color;</span><br></pre></td></tr></table></figure>

<h2 id="三、属性"><a href="#三、属性" class="headerlink" title="三、属性"></a>三、属性</h2><ul>
<li><code>h-shadow</code>：必需，阴影的水平位置。允许负值。</li>
<li><code>v-shadow</code>：必需，阴影的垂直位置。允许负值。</li>
<li><code>blur</code>：可选。模糊程度。值越大越模糊。</li>
<li><code>color</code>：可选。阴影的颜色。</li>
</ul>
<h2 id="四、范例"><a href="#四、范例" class="headerlink" title="四、范例"></a>四、范例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .yinying &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        background-color: aqua;</span><br><span class="line">        margin: 100px auto;</span><br><span class="line">        text-shadow: 9px 9px 9px black;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
        <category>WEB开发</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS之盒子阴影</title>
    <url>/2021/06/08/CSS%E4%B9%8B%E7%9B%92%E5%AD%90%E9%98%B4%E5%BD%B1/</url>
    <content><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><ul>
<li>CSS3中新增了盒子阴影，我们可以使用box-shadow属性为盒子添加阴影</li>
</ul>
<h2 id="二、语法"><a href="#二、语法" class="headerlink" title="二、语法"></a>二、语法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">box-shadow: h-shadow v-shadow blur spread color inset;</span><br></pre></td></tr></table></figure>
<h2 id="三、属性"><a href="#三、属性" class="headerlink" title="三、属性"></a>三、属性</h2><ul>
<li><code>h-shadow</code>：必需。阴影的水平位置。允许负值。</li>
<li><code>v-shadow</code>：必需。阴影的垂直位置。允许负值。</li>
<li><code>blur</code>：可选。模糊程度。值越大越模糊。</li>
<li><code>spread</code>：可选。阴影的尺寸。</li>
<li><code>color</code>：可选。阴影的颜色。</li>
<li><code>inset</code>：可选。将外部阴影（outset）改为内部阴影。</li>
</ul>
<h2 id="四、范例"><a href="#四、范例" class="headerlink" title="四、范例"></a>四、范例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .yinying &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        background-color: aqua;</span><br><span class="line">        margin: 100px auto;</span><br><span class="line">        box-shadow: 9px 9px 9px 9px rosybrown;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="五、阴影转换"><a href="#五、阴影转换" class="headerlink" title="五、阴影转换"></a>五、阴影转换</h2><ul>
<li><code>inset</code>是将外部阴影改为内部阴影</li>
<li>默认的是外部阴影，不可以写<code>ouset</code>，否则阴影无效</li>
<li>盒子阴影不占用空间，不会影响其他盒子的排列</li>
<li>范例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .yinying &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        background-color: aqua;</span><br><span class="line">        margin: 100px auto;</span><br><span class="line">        box-shadow: 9px 9px 9px 9px rosybrown inset;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>WEB开发</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS之圆角边框</title>
    <url>/2021/06/07/CSS%E4%B9%8B%E5%9C%86%E8%A7%92%E8%BE%B9%E6%A1%86/</url>
    <content><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><ul>
<li><code>CSS3</code>中，新增了圆角边框样式，可以使盒子边框变成圆角</li>
<li><code>border-radius</code>属性用于设置元素的外边框圆角</li>
<li><code>radius</code>半径：（椭）圆与边框的交集形成圆角效果</li>
</ul>
<h2 id="二、语法"><a href="#二、语法" class="headerlink" title="二、语法"></a>二、语法</h2><ul>
<li><code>border-radius: length;</code></li>
<li>参数值可以为数值或百分比的形式</li>
<li>百分比是边框宽度和高度的一半</li>
</ul>
<h2 id="三、圆形边框"><a href="#三、圆形边框" class="headerlink" title="三、圆形边框"></a>三、圆形边框</h2><ul>
<li><p>将半径设置为正方形边框边长的一半</p>
</li>
<li><p>用数值的形式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;phd99&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .yuan &#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: aqua;</span><br><span class="line">            border-radius: 50px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;yuan&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>用百分比的形式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;phd99&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .yuan &#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: aqua;</span><br><span class="line">            border-radius: 50%;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;yuan&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="四、分别设置边框的四个角"><a href="#四、分别设置边框的四个角" class="headerlink" title="四、分别设置边框的四个角"></a>四、分别设置边框的四个角</h2><h3 id="4-1-属性"><a href="#4-1-属性" class="headerlink" title="4.1. 属性"></a>4.1. 属性</h3><ul>
<li><code>border-top-left-radius</code>：左上角</li>
<li><code>border-top-right-radius</code>：右上角</li>
<li><code>border-bottom-right-radius</code>：右下角</li>
<li><code>border-bottom-left-radius</code>：左下角</li>
</ul>
<h3 id="4-2-分开写法"><a href="#4-2-分开写法" class="headerlink" title="4.2. 分开写法"></a>4.2. 分开写法</h3><ul>
<li>范例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .jiao &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        background-color: aqua;</span><br><span class="line">        border-top-left-radius: 10px;</span><br><span class="line">        border-top-right-radius: 20px;</span><br><span class="line">        border-bottom-right-radius: 30px;</span><br><span class="line">        border-bottom-left-radius: 40px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="4-3-复合写法"><a href="#4-3-复合写法" class="headerlink" title="4.3. 复合写法"></a>4.3. 复合写法</h3><ul>
<li>可以将4个半径值都写在<code>border-radius</code>里面</li>
<li>可以设置多个值<ul>
<li>设置一个值：表示改变4个半径</li>
<li>设置两个值：表示分别改变左上角和右下角、左下角和右上角</li>
<li>设置三个值：表示分别改变左上角、右下角和左上角、右下角</li>
<li>设置四个值：表示分别改变左上角、右上角、右下角、左下角</li>
</ul>
</li>
<li>范例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .jiao &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        background-color: aqua;</span><br><span class="line">        border-radius: 10px 30px 50px 60px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>WEB开发</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS之盒子模型</title>
    <url>/2021/06/06/CSS%E4%B9%8B%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="一、页面布局"><a href="#一、页面布局" class="headerlink" title="一、页面布局"></a>一、页面布局</h2><ul>
<li>页面布局要学习三大核心，盒子模型，浮动和定位，学习好盒子模型能非常好的帮助我们布局页面</li>
</ul>
<h2 id="二、盒子模型简介"><a href="#二、盒子模型简介" class="headerlink" title="二、盒子模型简介"></a>二、盒子模型简介</h2><ul>
<li>盒子模型就是把HTML页面中的布局元素看作是一个矩形的盒子，也就是一个盛装内容的容器</li>
<li>CSS盒子模型本质上是一个盒子，封装周围的HTML元素，</li>
</ul>
<h2 id="三、盒子模型的组成"><a href="#三、盒子模型的组成" class="headerlink" title="三、盒子模型的组成"></a>三、盒子模型的组成</h2><ul>
<li><code>border</code> 边框</li>
<li><code>content</code> 内容</li>
<li><code>padding</code> 内边距</li>
<li><code>margin</code> 外边距<div  align="center">
<img src="https://gcore.jsdelivr.net/gh/phd99/img/技术/CSS/CSS之盒子模型/1.png" width = 60% />
</div>

</li>
</ul>
<h2 id="四、边框border"><a href="#四、边框border" class="headerlink" title="四、边框border"></a>四、边框border</h2><h3 id="4-1-border简介"><a href="#4-1-border简介" class="headerlink" title="4.1. border简介"></a>4.1. border简介</h3><ul>
<li>border可以设置元素的边框</li>
</ul>
<h3 id="4-2-边框的组成"><a href="#4-2-边框的组成" class="headerlink" title="4.2. 边框的组成"></a>4.2. 边框的组成</h3><ul>
<li>边框有三部分组成<ul>
<li>边框宽度（粗细）</li>
<li>边框样式</li>
<li>边框颜色</li>
</ul>
</li>
</ul>
<h3 id="4-3-写法"><a href="#4-3-写法" class="headerlink" title="4.3. 写法"></a>4.3. 写法</h3><ul>
<li>范例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">  border-width: 10px;</span><br><span class="line">  border-style: solid;</span><br><span class="line">  border-color: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="4-4-属性"><a href="#4-4-属性" class="headerlink" title="4.4. 属性"></a>4.4. 属性</h3><ul>
<li><code>border-width</code>：定义边框粗细，单位一般情况下都用px</li>
<li><code>border-style</code>：边框的样式，可以设置是虚线还是实线</li>
<li><code>border-color</code>：边框颜色</li>
<li>范例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    div &#123;</span><br><span class="line">        border-width: 2px;</span><br><span class="line">        border-style: solid; &#x2F;* 实线solid,虚线dashed,点线dotted *&#x2F;</span><br><span class="line">        border-color: blue;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="4-5-边框的复合写法"><a href="#4-5-边框的复合写法" class="headerlink" title="4.5. 边框的复合写法"></a>4.5. 边框的复合写法</h3><ul>
<li>可以将属性写在一起</li>
<li>范例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">border: 1px solid red; &#x2F;* 没有先后顺序之分 *&#x2F;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="4-6-边框的分开写法"><a href="#4-6-边框的分开写法" class="headerlink" title="4.6. 边框的分开写法"></a>4.6. 边框的分开写法</h3><ul>
<li>可以只修改一条边</li>
<li>范例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">border-top: 1px solid red; &#x2F;* 只修改上边框 *&#x2F;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="4-7-表格的细线边框"><a href="#4-7-表格的细线边框" class="headerlink" title="4.7. 表格的细线边框"></a>4.7. 表格的细线边框</h3><ul>
<li>border-collapse：属性控制浏览器绘制表格边框的方式，它控制相邻单元格的边框</li>
<li>范例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">border-collapse: collapse; &#x2F;* 表示相邻边框合并在一起，不会因为重合叠加而变粗 *&#x2F;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="4-8-边框会影响盒子的实际大小"><a href="#4-8-边框会影响盒子的实际大小" class="headerlink" title="4.8. 边框会影响盒子的实际大小"></a>4.8. 边框会影响盒子的实际大小</h3><ul>
<li>盒子的实际大小为：<code>盒子的width/height + 边框粗细</code></li>
</ul>
<h2 id="五、内边距padding"><a href="#五、内边距padding" class="headerlink" title="五、内边距padding"></a>五、内边距padding</h2><h3 id="5-1-简介"><a href="#5-1-简介" class="headerlink" title="5.1. 简介"></a>5.1. 简介</h3><ul>
<li>padding属性用于设置内边距，即边框与内容之间的距离</li>
</ul>
<h3 id="5-2-属性"><a href="#5-2-属性" class="headerlink" title="5.2. 属性"></a>5.2. 属性</h3><ul>
<li>padding-left: 左外边距</li>
<li>padding-right: 右外边距</li>
<li>padding-top: 上外边距</li>
<li>padding-bottom: 下外边距</li>
</ul>
<h3 id="5-3-写法"><a href="#5-3-写法" class="headerlink" title="5.3. 写法"></a>5.3. 写法</h3><ul>
<li>范例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">  padding-top: 10px;</span><br><span class="line">  padding-bottom: 10px;</span><br><span class="line">  padding-left: 10px;</span><br><span class="line">  padding-right: 10px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="5-4-复合写法"><a href="#5-4-复合写法" class="headerlink" title="5.4. 复合写法"></a>5.4. 复合写法</h3><ul>
<li><code>padding: 1px;</code><ul>
<li>1个值，代表上下左右都有1像素内边距</li>
</ul>
</li>
<li><code>padding: 1px 9px;</code><ul>
<li>2个值，代表上下内边距是1像素，左右内边距是9像素</li>
</ul>
</li>
<li><code>padding: 1px 9px 19px;</code><ul>
<li>3个值，代表上内边距是1像素，左右内边距是9像素，下内边距是19像素</li>
</ul>
</li>
<li><code>padding: 1px 9px 19px 29px;</code><ul>
<li>4个值，代表上内边距是1像素，右内边距是9像素，下内边距是19像素，左内边距是29px，按顺时针顺序设置值</li>
</ul>
</li>
</ul>
<h3 id="5-5-padding会影响盒子的实际大小"><a href="#5-5-padding会影响盒子的实际大小" class="headerlink" title="5.5. padding会影响盒子的实际大小"></a>5.5. padding会影响盒子的实际大小</h3><ul>
<li>当盒子设置了宽高时，如果padding也设置宽高，则盒子的实际大小为：设置的盒子宽高+(2*padding的宽高)</li>
<li>范例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">  &#x2F;* 盒子的实际大小为140*140</span><br><span class="line">  width: 100px;</span><br><span class="line">  hight: 100px;</span><br><span class="line">  padding: 20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="5-6-padding不会撑开盒子的情况"><a href="#5-6-padding不会撑开盒子的情况" class="headerlink" title="5.6. padding不会撑开盒子的情况"></a>5.6. padding不会撑开盒子的情况</h3><ul>
<li>如果盒子本身没有指定width/height属性，则此时padding不会撑开盒子的大小</li>
<li>范例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">  &#x2F;* 盒子高度会撑大，宽度不变 *&#x2F;</span><br><span class="line">  height: 100px;</span><br><span class="line">  padding: 30px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="六、外边距margin"><a href="#六、外边距margin" class="headerlink" title="六、外边距margin"></a>六、外边距margin</h2><h3 id="6-1-简介"><a href="#6-1-简介" class="headerlink" title="6.1. 简介"></a>6.1. 简介</h3><ul>
<li>margin属性用于设置外边距，即控制盒子和盒子之间的距离</li>
</ul>
<h3 id="6-2-属性"><a href="#6-2-属性" class="headerlink" title="6.2. 属性"></a>6.2. 属性</h3><ul>
<li>margin-left: 左外边距</li>
<li>margin-right: 右外边距</li>
<li>margin-top: 上外边距</li>
<li>margin-bottom: 下外边距</li>
</ul>
<h3 id="6-3-写法"><a href="#6-3-写法" class="headerlink" title="6.3. 写法"></a>6.3. 写法</h3><ul>
<li>范例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">  margin-left: 1px;</span><br><span class="line">  margin-right: 1px;</span><br><span class="line">  margin-top: 1px;</span><br><span class="line">  margin-bottom: 1px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="6-4-复合写法"><a href="#6-4-复合写法" class="headerlink" title="6.4. 复合写法"></a>6.4. 复合写法</h3><ul>
<li>和内边距完全一致</li>
<li><code>margin: 1px;</code><ul>
<li>1个值，代表上下左右都有1像素外边距</li>
</ul>
</li>
<li><code>margin: 1px 9px;</code><ul>
<li>2个值，代表上下外边距是1像素，左右外边距是9像素</li>
</ul>
</li>
<li><code>margin: 1px 9px 19px;</code><ul>
<li>3个值，代表上外边距是1像素，左右外边距是9像素，下外边距是19像素</li>
</ul>
</li>
<li><code>margin: 1px 9px 19px 29px;</code><ul>
<li>4个值，代表上外边距是1像素，右外边距是9像素，下外边距是19像素，左外边距是29px，按顺时针顺序设置值</li>
</ul>
</li>
</ul>
<h3 id="6-5-外边距合并"><a href="#6-5-外边距合并" class="headerlink" title="6.5. 外边距合并"></a>6.5. 外边距合并</h3><h4 id="6-5-1-相邻块元素垂直外边距的合并"><a href="#6-5-1-相邻块元素垂直外边距的合并" class="headerlink" title="6.5.1. 相邻块元素垂直外边距的合并"></a>6.5.1. 相邻块元素垂直外边距的合并</h4><ul>
<li>当上下相邻的两个块元素（兄弟关系）相遇时，如果上面的元素有下外边距<code>margin-bottom</code>，下面的元素有上外边距<code>margin-top</code>，则他们之间的垂直间距不是<code>margin-bottom</code>与<code>margin-top</code>之和,而是取两个值中的较大者，这种现象被称为相邻块元素垂直外边距的合并</li>
<li>解决办法<ul>
<li>对于上下相邻的两个块元素，尽量只给一个盒子添加<code>margin</code>值</li>
</ul>
</li>
</ul>
<h4 id="6-5-2-嵌套块元素垂直外边距的塌陷"><a href="#6-5-2-嵌套块元素垂直外边距的塌陷" class="headerlink" title="6.5.2. 嵌套块元素垂直外边距的塌陷"></a>6.5.2. 嵌套块元素垂直外边距的塌陷</h4><ul>
<li><p>对于两个嵌套关系（父子关系）的块元素，父元素有上外边距，同时子元素也有上外边距，此时父元素会和子元素平齐，并会下移（塌陷）到较大的外边距值</p>
</li>
<li><p>解决办法</p>
<ul>
<li><p>1.可以为父元素定义上边框</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;phd99&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .father &#123;</span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            background-color: aqua;</span><br><span class="line">            margin-top: 50px;</span><br><span class="line">            border: 1px solid black;</span><br><span class="line">        &#125;</span><br><span class="line">        .son &#123;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: silver;</span><br><span class="line">            margin-top: 100px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;father&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;son&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>2.可以为父元素定义上内边距</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;phd99&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">      .father &#123;</span><br><span class="line">          width: 300px;</span><br><span class="line">          height: 300px;</span><br><span class="line">          background-color: aqua;</span><br><span class="line">          margin-top: 50px;</span><br><span class="line">          padding: 2px;</span><br><span class="line">      &#125;</span><br><span class="line">      .son &#123;</span><br><span class="line">          width: 100px;</span><br><span class="line">          height: 100px;</span><br><span class="line">          background-color: silver;</span><br><span class="line">          margin-top: 100px;</span><br><span class="line">      &#125;</span><br><span class="line">  &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;father&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;son&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>3.可以为父元素添加<code>overflow: hidden</code>（常用）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;phd99&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">      .father &#123;</span><br><span class="line">          width: 300px;</span><br><span class="line">          height: 300px;</span><br><span class="line">          background-color: aqua;</span><br><span class="line">          margin-top: 50px;</span><br><span class="line">          overflow: hidden;</span><br><span class="line">      &#125;</span><br><span class="line">      .son &#123;</span><br><span class="line">          width: 100px;</span><br><span class="line">          height: 100px;</span><br><span class="line">          background-color: silver;</span><br><span class="line">          margin-top: 100px;</span><br><span class="line">      &#125;</span><br><span class="line">  &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;father&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;son&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="七、清除内外边距"><a href="#七、清除内外边距" class="headerlink" title="七、清除内外边距"></a>七、清除内外边距</h2><ul>
<li>网页元素很多都带有默认的内外边距，而且不同浏览器默认的值也不同。因此我们在布局前，首先要清除网页元素的内外边距</li>
<li>一般为CSS的第一行代码</li>
<li>方法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    * &#123;</span><br><span class="line">        padding: 0; &#x2F;* 清除内边距 *&#x2F;</span><br><span class="line">        margin: 0; &#x2F;* 清除外边距 *&#x2F;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure></li>
<li>注意<ul>
<li>行内元素为了照顾兼容性，尽量只设置左右的内外边距，不要设置上下的内外边距，因为很多情况下，上下的内外边距是不起效果的</li>
<li>但是转换为块级和行内块元素就都可以设置了</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>WEB开发</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS之水平居中的方法</title>
    <url>/2021/06/06/CSS%E4%B9%8B%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="一、块级盒子水平居中"><a href="#一、块级盒子水平居中" class="headerlink" title="一、块级盒子水平居中"></a>一、块级盒子水平居中</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1. 简介"></a>1.1. 简介</h3><ul>
<li>使用外边距让块级盒子水平居中</li>
</ul>
<h3 id="1-2-条件"><a href="#1-2-条件" class="headerlink" title="1.2. 条件"></a>1.2. 条件</h3><ul>
<li>需要满足两个条件<ul>
<li>盒子必须指定了宽度<code>width</code></li>
<li>盒子左右的外边距都设置为<code>auto</code></li>
</ul>
</li>
</ul>
<h3 id="1-3-常见的写法"><a href="#1-3-常见的写法" class="headerlink" title="1.3. 常见的写法"></a>1.3. 常见的写法</h3><ul>
<li>1.<code>margin-left: auto; margin-right: auto;</code></li>
<li>2.<code>margin: auto;</code></li>
<li>3.<code>margin: 0 auto;</code>最常用</li>
</ul>
<h3 id="1-4-范例"><a href="#1-4-范例" class="headerlink" title="1.4. 范例"></a>1.4. 范例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">  width: 300px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  background-color: blue;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-5-注意"><a href="#1-5-注意" class="headerlink" title="1.5. 注意"></a>1.5. 注意</h3><ul>
<li>只能让块级元素水平居中</li>
</ul>
<h2 id="二、行内元素或行内块元素水平居中"><a href="#二、行内元素或行内块元素水平居中" class="headerlink" title="二、行内元素或行内块元素水平居中"></a>二、行内元素或行内块元素水平居中</h2><ul>
<li>给其父元素添加<code>text-align: center</code></li>
<li>范例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;phd99&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .father &#123;</span><br><span class="line">            width: 900px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            background-color: aqua;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">            text-align:center;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;father&quot;&gt;</span><br><span class="line">        &lt;!-- 行内元素 --&gt;</span><br><span class="line">        &lt;span&gt;啦啦啦&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;!-- 行内块元素 --&gt;</span><br><span class="line">        &lt;img src&#x3D;&quot;https:&#x2F;&#x2F;gcore.jsdelivr.net&#x2F;gh&#x2F;phd99&#x2F;img&#x2F;img&#x2F;css.jpg&quot; height&#x3D;&quot;200&quot; width&#x3D;&quot;300&quot;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>WEB开发</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS的三大特性</title>
    <url>/2021/06/04/CSS%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h2 id="一、层叠性"><a href="#一、层叠性" class="headerlink" title="一、层叠性"></a>一、层叠性</h2><ul>
<li>多个选择器对同一元素设置了相同的样式，那么离该元素最近的样式就会覆盖其他样式，层叠就是覆盖</li>
<li>就近原则</li>
<li>若样式不冲突，即设置的样式不同，则不会层叠</li>
<li>范例<ul>
<li>背景颜色最终显示为蓝色，宽高都为500px<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>https://www.phd99.com/<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            background-color: red;</span><br><span class="line">            width: 500px;</span><br><span class="line">            height: 500px;</span><br><span class="line">        &#125;</span><br><span class="line">        div &#123;</span><br><span class="line">            background-color: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>啦啦啦<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="二、继承性"><a href="#二、继承性" class="headerlink" title="二、继承性"></a>二、继承性</h2><ul>
<li>子标签会继承父标签的某些样式</li>
<li>会继承父标签的样式有<code>text-，font-，line-，color</code></li>
<li>行高的继承<ul>
<li><code>font: 10px/20px &#39;Microsoft YaHei&#39;</code></li>
<li>字体大小为<code>10px</code>，行高为<code>20px</code></li>
</ul>
</li>
<li>范例<ul>
<li>1.行高有单位时，<code>12px/20px</code>表示子元素的文字大小为12px，行高为20px<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>https://www.phd99.com/<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      body &#123;</span><br><span class="line">          font: 12px/20px &#x27;Microsoft YaHei&#x27;;</span><br><span class="line">      &#125;</span><br><span class="line">      div &#123;</span><br><span class="line">          font-size: 16px;</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文字大小为12px，行高为20px --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>啦啦啦<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 文字大小为16px，行高为20px --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>啦啦啦<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>2.行高没有单位时，<code>12px/1.5</code>表示子元素的文字大小为12px，行高为当前元素文字大小的1.5倍。不写单位的好处是子元素可以根据自己文字的大小自动调整行高<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>https://www.phd99.com/<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      body &#123;</span><br><span class="line">          font: 12px/1.5 &#x27;Microsoft YaHei&#x27;;</span><br><span class="line">      &#125;</span><br><span class="line">      div &#123;</span><br><span class="line">          font-size: 16px;</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文字大小为12px，行高为12*1.5=18px --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>啦啦啦<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 文字大小为16px，行高为16*1.5=24px --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>啦啦啦<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="三、优先级"><a href="#三、优先级" class="headerlink" title="三、优先级"></a>三、优先级</h2><h3 id="3-1-简介"><a href="#3-1-简介" class="headerlink" title="3.1. 简介"></a>3.1. 简介</h3><ul>
<li>当同一个元素指定多个选择器，就会有优先级的产生<ul>
<li>选择器相同，则执行层叠性</li>
<li>选择器不同，则根据选择器的权重来执行，权重越高，优先级越高</li>
</ul>
</li>
</ul>
<h3 id="3-2-选择器的权重"><a href="#3-2-选择器的权重" class="headerlink" title="3.2. 选择器的权重"></a>3.2. 选择器的权重</h3><ul>
<li>继承或<code>*</code>，权重为<code>0,0,0,0</code></li>
<li>元素选择器，权重为<code>0,0,0,1</code></li>
<li>类选择器或伪类选择器，权重为<code>0,0,1,0</code></li>
<li>ID选择器，权重为<code>0,1,0,0</code></li>
<li>行内样式style=””，权重为<code>1,0,0,0</code></li>
<li><code>!important</code>，权重为无穷大</li>
</ul>
<h3 id="3-3-优先级的等级判断"><a href="#3-3-优先级的等级判断" class="headerlink" title="3.3. 优先级的等级判断"></a>3.3. 优先级的等级判断</h3><ul>
<li>从左往右进行比较</li>
<li>例如元素选择器<code>0,0,0,1</code>和类选择器<code>0,0,1,0</code>，前两个数都是0，第三个数1&gt;0，所以类选择器的优先级高于元素选择器</li>
</ul>
<h3 id="3-4-权重的叠加"><a href="#3-4-权重的叠加" class="headerlink" title="3.4. 权重的叠加"></a>3.4. 权重的叠加</h3><ul>
<li>复合选择器会有权重叠加的问题</li>
<li>权重会进行叠加，但永远不会有进位</li>
<li>范例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 权重为：0,0,0,1 + 0,0,0,1 &#x3D; 0,0,0,2 --&gt;</span><br><span class="line">ul li&#123;</span><br><span class="line">  color: green;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 权重为：0,0,1,0 + 0,0,0,1 &#x3D; 0,0,1,1 --&gt;</span><br><span class="line">.nav li&#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 结果为红色，因为是从左往右进行比较，第三个数1&gt;0，所以为红色 --&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-5-important"><a href="#3-5-important" class="headerlink" title="3.5. !important"></a>3.5. !important</h3><ul>
<li>优先级最高</li>
<li>如何使用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    div &#123;</span><br><span class="line">        font-size: 16px!important;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-6-注意"><a href="#3-6-注意" class="headerlink" title="3.6. 注意"></a>3.6. 注意</h3><ul>
<li>继承的权重是0，如果该元素没有直接选中，不管父元素权重多高，子元素得到的权重都是0<ul>
<li>看标签执行哪个样式，先看这个标签有没有直接被选出来</li>
</ul>
</li>
<li>a链接浏览器默认制定了一个样式：蓝色、有下划线</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>WEB开发</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS的元素显示模式</title>
    <url>/2021/06/03/CSS%E7%9A%84%E5%85%83%E7%B4%A0%E6%98%BE%E7%A4%BA%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><ul>
<li>指元素以什么方式显示到页面中</li>
<li>HTML元素分为块元素和行内元素</li>
</ul>
<h2 id="二、块元素"><a href="#二、块元素" class="headerlink" title="二、块元素"></a>二、块元素</h2><ul>
<li>常见块元素：<code>&lt;h1&gt;~&lt;h6&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;div&gt;</code>、<code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;li&gt;</code></li>
<li>独占一行</li>
<li>可以设置高度、宽度、外边距、内边距</li>
<li>宽度默认和容器（父级）的宽度一样</li>
<li>是一个容器或盒子，里面可以放行内或者块级元素<ul>
<li>文字类的元素内不能放块级元素，包括<code>&lt;p&gt;</code>、<code>&lt;h1&gt;~&lt;h6&gt;</code></li>
</ul>
</li>
</ul>
<h2 id="三、行内元素（内联元素）"><a href="#三、行内元素（内联元素）" class="headerlink" title="三、行内元素（内联元素）"></a>三、行内元素（内联元素）</h2><ul>
<li>常见行内元素：<code>&lt;a&gt;</code>、<code>&lt;strong&gt;</code>、<code>&lt;b&gt;</code>、<code>&lt;em&gt;</code>、<code>&lt;i&gt;</code>、<code>&lt;del&gt;</code>、<code>&lt;s&gt;</code>、<code>&lt;ins&gt;</code>、<code>&lt;u&gt;</code>、<code>&lt;span&gt;</code></li>
<li>一行可以显示多个行内元素</li>
<li>直接设置宽高是无效的</li>
<li>默认宽度就是其内容本身的宽度</li>
<li>行内元素中只能放文本或其他行内元素</li>
<li>链接中不能再放链接</li>
<li>链接<code>&lt;a&gt;</code>中可以放块级元素，前提是将<code>&lt;a&gt;</code>转换成块级元素<ul>
<li>如何将<code>&lt;a&gt;</code>转换成块级元素</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">a &#123;</span><br><span class="line">  display: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="四、行内块元素"><a href="#四、行内块元素" class="headerlink" title="四、行内块元素"></a>四、行内块元素</h2><ul>
<li>常见行内块元素：<code>&lt;img/&gt;</code>、<code>&lt;input&gt;</code>、<code>&lt;td&gt;</code></li>
<li>一行可以显示多个行内块元素，元素之间有空白缝隙</li>
<li>默认宽度是其内容本身的宽度</li>
<li>可以设置高度、宽度、外边距、内边距</li>
</ul>
<h2 id="五、元素转换"><a href="#五、元素转换" class="headerlink" title="五、元素转换"></a>五、元素转换</h2><ul>
<li>元素之间可以进行相互转换</li>
<li>使用<code>display</code>，<code>display</code>属性可以使得元素在行内元素和块元素之间相互转换</li>
<li>格式: <code>选择器&#123;display:属性值;&#125;</code></li>
<li>常用的属性值<ul>
<li><code>block</code>: 此元素将显示为块元素(块元素默认的<code>display</code>属性值)</li>
<li><code>inline</code>: 此元素将显示为行内元素(行内元素默认的<code>display</code>属性值)</li>
<li><code>none</code>: 此元素将被隐藏，不显示，也不占用页面空间</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>WEB开发</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS的引入方式</title>
    <url>/2021/06/03/CSS%E7%9A%84%E5%BC%95%E5%85%A5%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="CSS的引入方式"><a href="#CSS的引入方式" class="headerlink" title="CSS的引入方式"></a>CSS的引入方式</h1><hr>
<ul>
<li>在<code>HTML</code>中如何引入<code>CSS</code>样式</li>
</ul>
<h2 id="一、内部样式表（嵌入式引入）"><a href="#一、内部样式表（嵌入式引入）" class="headerlink" title="一、内部样式表（嵌入式引入）"></a>一、内部样式表（嵌入式引入）</h2><ul>
<li>简介<ul>
<li>当某些样式在页面中被多个标签重复使用，为了编码更加灵活，避免书写重复代码。我们将样式代码从标签<code>style</code>属性中抽取出来，统一写入到<code>style</code>标签中</li>
<li>将所有<code>CSS</code>代码单独放到一个<code>&lt;style&gt;</code>标签中</li>
<li>只能影响一个页面中的一个标签中的一个</li>
</ul>
</li>
<li>适用环境<ul>
<li>适合页面中进行样式复用</li>
</ul>
</li>
<li>格式<ul>
<li><code>&lt;style&gt;CSS样式代码&lt;/style&gt;</code></li>
</ul>
</li>
<li>范例  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        span &#123;</span><br><span class="line">            font-size: 100px;</span><br><span class="line">            color: aqua;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>2021-10-19 11:12:04<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>2021-10-19 11:12:11<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="二、行内样式表"><a href="#二、行内样式表" class="headerlink" title="二、行内样式表"></a>二、行内样式表</h2><ul>
<li>简介<ul>
<li>在元素标签内部的<code>style</code>属性中设<code>置CSS</code>样式</li>
<li>只能影响一个页面</li>
</ul>
</li>
<li>适用环境<ul>
<li>更加针对性的修改某个标签的样式</li>
<li>适合于修改样式比较少的情况下</li>
</ul>
</li>
<li>格式<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> 标签 <span class="attr">style</span>=<span class="string">&quot;CSS样式代码&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red; font-size: 10px;&quot;</span>&gt;</span>考个卵的研究生<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="三、外部样式表"><a href="#三、外部样式表" class="headerlink" title="三、外部样式表"></a>三、外部样式表</h2><ul>
<li>简介<ul>
<li><code>&lt;link&gt;</code>又称为链入式，是将所有的样式放在一个或多个以<code>.css</code>为扩展名的外部样式表文件中，通过<code>&lt;link&gt;</code>标签将样式连接到HTML文档中</li>
<li>常用的<code>CSS</code>引入方式</li>
<li>可以影响多个页面</li>
</ul>
</li>
<li>适用环境<ul>
<li>适合不同页面进行样式复用</li>
</ul>
</li>
<li>用法<ul>
<li>将样式单独写到<code>CSS</code>文件中，然后将<code>CSS</code>文件引入到<code>HTML</code>中</li>
<li>在<code>HTML</code>中使用<code>&lt;link&gt;</code>标签引入<code>CSS</code>文件</li>
</ul>
</li>
<li>格式<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css文件路径&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>rel=&quot;stylesheet&quot;</code>：定义当前文件与被链接文件之间的关系，<code>stylesheet</code>表示被链接的文件是一个样式表文件。固定值，表示样式表</li>
<li><code>type=&quot;text/css&quot;</code>：固定值，表示css类型</li>
<li><code>href</code>：表示css文件位置，就是被链接的文件的路径，相对路径和绝对路径都可以</li>
</ul>
</li>
<li>范例<ul>
<li><code>html</code>文件<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;test_css.css&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span>&gt;</span>2021-10-19 11:27:11<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><code>style.css</code>文件<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>: aqua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>WEB开发</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS的选择器</title>
    <url>/2021/06/02/CSS%E7%9A%84%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    <content><![CDATA[<h2 id="一、选择器"><a href="#一、选择器" class="headerlink" title="一、选择器"></a>一、选择器</h2><ul>
<li>选择器就是根据不同的需求把想要的标签选出来，进行样式的设置</li>
<li>选择器按类型可以分为基础选择器和复合选择器</li>
<li>格式：<code>选择器&#123;属性1:xxx;属性2:xxx&#125;</code></li>
</ul>
<h2 id="二、基础选择器"><a href="#二、基础选择器" class="headerlink" title="二、基础选择器"></a>二、基础选择器</h2><ul>
<li>基础选择器包括<ul>
<li>标签选择器</li>
<li>类选择器</li>
<li>id选择器</li>
<li>通配符选择器</li>
</ul>
</li>
</ul>
<h3 id="2-1-标签选择器"><a href="#2-1-标签选择器" class="headerlink" title="2.1. 标签选择器"></a>2.1. 标签选择器</h3><ul>
<li>标签选择器是指用HTML标签名称作为选择器，为页面中某一类标签指定统一的CSS样式</li>
<li>能为页面中同类型的标签统一设置样式</li>
<li>只能选择全部的当前标签，不能单独设置某一个标签的样式</li>
<li>格式: <code>标签名&#123;/*CSS样式代码*/&#125;</code></li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  p &#123;</span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-2-类选择器"><a href="#2-2-类选择器" class="headerlink" title="2.2. 类选择器"></a>2.2. 类选择器</h3><ul>
<li>每个HTML标签都有一个<code>class</code>属性，<code>class</code>属性值即为类名</li>
<li>类选择器: 即以HTML的类名(class属性值)作为选择器名称</li>
<li>作用: 选择CSS样式代码作用于对应类名的HTML标签上</li>
<li>格式: <code>.类名&#123;/*CSS样式代码*/&#125;</code></li>
<li>适用范围: 适用于将样式一次作用在相同类名的标签上</li>
<li>可以单独选择一个或者某几个标签</li>
<li>开发中最常用</li>
<li>可以给标签设置多个类名，类名之间用空格隔开</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.red</span> &#123;</span></span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.wusuowei</span> &#123;</span></span><br><span class="line">    background-color: blue;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&#x27;red wusuowei&#x27;</span>&gt;</span> 红色 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-3-id选择器"><a href="#2-3-id选择器" class="headerlink" title="2.3. id选择器"></a>2.3. id选择器</h3><ul>
<li>每个HTML标签都有一个<code>id</code>属性，<code>id</code>的属性值必须在本页面是唯一的</li>
<li>id选择器: 即以HTML的<code>id</code>(<code>id</code>属性值)作为选择器名称</li>
<li>作用: 选择<code>CSS</code>样式代码作用于某个规定<code>id</code>值的HTML标签上</li>
<li>格式: <code>#id值&#123;/*CSS样式代码*/&#125;</code><ul>
<li>以<code>#</code>开头</li>
</ul>
</li>
<li>适用范围: 适用于将样式作用在某个标签上。(更具针对性)</li>
<li>只能调用一次</li>
<li>是唯一的，不能再有相同的<code>id</code>，只有一个</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#zhangsan</span> &#123;</span></span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&#x27;zhangsan&#x27;</span>&gt;</span> 红色 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-4-通配符选择器"><a href="#2-4-通配符选择器" class="headerlink" title="2.4. 通配符选择器"></a>2.4. 通配符选择器</h3><ul>
<li>使用<code>*</code>定义</li>
<li>修改页面中所有标签的样式</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  * &#123;</span><br><span class="line">      color: black;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="三、复合选择器"><a href="#三、复合选择器" class="headerlink" title="三、复合选择器"></a>三、复合选择器</h2><h3 id="3-1-简介"><a href="#3-1-简介" class="headerlink" title="3.1. 简介"></a>3.1. 简介</h3><ul>
<li>复合选择器是基本选择器进行组合形成的</li>
<li>复合选择器包括<ul>
<li>后代选择器</li>
<li>子选择器</li>
<li>并集选择器</li>
<li>伪类选择器</li>
</ul>
</li>
</ul>
<h3 id="3-2-后代选择器（包含选择器）"><a href="#3-2-后代选择器（包含选择器）" class="headerlink" title="3.2. 后代选择器（包含选择器）"></a>3.2. 后代选择器（包含选择器）</h3><ul>
<li>用来选择父元素中的子元素，包含孙子、重孙子中的该标签</li>
<li>语法：<code>元素1 元素2 元素3 &#123;样式&#125;</code><ul>
<li>表示给元素1中的元素2中的元素3设置样式，即最终选择的是元素3</li>
<li>把外层标签写在前面，内层标签写在后面，中间用空格分隔</li>
</ul>
</li>
<li>若当前选择的子元素的子元素中也有该标签，则也会被影响</li>
<li>范例<ul>
<li>将<code>ul</code>下面的所有的<code>p</code>标签中的内容设置为红色<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>https://www.phd99.com/<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        ul p &#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我被影响了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>我也被影响了<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- 也变成了红色 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="3-3-子选择器（子元素选择器）"><a href="#3-3-子选择器（子元素选择器）" class="headerlink" title="3.3. 子选择器（子元素选择器）"></a>3.3. 子选择器（子元素选择器）</h3><ul>
<li>只能选择距离元素最近的一级子元素，即只能选择儿子，不包含孙子及后面的</li>
<li>语法：<code>元素1&gt;元素2&gt;元素3 &#123;样式&#125;</code><ul>
<li>表示给元素1中的元素2中的元素3设置样式，即最终选择的是元素3</li>
<li>元素1是父级，元素2是子级，元素1和元素2之间用<code>&gt;</code>隔开</li>
</ul>
</li>
<li>若当前选择的子元素的子元素中也有该标签，则不会被影响</li>
<li>范例<ul>
<li>只将<code>ul</code>标签的下一级子元素中的所有的<code>p</code>标签中的内容设置为红色<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>https://www.phd99.com/<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        ul&gt;p &#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我被影响了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我被影响了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>我没有被影响<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="3-4-并集选择器"><a href="#3-4-并集选择器" class="headerlink" title="3.4. 并集选择器"></a>3.4. 并集选择器</h3><ul>
<li>可以同时给多组不同的标签设置相同的样式</li>
<li>语法：<code>元素1,元素2,元素3 &#123;样式&#125;</code><ul>
<li>表示给元素1和元素2设置相同的样式</li>
<li>元素之间用<code>,</code>隔开</li>
</ul>
</li>
<li>范例<ul>
<li>将<code>ul</code>标签的下一级子元素中的所有的<code>p</code>标签和<code>ol</code>标签中的所有内容设置为红色<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>https://www.phd99.com/<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        ul&gt;p,ol &#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我被影响了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我被影响了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>我没有被影响<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我被影响了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我被影响了<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="3-5-伪类选择器"><a href="#3-5-伪类选择器" class="headerlink" title="3.5. 伪类选择器"></a>3.5. 伪类选择器</h3><ul>
<li>用于给选择器添加特殊的效果，例如鼠标经过时颜色改变</li>
<li>用<code>:</code>表示</li>
</ul>
<h4 id="3-5-1-链接伪类选择器"><a href="#3-5-1-链接伪类选择器" class="headerlink" title="3.5.1. 链接伪类选择器"></a>3.5.1. 链接伪类选择器</h4><ul>
<li><code>a:link</code>选择所有未被访问的链接</li>
<li><code>a:visited</code>选择所有已被访问的链接</li>
<li><code>a:hover</code>选择鼠标指针位于其上的链接</li>
<li><code>a:active</code>选择活动链接，就是鼠标按下且未弹起的链接</li>
<li>为了确保生效，应按照固定的顺序声明<code>LVHA</code><ul>
<li>1.<code>link</code></li>
<li>2.<code>visited</code></li>
<li>3.<code>hover</code></li>
<li>4.<code>active</code></li>
</ul>
</li>
<li><code>&lt;a&gt;</code>链接标签具有默认的样式，在设置样式时，需要单独进行设置</li>
<li>范例<ul>
<li>将未被访问的链接的字体颜色设置为黑色并去掉下划线</li>
<li>将已经被访问的链接的字体颜色设置为红色</li>
<li>将鼠标位于其上的链接的字体颜色设置为黄色</li>
<li>将鼠标按下且未弹起的链接的字体颜色设置为蓝色<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>https://www.phd99.com/<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span></span><br><span class="line">            color: black;</span><br><span class="line"><span class="css">            <span class="selector-tag">text-decoration</span>: <span class="selector-tag">none</span>; <span class="comment">/*去掉链接的下划线*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span></span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">            color: yellow;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line">            color: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.phd99.com/&quot;</span>&gt;</span>phd99<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h4 id="3-5-2-focus伪类选择器"><a href="#3-5-2-focus伪类选择器" class="headerlink" title="3.5.2. :focus伪类选择器"></a>3.5.2. <code>:focus</code>伪类选择器</h4><ul>
<li><code>:focus</code>伪类选择器用于选取获得焦点的表单元素，焦点就是光标</li>
<li>一般只有<code>&lt;input&gt;</code>类表单元素才能获取焦点，所以该选择器主要用于表单元素</li>
<li>范例<ul>
<li>将获得焦点的表单元素的背景颜色设置为红色<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>https://www.phd99.com/<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span></span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>WEB开发</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS的相关属性</title>
    <url>/2021/06/02/CSS%E7%9A%84%E7%9B%B8%E5%85%B3%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<h2 id="一、字体属性"><a href="#一、字体属性" class="headerlink" title="一、字体属性"></a>一、字体属性</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1. 简介"></a>1.1. 简介</h3><ul>
<li>字体的属性<ul>
<li>风格</li>
<li>大小</li>
<li>粗细</li>
<li>样式</li>
</ul>
</li>
<li>也可以写成复合属性</li>
</ul>
<h3 id="1-2-字体风格"><a href="#1-2-字体风格" class="headerlink" title="1.2. 字体风格"></a>1.2. 字体风格</h3><ul>
<li>用<code>font-family</code>定义字体风格</li>
<li>可以同时设置多个字体，先查询前面的字体，若前面的字体不存在，则查询后面的字体，若都不存在，则使用浏览器的默认字体。</li>
<li>字体之间用英文逗号隔开</li>
<li>可以用英文也可以用中文</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">p &#123;</span><br><span class="line">  font-family: &#x27;Microsoft Yahei&#x27;, Arial, &#x27;微软雅黑&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-3-字体大小"><a href="#1-3-字体大小" class="headerlink" title="1.3. 字体大小"></a>1.3. 字体大小</h3><ul>
<li>用<code>font-family</code>定义字体大小</li>
<li>常用单位为px，像素</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">p &#123;</span><br><span class="line">  font-size: 20px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-4-字体粗细"><a href="#1-4-字体粗细" class="headerlink" title="1.4. 字体粗细"></a>1.4. 字体粗细</h3><ul>
<li>用<code>font-weight</code>定义字体粗细</li>
<li><code>normal</code>==400（正常），<code>bold</code>==700（加粗）</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">p &#123;</span><br><span class="line">  font-weight: 700;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-5-字体样式"><a href="#1-5-字体样式" class="headerlink" title="1.5. 字体样式"></a>1.5. 字体样式</h3><ul>
<li>用<code>font-style</code>定义字体样式</li>
<li><code>normal</code>正常值</li>
<li><code>italic</code>斜体</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">p &#123;</span><br><span class="line">  font-style: italic;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-6-复合属性"><a href="#1-6-复合属性" class="headerlink" title="1.6. 复合属性"></a>1.6. 复合属性</h3><ul>
<li>用<code>font</code>定义复合属性</li>
<li>可以将字体属性按固定的顺序写在一起</li>
<li>按样式<code>style</code>、粗细<code>weight</code>、大小<code>size</code>、风格<code>family</code>的顺序设置，各个属性之间以空格隔开</li>
<li>不需要设置的属性可以省略，大小和风格一定不能省略</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">p &#123;</span><br><span class="line">  font: italic 400 20px &#x27;Microsoft yahei&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="二、文本属性"><a href="#二、文本属性" class="headerlink" title="二、文本属性"></a>二、文本属性</h2><h3 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1. 简介"></a>2.1. 简介</h3><ul>
<li>文本的属性<ul>
<li>颜色</li>
</ul>
</li>
</ul>
<h3 id="2-2-颜色"><a href="#2-2-颜色" class="headerlink" title="2.2. 颜色"></a>2.2. 颜色</h3><ul>
<li>用<code>color</code>定义文本颜色</li>
<li>开发中常用十六进制的属性值来设置颜色</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">p &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-3-对齐"><a href="#2-3-对齐" class="headerlink" title="2.3. 对齐"></a>2.3. 对齐</h3><ul>
<li><code>text-align</code>属性用于设置元素内文本内容的水平对齐方式</li>
<li>默认为左对齐<code>left</code></li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">p &#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-4-装饰"><a href="#2-4-装饰" class="headerlink" title="2.4. 装饰"></a>2.4. 装饰</h3><ul>
<li><code>text-decoration</code>属性可以给文本添加下划线<code>underline</code>、删除线<code>overline</code>、上划线<code>line-through</code></li>
<li><code>none</code>默认值，没有装饰，链接自带下划线，可以设置成<code>none</code>来去掉下划线</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">p &#123;</span><br><span class="line">  text-decoration: underline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-5-缩进"><a href="#2-5-缩进" class="headerlink" title="2.5. 缩进"></a>2.5. 缩进</h3><ul>
<li><code>text-indent</code>属性用于指定文本第一行的缩进</li>
<li><code>em</code>表示缩进1个文字大小的单位</li>
<li><code>px</code>像素单位</li>
<li>该属性值可以为负值</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">p &#123;</span><br><span class="line">  text-indent: 2em;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-6-行间距"><a href="#2-6-行间距" class="headerlink" title="2.6. 行间距"></a>2.6. 行间距</h3><ul>
<li><code>line-height</code>属性用于设置行间的距离</li>
<li>行间距=上间距+文本高度+下间距</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">p &#123;</span><br><span class="line">  line-height: 10px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="三、背景属性"><a href="#三、背景属性" class="headerlink" title="三、背景属性"></a>三、背景属性</h2><h3 id="3-1-简介"><a href="#3-1-简介" class="headerlink" title="3.1. 简介"></a>3.1. 简介</h3><ul>
<li>背景属性可以给页面元素添加背景样式</li>
<li>背景属性可以设置<ul>
<li>背景颜色</li>
<li>背景图片</li>
<li>背景平铺</li>
<li>背景图片位置</li>
<li>背景图像固定等</li>
</ul>
</li>
</ul>
<h3 id="3-2-设置背景颜色"><a href="#3-2-设置背景颜色" class="headerlink" title="3.2. 设置背景颜色"></a>3.2. 设置背景颜色</h3><ul>
<li><code>background-color</code></li>
<li>默认颜色为透明<code>transparent</code></li>
<li>语法<code>background-color: 颜色;</code></li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div &#123;</span><br><span class="line">        width: 500px;</span><br><span class="line">        height: 500px;</span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-3-背景颜色半透明"><a href="#3-3-背景颜色半透明" class="headerlink" title="3.3. 背景颜色半透明"></a>3.3. 背景颜色半透明</h3><ul>
<li>可以使背景颜色变成半透明，其他内容不受影响</li>
<li>取值范围为：0~1</li>
<li>半透明是<code>CSS3</code>新增的属性</li>
<li>语法：<code>background: rgba(0, 0, 0, 0.5)</code><ul>
<li>前三个数值用于确定颜色</li>
<li>最后一个数值用于确定透明度<code>alpha</code></li>
<li>可以将小数点前面的0省略掉，即<code>.5</code></li>
</ul>
</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div &#123;</span><br><span class="line">        width: 1000px;</span><br><span class="line">        height: 1000px;</span><br><span class="line">        background: rgba(0, 0, 0, .1);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-4-设置背景图片"><a href="#3-4-设置背景图片" class="headerlink" title="3.4. 设置背景图片"></a>3.4. 设置背景图片</h3><ul>
<li><code>background-image</code></li>
<li>常用于logo、装饰性的小图片、超大的背景图片、精灵图</li>
<li>优点是便于控制位置</li>
<li>语法<code>background-image: url(图片位置)</code></li>
<li>默认值为<code>none</code>，无背景图，<code>background-image: none</code></li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div &#123;</span><br><span class="line">        width: 500px;</span><br><span class="line">        height: 500px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-image</span>: <span class="selector-tag">url</span>(<span class="selector-tag">image</span>/1<span class="selector-class">.jpg</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-5-背景图片平铺"><a href="#3-5-背景图片平铺" class="headerlink" title="3.5. 背景图片平铺"></a>3.5. 背景图片平铺</h3><ul>
<li><code>background-repeat</code></li>
<li>对背景图片进行平铺</li>
<li>值<ul>
<li><code>repeat</code>：横向和纵向都平铺（默认值）</li>
<li><code>no-repeat</code>：不平铺</li>
<li><code>repeat-x</code>：横向平铺</li>
<li><code>repeat-y</code>：纵向平铺</li>
</ul>
</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div &#123;</span><br><span class="line">        width: 1000px;</span><br><span class="line">        height: 1000px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-image</span>: <span class="selector-tag">url</span>(<span class="selector-tag">image</span>/1<span class="selector-class">.jpg</span>);</span></span><br><span class="line">        background-repeat: repeat-x;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-6-背景图片位置"><a href="#3-6-背景图片位置" class="headerlink" title="3.6. 背景图片位置"></a>3.6. 背景图片位置</h3><ul>
<li><code>background-position</code></li>
<li>设置背景图片的位置</li>
<li>值<ul>
<li>方位名词</li>
<li>精确单位</li>
<li>混合单位</li>
</ul>
</li>
</ul>
<h4 id="3-6-1-方位名词"><a href="#3-6-1-方位名词" class="headerlink" title="3.6.1. 方位名词"></a>3.6.1. 方位名词</h4><ul>
<li>如果设置了两个参数，则没有前后顺序</li>
<li>如果只设置了一个参数，则第二个值默认为水平居中</li>
<li>竖直方向的值可以为：<code>top</code>、<code>center</code>、<code>bottom</code></li>
<li>水平方向的值可以为：<code>left</code>、<code>center</code>、<code>right</code></li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div &#123;</span><br><span class="line">        width: 1000px;</span><br><span class="line">        height: 1000px;</span><br><span class="line">        background-color: red;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-image</span>: <span class="selector-tag">url</span>(<span class="selector-tag">image</span>/1<span class="selector-class">.jpg</span>);</span></span><br><span class="line">        background-repeat: no-repeat;</span><br><span class="line">        background-position: left center;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="3-6-2-精确单位"><a href="#3-6-2-精确单位" class="headerlink" title="3.6.2. 精确单位"></a>3.6.2. 精确单位</h4><ul>
<li>有前后顺序</li>
<li>如果设置了两个数值，则第一个值为x轴坐标， 第二个值为y轴坐标</li>
<li>如果只设置了一个数值，则该数值一定是x坐标，另一个数值默认为垂直居中</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div &#123;</span><br><span class="line">        width: 1000px;</span><br><span class="line">        height: 1000px;</span><br><span class="line">        background-color: red;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-image</span>: <span class="selector-tag">url</span>(<span class="selector-tag">image</span>/1<span class="selector-class">.jpg</span>);</span></span><br><span class="line">        background-repeat: no-repeat;</span><br><span class="line">        background-position: 100px 500px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="3-6-3-混合单位"><a href="#3-6-3-混合单位" class="headerlink" title="3.6.3. 混合单位"></a>3.6.3. 混合单位</h4><ul>
<li>有前后顺序</li>
<li>可以将精确单位和方位名词混合使用</li>
<li>第一个一定值是x轴坐标，第二个值一定是y轴坐标</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div &#123;</span><br><span class="line">        width: 1000px;</span><br><span class="line">        height: 1000px;</span><br><span class="line">        background-color: red;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-image</span>: <span class="selector-tag">url</span>(<span class="selector-tag">image</span>/1<span class="selector-class">.jpg</span>);</span></span><br><span class="line">        background-repeat: no-repeat;</span><br><span class="line">        background-position: 100px top;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-7-背景图像固定"><a href="#3-7-背景图像固定" class="headerlink" title="3.7. 背景图像固定"></a>3.7. 背景图像固定</h3><ul>
<li><code>background-attachment</code></li>
<li>可以设置背景图像是否固定或随着页面滚动</li>
<li>属性<ul>
<li><code>scroll</code>背景图像随对象内容滚动</li>
<li><code>fixed</code>背景图像固定</li>
</ul>
</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div &#123;</span><br><span class="line">        width: 1000px;</span><br><span class="line">        height: 1000px;</span><br><span class="line">        background-color: red;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-image</span>: <span class="selector-tag">url</span>(<span class="selector-tag">image</span>/1<span class="selector-class">.jpg</span>);</span></span><br><span class="line">        background-repeat: no-repeat;</span><br><span class="line">        background-attachment: fixed;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-8-背景属性复合写法"><a href="#3-8-背景属性复合写法" class="headerlink" title="3.8. 背景属性复合写法"></a>3.8. 背景属性复合写法</h3><ul>
<li>可以将关于背景的相关属性合并写在同一个<code>background</code>属性中</li>
<li>简化了代码</li>
<li>开发中常用</li>
<li>简写时，没有特定的书写顺序<ul>
<li>一般顺序为：背景颜色 图片地址 图片平铺 图片滚动 图片位置</li>
<li><code>background: transparent url(1.jpg) repeat-y fixed top;</code></li>
</ul>
</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div &#123;</span><br><span class="line">        width: 1000px;</span><br><span class="line">        height: 1000px;</span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-tag">red</span> <span class="selector-tag">url</span>(<span class="selector-tag">image</span>/1<span class="selector-class">.jpg</span>) <span class="selector-tag">no-repeat</span> <span class="selector-tag">fixed</span> 100<span class="selector-tag">px</span> <span class="selector-tag">top</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>WEB开发</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS概述</title>
    <url>/2021/05/30/CSS%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h1 id="CSS概述"><a href="#CSS概述" class="headerlink" title="CSS概述"></a>CSS概述</h1><hr>
<h2 id="一、CSS是什么？有什么作用？"><a href="#一、CSS是什么？有什么作用？" class="headerlink" title="一、CSS是什么？有什么作用？"></a>一、CSS是什么？有什么作用？</h2><h3 id="1-1-HTML、CSS关系"><a href="#1-1-HTML、CSS关系" class="headerlink" title="1.1. HTML、CSS关系"></a>1.1. <code>HTML</code>、<code>CSS</code>关系</h3><ul>
<li><code>HTML</code> —&gt; 页面结构 —&gt; 人的面部(素颜)</li>
<li><code>CSS</code> —&gt; 美化页面 —&gt; 给人化妆</li>
</ul>
<h3 id="1-2-什么是CSS"><a href="#1-2-什么是CSS" class="headerlink" title="1.2. 什么是CSS"></a>1.2. 什么是<code>CSS</code></h3><ul>
<li><code>CSS</code>通常称为<code>CSS</code>样式或层叠样式表，主要用于设置<code>HTML</code>页面中的文本内容(字体、大小、对齐方式等)、图片的外形(高宽、边框样式、边距等)以及版面的布局等外观显示样式</li>
<li><code>CSS(Cascading Style Sheets)</code>: 层叠样式表<ul>
<li>层叠: 一层一层叠加，即一个标签可以层叠多个样式</li>
<li>样式表: 存储样式的地方，多个样式</li>
</ul>
</li>
</ul>
<h3 id="1-3-CSS的作用"><a href="#1-3-CSS的作用" class="headerlink" title="1.3. CSS的作用"></a>1.3. <code>CSS</code>的作用</h3><ul>
<li><code>CSS</code>可以使<code>HTML</code>页面更好看，<code>CSS</code>色系的搭配可以让用户更舒服，<code>CSS+DIV</code>布局更加灵活，更容易绘制出用户需要的结构</li>
<li>用于修饰<code>HTML</code>页面，更丰富多彩地展示超文本信息</li>
</ul>
<h2 id="二、为什么使用CSS替代HTML属性设置样式"><a href="#二、为什么使用CSS替代HTML属性设置样式" class="headerlink" title="二、为什么使用CSS替代HTML属性设置样式"></a>二、为什么使用<code>CSS</code>替代<code>HTML</code>属性设置样式</h2><ul>
<li>因为<code>HTML</code>属性在单独使用时有一定的局限性，所以要配合<code>CSS</code>样式代码才可以显示更为丰富的效果</li>
</ul>
<h2 id="三、CSS的代码规范"><a href="#三、CSS的代码规范" class="headerlink" title="三、CSS的代码规范"></a>三、<code>CSS</code>的代码规范</h2><h3 id="3-1-放置规范"><a href="#3-1-放置规范" class="headerlink" title="3.1. 放置规范"></a>3.1. 放置规范</h3><ul>
<li>在<code>&lt;style&gt;</code>标签内容体中书写<code>CSS</code>样式代码</li>
<li><code>&lt;style&gt;</code>标签放置在<code>&lt;head&gt;</code>标签之中</li>
</ul>
<h3 id="3-2-格式规范"><a href="#3-2-格式规范" class="headerlink" title="3.2. 格式规范"></a>3.2. 格式规范</h3><ul>
<li>选择器名称{属性名1: 属性值1; 属性名2: 属性值2; ……}</li>
<li>选择器: 即指定<code>CSS</code>样式作用在哪些<code>HTML</code>标签上</li>
</ul>
<h3 id="3-3-代码规范"><a href="#3-3-代码规范" class="headerlink" title="3.3. 代码规范"></a>3.3. 代码规范</h3><ul>
<li>属性名和属性值之间是键值对关系</li>
<li>属性名和属性值之间用”:”连接，最后用”;”结尾<ul>
<li>例如: <code>font-size:120px;</code></li>
</ul>
</li>
<li>如果一个属性名有多个值，多个值之间用空格隔开<ul>
<li>例如: <code>border:5px solid red</code></li>
</ul>
</li>
<li>CSS注释:<ul>
<li><code>/*注释内容*/</code></li>
<li>等同于java的多行注释</li>
</ul>
</li>
</ul>
<h3 id="3-4-范例"><a href="#3-4-范例" class="headerlink" title="3.4. 范例"></a>3.4. 范例</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">            span &#123;</span><br><span class="line"><span class="css">                <span class="comment">/*注释*/</span></span></span><br><span class="line"><span class="css">                <span class="selector-tag">font-size</span><span class="selector-pseudo">:120px</span>;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">blue</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>宝剑锋从磨砺出<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>梅花香自苦寒来<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
        <category>WEB开发</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML知识</title>
    <url>/2021/05/30/HTML%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><h3 id="1-1-文档查阅链接"><a href="#1-1-文档查阅链接" class="headerlink" title="1.1. 文档查阅链接"></a>1.1. 文档查阅链接</h3><ul>
<li><a href="https://www.w3school.com.cn/">w3school</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/">MDN</a><a id="more"></a>


</li>
</ul>
<h3 id="1-2-HTML的语言特征"><a href="#1-2-HTML的语言特征" class="headerlink" title="1.2. HTML的语言特征"></a>1.2. HTML的语言特征</h3><ul>
<li>HTML文件的扩展名为html或者htm。Htm是老的命名规范，html是新的</li>
<li>HTML文件由浏览器直接解析执行，无需编译，直接由上到下依次解析执行</li>
<li>HTML标签通常由开始标签和结束标签组成，开始标签和结束标签之间的内容叫做内容体。例如: <code>&lt;font&gt;内容体&lt;/font&gt;</code></li>
<li>HTML中没有内容体的标签叫做空标签。仅由一个标签组成。例如: <code>&lt;br/&gt;</code>，自关闭</li>
<li>HTML标签不区分大小写，为了方便阅读，建议使用小写</li>
<li>HTML标签是有属性的，格式为: 属性名=”属性值”，属性值用引号引起。引号包含单引号和双引号</li>
<li>HTML标签建议包裹嵌套，不建议交叉嵌套</li>
</ul>
<h3 id="1-3-HTML代码组成"><a href="#1-3-HTML代码组成" class="headerlink" title="1.3. HTML代码组成"></a>1.3. HTML代码组成</h3><ul>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">            网页标题</span><br><span class="line">        <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        页面内容，需要展示给用户看的信息内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><code>&lt;html&gt;</code><ul>
<li>根标签，所有html语言都在其内部<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><code>&lt;head&gt;</code><ul>
<li>网页头部</li>
<li>在头部中一定要设置标题<code>title</code><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><code>&lt;title&gt;</code><ul>
<li>网页标题</li>
<li>当前网页的名字<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><code>&lt;body&gt;</code><ul>
<li>网页主体</li>
<li>页面中的内容都在主体中<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><code>&lt;!DOCTYPE&gt;</code><ul>
<li>文档类型声明标签</li>
<li>告诉浏览器使用哪个版本的<code>HTML</code>来显示网页</li>
<li>使用<code>HTML5</code>版本来显示网页<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><code>lang</code><ul>
<li>定义当前文档显示的语言</li>
<li>若需要使用浏览器翻译当前网页，则需要用到</li>
<li><code>en</code>为英语</li>
<li><code>zh-CN</code>为中文<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><code>charset</code><ul>
<li>规定<code>HTML</code>文档使用的字符编码</li>
<li><code>UTF-8</code>为万国码，基本包含了所有国家的字符</li>
<li>若不设置编码格式，可能会出现乱码</li>
<li>写在<code>title</code>标签中<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="二、HTML的基本标签"><a href="#二、HTML的基本标签" class="headerlink" title="二、HTML的基本标签"></a>二、HTML的基本标签</h2><h3 id="2-1-字体标签"><a href="#2-1-字体标签" class="headerlink" title="2.1. 字体标签"></a>2.1. 字体标签</h3><h4 id="2-1-1-lt-font-gt"><a href="#2-1-1-lt-font-gt" class="headerlink" title="2.1.1. &lt;font&gt;"></a>2.1.1. <code>&lt;font&gt;</code></h4><ul>
<li>字体标签，用于展示效果中修饰文字样式</li>
<li>&lt;font 属性名=”属性值”&gt;文字</font><ul>
<li><code>size</code>: 控制字体大小，最小为1，最大为7，如果设置范围不在1~7之间，设置无效</li>
<li><code>color</code>: 控制字体颜色，使用英文设置(例如: red, blue, ……)</li>
<li><code>face</code>: 控制字体类型，只能设置系统字库中存在的字体类型</li>
</ul>
</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      宝剑锋从磨砺出，<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span> <span class="attr">size</span>=<span class="string">&quot;7&quot;</span> <span class="attr">face</span>=<span class="string">&quot;楷体&quot;</span>&gt;</span>梅花香自苦寒来<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="2-1-2-加粗标签"><a href="#2-1-2-加粗标签" class="headerlink" title="2.1.2. 加粗标签"></a>2.1.2. 加粗标签</h4><ul>
<li>将文字加粗</li>
<li>可以使用<code>&lt;strong&gt;</code>或<code>&lt;b&gt;</code></li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="2-1-3-倾斜标签"><a href="#2-1-3-倾斜标签" class="headerlink" title="2.1.3. 倾斜标签"></a>2.1.3. 倾斜标签</h4><ul>
<li>将文字倾斜</li>
<li>可以使用<code>&lt;em&gt;</code>或<code>&lt;i&gt;</code></li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>倾斜<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>倾斜<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="2-1-4-删除线标签"><a href="#2-1-4-删除线标签" class="headerlink" title="2.1.4. 删除线标签"></a>2.1.4. 删除线标签</h4><ul>
<li>文字中间有一条线</li>
<li>可以使用<code>&lt;del&gt;</code>或<code>&lt;s&gt;</code></li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">s</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="2-1-5-下划线标签"><a href="#2-1-5-下划线标签" class="headerlink" title="2.1.5. 下划线标签"></a>2.1.5. 下划线标签</h4><ul>
<li>文字下面有一条线</li>
<li>可以使用<code>&lt;ins&gt;</code>或<code>&lt;u&gt;</code></li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-2-格式化标签"><a href="#2-2-格式化标签" class="headerlink" title="2.2. 格式化标签"></a>2.2. 格式化标签</h3><h4 id="2-2-1-lt-br-gt"><a href="#2-2-1-lt-br-gt" class="headerlink" title="2.2.1. &lt;br/&gt;"></a>2.2.1. <code>&lt;br/&gt;</code></h4><ul>
<li>浏览器解析时会自动忽略HTML源码中的换行</li>
<li>换行标签，用于在展示效果中换行</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">宝剑锋从磨砺出<span class="tag">&lt;<span class="name">br</span>/&gt;</span>梅花香自苦寒来</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="2-2-2-lt-p-gt-lt-p-gt"><a href="#2-2-2-lt-p-gt-lt-p-gt" class="headerlink" title="2.2.2. &lt;p&gt;&lt;/p&gt;"></a>2.2.2. <code>&lt;p&gt;&lt;/p&gt;</code></h4><ul>
<li>段落标签，用于在展示效果中划分段落，将文字分段，并且在段前和段后自动加空行</li>
<li>段落之间有间距</li>
<li>属性<ul>
<li><code>align</code>: 段落内容的对齐方式<ul>
<li>默认是<code>left</code>，内容居左</li>
<li><code>right</code> 右</li>
<li><code>center</code> 居中</li>
</ul>
</li>
</ul>
</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        这是一段文字，用于测试居中</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">&quot;left&quot;</span>&gt;</span></span><br><span class="line">        这是一段文字，用于测试居左</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">        这是一段文字，用于测试居右</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="2-2-3-lt-h1-gt-lt-h1-gt"><a href="#2-2-3-lt-h1-gt-lt-h1-gt" class="headerlink" title="2.2.3. &lt;h1&gt;&lt;/h1&gt;"></a>2.2.3. <code>&lt;h1&gt;&lt;/h1&gt;</code></h4><ul>
<li>标题标签，用于在展示效果中划分标题</li>
<li>其中<code>&lt;h1&gt;</code>最大，<code>&lt;h6&gt;</code>最小</li>
<li>一个标题单独占一行</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">···</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="2-2-4-amp-nbsp"><a href="#2-2-4-amp-nbsp" class="headerlink" title="2.2.4. &amp;nbsp;"></a>2.2.4. <code>&amp;nbsp;</code></h4><ul>
<li>HTML源码中的多个空格，在最终效果中会合并成一个。</li>
<li>空格符号，用于在展示效果中显示一个空白的位置。</li>
</ul>
<h4 id="2-2-5-HTML注释"><a href="#2-2-5-HTML注释" class="headerlink" title="2.2.5. HTML注释"></a>2.2.5. HTML注释</h4><ul>
<li>用于注释HTML源码，不在HTML效果中展示</li>
<li>只能在源码中看到，页面展示效果中是没有的</li>
<li>生成注释的快捷键<code>ctrl + /</code></li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是一个注释 --&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-3-图片标签"><a href="#2-3-图片标签" class="headerlink" title="2.3. 图片标签"></a>2.3. 图片标签</h3><h4 id="2-3-1-lt-img-gt"><a href="#2-3-1-lt-img-gt" class="headerlink" title="2.3.1. &lt;img/&gt;"></a>2.3.1. <code>&lt;img/&gt;</code></h4><ul>
<li>用于在页面效果中展示一张图片</li>
<li>属性<ul>
<li><code>src</code><ul>
<li>指明图片的路径(必有属性)</li>
<li>图片路径的写法<ul>
<li>内网路径<ul>
<li>绝对路径<ul>
<li>文件在硬盘上的具体位置，不建议使用</li>
<li>例如: <code>C:\javaweb\img\1.jpg</code></li>
</ul>
</li>
<li>相对路径<ul>
<li>从引入者所在目录出发，建议使用相对路径</li>
<li>例如: <code>../img/1.jpg</code></li>
<li><code>../</code>表示上一层的目录</li>
<li><code>./</code>表示当前目录</li>
</ul>
</li>
</ul>
</li>
<li>外网路径<ul>
<li>必须前面加上 <code>http://</code></li>
<li>例如: <code>http://www.baidu.com/xxx.jpg</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><code>alt</code><ul>
<li>若图像不能显示时，显示的文字</li>
</ul>
</li>
<li><code>title</code><ul>
<li>鼠标放到图片上时，显示的文字</li>
</ul>
</li>
<li><code>width</code>: 图片宽度</li>
<li><code>height</code>: 图片的宽度<ul>
<li>宽度和高度的设置<ul>
<li>默认单位是px，像素<ul>
<li>固定的设置方式</li>
<li>例如: <code>width=&quot;400&quot;</code> 其实设置的是 <code>width=&quot;400px&quot;</code></li>
</ul>
</li>
<li>百分比设置<ul>
<li>动态改变的</li>
<li>例如: <code>width=&quot;50%&quot;</code>，是父标签的百分比</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><code>border</code><ul>
<li>图像边框的粗细</li>
<li>边框一般通过CSS进行修改</li>
</ul>
</li>
</ul>
</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./image/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;替换文本&quot;</span> <span class="attr">title</span>=<span class="string">&quot;提示文本&quot;</span> <span class="attr">width</span>=<span class="string">&quot;250&quot;</span> <span class="attr">height</span>=<span class="string">&quot;250&quot;</span> <span class="attr">border</span>=<span class="string">&quot;3&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-4-列表标签"><a href="#2-4-列表标签" class="headerlink" title="2.4. 列表标签"></a>2.4. 列表标签</h3><h4 id="2-4-1-无序列表"><a href="#2-4-1-无序列表" class="headerlink" title="2.4.1. 无序列表"></a>2.4.1. 无序列表</h4><ul>
<li>无序列表标签，用于在效果中定义一个无序列表</li>
<li>用<code>&lt;ul&gt;</code>表示无序列表，<code>&lt;ul&gt;</code>标签中只能有<code>&lt;li&gt;</code>标签</li>
<li>用<code>&lt;li&gt;</code>表示列表中的一项，<code>&lt;li&gt;</code>标签中放其他标签</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>ddd<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>代码执行结果<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">· ccc</span><br><span class="line">· bbb</span><br><span class="line">· ddd</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h4 id="2-4-2-有序列表"><a href="#2-4-2-有序列表" class="headerlink" title="2.4.2. 有序列表"></a>2.4.2. 有序列表</h4><ul>
<li>有序列表标签，用于在效果中定义一个有序列表</li>
<li>用<code>&lt;ol&gt;</code>表示有序列表，<code>&lt;ol&gt;</code>标签中只能有<code>&lt;li&gt;</code>标签</li>
<li>用<code>&lt;li&gt;</code>表示列表中的一项</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>ddd<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>代码执行结果<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. ccc</span><br><span class="line">2. bbb</span><br><span class="line">3. ddd</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h4 id="2-4-3-自定义列表"><a href="#2-4-3-自定义列表" class="headerlink" title="2.4.3. 自定义列表"></a>2.4.3. 自定义列表</h4><ul>
<li>对列表中的信息有一个整体的描述</li>
<li>用<code>&lt;dl&gt;</code>表示自定义列表，<code>&lt;dl&gt;</code>标签中只能有<code>&lt;dt&gt;</code>和<code>&lt;dd&gt;</code>标签</li>
<li>用<code>&lt;dt&gt;</code>表示最上面的描述标题</li>
<li>用<code>&lt;dd&gt;</code>表示描述标题下面的每一个小标题</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>服务支持<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>售后政策<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>自助服务<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>相关下载<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="2-5-超链接标签"><a href="#2-5-超链接标签" class="headerlink" title="2.5. 超链接标签"></a>2.5. 超链接标签</h3><h4 id="2-5-1-lt-a-gt-lt-a-gt"><a href="#2-5-1-lt-a-gt-lt-a-gt" class="headerlink" title="2.5.1. &lt;a&gt;&lt;/a&gt;"></a>2.5.1. <code>&lt;a&gt;&lt;/a&gt;</code></h4><ul>
<li>超链接标签用于在效果中定义一个可以点击跳转的链接</li>
<li>属性<ul>
<li>href: 超链接跳转的路径(必有属性)<ul>
<li>当值为<code>#</code>时，为空链接，为空时，默认跳转到本页</li>
<li>内网本机路径: 相对路径和绝对路径</li>
<li>互联网路径: <code>http://地址</code></li>
</ul>
</li>
<li><code>target</code>指定如何打开跳转页面<ul>
<li><code>_self</code>在当前窗口打开，默认</li>
<li><code>_blank</code>在新窗口中打开</li>
</ul>
</li>
</ul>
</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.phd99.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_parent&quot;</span>&gt;</span>新页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>超链接正常执行需要满足的条件<ul>
<li><ol>
<li>a标签中必须有内容</li>
</ol>
</li>
<li><ol start="2">
<li>a标签必须有href属性</li>
</ol>
</li>
</ul>
</li>
<li>注意<ul>
<li>a标签内容体，不仅仅是文字，也可以是其他内容，例如图片</li>
<li>a标签的<code>href</code>属性，不仅仅可以链接到html上，也可以链接到其他文件上，例如图片</li>
</ul>
</li>
<li>锚点链接<ul>
<li>点击时可以直接定位到页面中的某个位置</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#phd&quot;</span>&gt;</span>跳转到id属性值为phd的标签处<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="2-6-表格标签"><a href="#2-6-表格标签" class="headerlink" title="2.6. 表格标签"></a>2.6. 表格标签</h3><h4 id="2-6-1-lt-table-gt-lt-table-gt"><a href="#2-6-1-lt-table-gt-lt-table-gt" class="headerlink" title="2.6.1. &lt;table&gt;&lt;/table&gt;"></a>2.6.1. <code>&lt;table&gt;&lt;/table&gt;</code></h4><ul>
<li>表格标签，用于在效果中定义一个表格<ul>
<li><code>border</code>： 设置表格的边框粗细</li>
<li><code>width</code>： 设置表格的宽度</li>
</ul>
</li>
</ul>
<h4 id="2-6-2-lt-tr-gt-lt-tr-gt"><a href="#2-6-2-lt-tr-gt-lt-tr-gt" class="headerlink" title="2.6.2. &lt;tr&gt;&lt;/tr&gt;"></a>2.6.2. <code>&lt;tr&gt;&lt;/tr&gt;</code></h4><ul>
<li>表格的行标签，用于在效果中定义一个表格行</li>
</ul>
<h4 id="2-6-3-lt-th-gt-lt-th-gt"><a href="#2-6-3-lt-th-gt-lt-th-gt" class="headerlink" title="2.6.3. &lt;th&gt;&lt;/th&gt;"></a>2.6.3. <code>&lt;th&gt;&lt;/th&gt;</code></h4><ul>
<li>表格的表头单元格标签，用于在效果中定义一个表格行中的表头单元格</li>
<li><code>&lt;th&gt;</code> 和 <code>&lt;td&gt;</code> 的唯一区别：<code>&lt;th&gt;</code> 的内容会居中并加粗</li>
<li>属性<ul>
<li><code>align</code>，对齐方式</li>
<li><code>border</code>，设置表格是否有边框</li>
<li><code>cellpadding</code>，文字和单元格边框之间的距离</li>
<li><code>cellspacing</code>，单元格之间的距离</li>
<li><code>width</code>，表格的宽度</li>
</ul>
</li>
</ul>
<h4 id="2-6-4-lt-td-gt-lt-td-gt"><a href="#2-6-4-lt-td-gt-lt-td-gt" class="headerlink" title="2.6.4. &lt;td&gt;&lt;/td&gt;"></a>2.6.4. <code>&lt;td&gt;&lt;/td&gt;</code></h4><ul>
<li>表格的单元格标签，用于在效果中定义一个表格行中的单元格</li>
<li>书写表格的步骤<ul>
<li><ol>
<li>定义一个表格 <code>&lt;table&gt;&lt;/table&gt;</code></li>
</ol>
</li>
<li><ol start="2">
<li>定义表格中的一行 <code>&lt;tr&gt;&lt;/tr&gt;</code></li>
</ol>
</li>
<li><ol start="3">
<li>在表格的一行中定义单元格 <code>&lt;td&gt;内容&lt;/td&gt;</code> 内容写在单元格中</li>
</ol>
</li>
</ul>
</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>第1行第1列<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>第1行第2列<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>第2行第1列<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>第2行第2列<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="2-6-5-表格头部标签"><a href="#2-6-5-表格头部标签" class="headerlink" title="2.6.5. 表格头部标签"></a>2.6.5. 表格头部标签</h4><ul>
<li><code>&lt;thead&gt;</code></li>
<li>表头区域，表头部分</li>
</ul>
<h4 id="2-6-5-表格主体标签"><a href="#2-6-5-表格主体标签" class="headerlink" title="2.6.5. 表格主体标签"></a>2.6.5. 表格主体标签</h4><ul>
<li><code>&lt;tbody&gt;</code></li>
<li>主体区域，表格的内容部分</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>第1行第1列<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>第1行第2列<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>第2行第1列<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>第2行第2列<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="2-6-6-单元格合并"><a href="#2-6-6-单元格合并" class="headerlink" title="2.6.6. 单元格合并"></a>2.6.6. 单元格合并</h4><ul>
<li><code>&lt;td&gt;</code> 或者 <code>&lt;th&gt;</code> 都有两个单元格合并属性<ul>
<li><code>colspan</code> : 跨列合并单元格，合并几个单元格，<code>colspan</code> 的值就是几<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span> = <span class="string">&quot;2&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      -- <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span> 值为1和2的单元格合并</span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><code>rowspan</code> : 跨行合并单元格，合并几个单元格，<code>rowspan</code> 的值就是几<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span> = <span class="string">&quot;2&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>7<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>8<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>9<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>10<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      -- <span class="tag">&lt;<span class="name">td</span>&gt;</span>11<span class="tag">&lt;/<span class="name">td</span>&gt;</span> 值为6和11的单元格合并</span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>12<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>13<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>14<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>15<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>合并步骤<ul>
<li>确定合并哪几个单元格，确定是跨列合并还是跨行合并</li>
<li>在第一个出现的单元格上书写 合并单元格属性</li>
<li>合并几个单元格，属性值就书写几个</li>
<li>被合并的单元格必须删掉</li>
</ul>
</li>
</ul>
<h3 id="2-7-块标签"><a href="#2-7-块标签" class="headerlink" title="2.7. 块标签"></a>2.7. 块标签</h3><h4 id="2-7-1-lt-span-gt-lt-span-gt"><a href="#2-7-1-lt-span-gt-lt-span-gt" class="headerlink" title="2.7.1. &lt;span&gt;&lt;/span&gt;"></a>2.7.1. <code>&lt;span&gt;&lt;/span&gt;</code></h4><ul>
<li>行级的块标签，进行内容的显示</li>
<li>用于在效果中一行上定义一个块</li>
<li>有多少内容，就会占用多大空间</li>
<li><code>span</code>不会自动换行</li>
<li>一行可以有多个<code>span</code></li>
<li>小盒子，适用于少量数据显示</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>小盒子<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="2-7-2-lt-div-gt-lt-div-gt"><a href="#2-7-2-lt-div-gt-lt-div-gt" class="headerlink" title="2.7.2. &lt;div&gt;&lt;/div&gt;"></a>2.7.2. <code>&lt;div&gt;&lt;/div&gt;</code></h4><ul>
<li>块级的块标签，进行内容的显示</li>
<li>用于在效果中定义一块</li>
<li>默认占满一行(块级)</li>
<li>会自动换行，默认占满一行</li>
<li>独占一行，一行只能有一个<code>div</code></li>
<li>大盒子，适用于大量数据显示</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>大盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-8-水平线标签"><a href="#2-8-水平线标签" class="headerlink" title="2.8. 水平线标签"></a>2.8. 水平线标签</h3><ul>
<li>在一行显示一条水平线</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="三、表单标签"><a href="#三、表单标签" class="headerlink" title="三、表单标签"></a>三、表单标签</h2><h3 id="3-1-表单标签"><a href="#3-1-表单标签" class="headerlink" title="3.1. 表单标签"></a>3.1. 表单标签</h3><h4 id="3-1-1-lt-form-gt-标签"><a href="#3-1-1-lt-form-gt-标签" class="headerlink" title="3.1.1. &lt;form&gt;标签"></a>3.1.1. <code>&lt;form&gt;</code>标签</h4><ul>
<li>用于在效果中定义一个表单，用于提交用户填写的数据，提交给服务器的程序，相当于一个WEB程序的入口</li>
<li>属性<ul>
<li><code>action</code>：将数据提交到何处，默认提交到本页</li>
<li><code>method</code>：用于设置表单数据的提交方式，默认为: <code>get</code><ul>
<li>提交方式: <code>get</code> 或者 <code>post</code></li>
<li><code>get</code>提交方式的特点: 把数据拼接到地址栏上</li>
<li><code>post</code>提交方式的特点: 没有把提交数据拼接到地址栏上。放在了请求体中</li>
<li><code>post</code>和<code>get</code>提交方式的区别<ul>
<li><code>get</code>提交的参数列表拼接到了地址栏后面；<code>post</code>方式不会拼接地址栏</li>
<li><code>get</code>方式提交的数据会使敏感信息不安全；<code>post</code>方式提交的数据相对安全</li>
<li><code>get</code>方式提交的数据量是有限的；<code>post</code>方式从理论上提交的数据量无限大</li>
<li>尽量使用<code>post</code>方式提交表单</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="3-2-输入项标签"><a href="#3-2-输入项标签" class="headerlink" title="3.2. 输入项标签"></a>3.2. 输入项标签</h3><h4 id="3-2-1-lt-input-gt-标签"><a href="#3-2-1-lt-input-gt-标签" class="headerlink" title="3.2.1. &lt;input/&gt;标签"></a>3.2.1. <code>&lt;input/&gt;</code>标签</h4><ul>
<li>表单输入项标签之一，用户可以在该标签上，通过填写和选择，进行数据的输入</li>
</ul>
<blockquote>
<p><code>type</code>属性</p>
</blockquote>
<ul>
<li>设置该标签的种类</li>
<li><code>text</code>: 文本框，定义单行的输入字段，用户可在其中输入文本，默认宽度为20个字符</li>
<li><code>image</code>定义图像形式的提交按钮</li>
<li><code>password</code>: 密码框，内容为非明文</li>
<li><code>radio</code>: 单选框<ul>
<li>要想在同一组内有单选效果，需要使用<code>name</code>，要有相同的<code>name</code>属性值</li>
<li>要想设置成默认选中状态，需要使用<code>checked</code></li>
</ul>
</li>
<li><code>checkbox</code>: 复选框<ul>
<li>在同一组内有复选效果，要有相同的<code>name</code>属性值</li>
</ul>
</li>
<li><code>submit</code>: 提交按钮，用于控制表单提交数据<ul>
<li>需要使用value，否则提交的都是<code>on</code></li>
<li>只有设置了标签对应的参数名的数据才能被提交，设置参数名需要使用<code>name</code></li>
</ul>
</li>
<li><code>reset</code>: 重置按钮，用于将表单输入项恢复到默认状态</li>
<li><code>file</code>: 附件框，用于文件上传</li>
<li><code>hidden</code>: 隐藏域，定义隐藏的输入字段，一般用作提交服务器需要拿到，但用户不需要看到的数据</li>
<li><code>button</code>: 普通按钮，需要和JS事件一起用</li>
</ul>
<blockquote>
<p><code>name</code>属性</p>
</blockquote>
<ul>
<li><code>name</code>用于指定表单的名称，以区分同一个页面中的不同表单域，单选框、复选框进行数据的分组，设置该标签对应的参数名</li>
<li>属性值相同的为一组</li>
<li>某个表单输入项需要通过参数列表提交，就必须设置name属性</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">性别: </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex1&quot;</span>/&gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex1&quot;</span>/&gt;</span>女</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex2&quot;</span>/&gt;</span>公</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex2&quot;</span>/&gt;</span>母</span><br></pre></td></tr></table></figure>


</li>
</ul>
<blockquote>
<p><code>value</code>属性</p>
</blockquote>
<ul>
<li>设置该标签对应的参数值，也可作为按钮的名字<ul>
<li>value属性的设置策略<ul>
<li>文本框、密码框这样的表单输入项，可以不强制指定<code>value</code>，因为用户可以自由输入。</li>
<li>单选框、复选框这样的表单输入框，必须强制指定<code>value</code>，因为用户无法输入，只能选择，如果不指定value，那么提交上去的只有<code>on</code></li>
</ul>
</li>
</ul>
</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">性别: </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;man&quot;</span>/&gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;woman&quot;</span>/&gt;</span>女</span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p><code>checked</code>属性</p>
</blockquote>
<ul>
<li>设置单选框/复选框的默认选中状态</li>
<li>单选按钮和复选框可以设置checked属性，当页面打开的时候可以默认选中这个按钮</li>
<li>默认选中的写法：<code>checked=&quot;checked&quot;</code></li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">性别: </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;man&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>/&gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;woman&quot;</span>/&gt;</span>女</span><br></pre></td></tr></table></figure>


</li>
</ul>
<blockquote>
<p><code>readonly</code>属性</p>
</blockquote>
<ul>
<li>设置该标签的参数值为只读，用户无法手动更改，数据可以正常提交</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">姓名: </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span> =<span class="string">&quot;name&quot;</span> <span class="attr">readonly</span>=<span class="string">&quot;readonly&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xxx&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p><code>maxlength</code>属性</p>
</blockquote>
<ul>
<li>规定输入字段中的字符的最大长度</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;test.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">name</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">maxlength</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span></span><br><span class="line">    女<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p><code>disabled</code>属性</p>
</blockquote>
<ul>
<li>设置该标签不可用，参数值无法更改，且参数值也无法提交</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">姓名: </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span> =<span class="string">&quot;otherName&quot;</span> <span class="attr">disabled</span>=<span class="string">&quot;disabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xxx2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span>      </span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-3-选择框标签"><a href="#3-3-选择框标签" class="headerlink" title="3.3. 选择框标签"></a>3.3. 选择框标签</h3><h4 id="3-3-1-lt-select-gt-lt-select-gt-标签"><a href="#3-3-1-lt-select-gt-lt-select-gt-标签" class="headerlink" title="3.3.1. &lt;select&gt;&lt;/select&gt;标签"></a>3.3.1. <code>&lt;select&gt;&lt;/select&gt;</code>标签</h4><ul>
<li>定义一个选择框<ul>
<li>name: 设置该标签对应的参数名</li>
<li>multiple: 设置该标签选项全部显示，并且可以进行多选提交，默认为单选</li>
</ul>
</li>
</ul>
<h4 id="3-3-2-lt-option-gt-lt-option-gt-标签"><a href="#3-3-2-lt-option-gt-lt-option-gt-标签" class="headerlink" title="3.3.2. &lt;option&gt;&lt;/option&gt;标签"></a>3.3.2. <code>&lt;option&gt;&lt;/option&gt;</code>标签</h4><ul>
<li>选项标签，用于为一个选择框添加一个选项，就是用来表示下拉列表中的选项<ul>
<li><code>value</code>: 设置需要提交的参数值</li>
<li><code>selected</code>: 设置选项的默认选中状态</li>
</ul>
</li>
<li>注意事项<ul>
<li><code>option</code>的内容体一般是用来进行展示的</li>
<li>参数值应该是<code>option</code>的<code>value</code>属性值</li>
</ul>
</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;test1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>选择1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">selected</span>=<span class="string">&quot;selected&quot;</span>&gt;</span>选择2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>选择3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-4-标注标签-lt-label-gt"><a href="#3-4-标注标签-lt-label-gt" class="headerlink" title="3.4. 标注标签&lt;label&gt;"></a>3.4. 标注标签<code>&lt;label&gt;</code></h3><ul>
<li>当用户选择该label标签对应的内容时，浏览器就会自动将焦点转到和标签相关的表单控件上</li>
<li>范例<ul>
<li>鼠标点击<code>男</code>的位置，也能实现单选功能，即不用在圆圈内点击<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;test.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">name</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;nan&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;nan&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;nu&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;nu&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="3-5-文本域标签"><a href="#3-5-文本域标签" class="headerlink" title="3.5. 文本域标签"></a>3.5. 文本域标签</h3><h4 id="3-5-1-lt-textarea-gt-lt-textarea-gt-标签"><a href="#3-5-1-lt-textarea-gt-lt-textarea-gt-标签" class="headerlink" title="3.5.1. &lt;textarea&gt;&lt;/textarea&gt;标签"></a>3.5.1. <code>&lt;textarea&gt;&lt;/textarea&gt;</code>标签</h4><ul>
<li>表单输入项标签之一，用户可以在该标签上通过输入进行数据的输入<ul>
<li><code>name</code>: 设置该标签对应的参数名</li>
</ul>
</li>
<li>文本域和文本框的区别<ul>
<li>文本框不能换行，文本域可以</li>
<li>文本框参数值是<code>value</code>属性，文本域参数值是标签的内容体</li>
</ul>
</li>
<li>可以输入多行文字</li>
<li>常见于留言板、评论</li>
<li>属性<ul>
<li><code>cols</code>一行显示的字符数</li>
<li><code>rows</code>显示的行数</li>
</ul>
</li>
<li>范例<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">&quot;10&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">        内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-6-提交表单注意事项"><a href="#3-6-提交表单注意事项" class="headerlink" title="3.6. 提交表单注意事项"></a>3.6. 提交表单注意事项</h3><h4 id="3-6-1-提交中文问题"><a href="#3-6-1-提交中文问题" class="headerlink" title="3.6.1. 提交中文问题"></a>3.6.1. 提交中文问题</h4><h5 id="3-6-1-1-为什么要使用URL编码？"><a href="#3-6-1-1-为什么要使用URL编码？" class="headerlink" title="3.6.1.1. 为什么要使用URL编码？"></a>3.6.1.1. 为什么要使用URL编码？</h5><ul>
<li>正常提交数据<ul>
<li><code>?password=123&amp;username=zhangsan</code></li>
</ul>
</li>
<li>非正常提交数据<ul>
<li><code>?password=123#abcd&amp;aaa&amp;bbb&amp;username=zhangsan</code></li>
</ul>
</li>
<li>URL编码解决方式: 可以把特殊符号和中文进行URL编码</li>
<li>为了保证表单数据传递时能更好的区分出<code>name</code>和<code>value</code></li>
<li>保证数据传递的完整性</li>
</ul>
<h5 id="3-6-1-2-URL编码的表现形式和本质"><a href="#3-6-1-2-URL编码的表现形式和本质" class="headerlink" title="3.6.1.2. URL编码的表现形式和本质"></a>3.6.1.2. URL编码的表现形式和本质</h5><ul>
<li>编码步骤<ul>
<li>进行普通的编码，编码成字节数组。使用的是页面规定的字符集，例如<code>utf-8</code></li>
<li>字节数组中的每一个元素，都会从10进制转为16进制</li>
<li>把已经转为16进制的字节数组，以%进行拼接，拼接出的字符串就是URL编码后的结果</li>
</ul>
</li>
<li>例子<ul>
<li>你好，用<code>UTF-8</code>编码</li>
<li>编码的字节数组为：[-28, -67, -96, -27, -91, -67]</li>
<li>URL编码后为: %E4%BD%A0%E5%A5%BD</li>
</ul>
</li>
</ul>
<h2 id="四、零散知识点"><a href="#四、零散知识点" class="headerlink" title="四、零散知识点"></a>四、零散知识点</h2><h3 id="4-1-路径"><a href="#4-1-路径" class="headerlink" title="4.1. 路径"></a>4.1. 路径</h3><ul>
<li><p>目录文件夹</p>
<ul>
<li>就是存放所有文件的最外面那个文件夹，即项目文件夹</li>
</ul>
</li>
<li><p>根目录</p>
<ul>
<li>打开目录文件夹的第一层就是根目录</li>
</ul>
</li>
<li><p>绝对路径</p>
<ul>
<li><code>D:\image\a.jpg</code></li>
<li><code>https://www.phd99.com/images/a.jpg</code></li>
</ul>
</li>
<li><p>相对路径</p>
<ul>
<li>当前文件夹中的image文件夹下的a图片<ul>
<li><code>image/a.jpg</code></li>
<li>或者<code>./image/a.jpg</code></li>
</ul>
</li>
<li>当前文件夹的上一级文件夹中的image文件夹<ul>
<li><code>../image</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="4-2-特殊字符"><a href="#4-2-特殊字符" class="headerlink" title="4.2. 特殊字符"></a>4.2. 特殊字符</h3><blockquote>
<p>空格</p>
</blockquote>
<ul>
<li>范例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;nbsp;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>大于</p>
</blockquote>
</li>
<li>范例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>小于</p>
</blockquote>
</li>
<li>范例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p>和</p>
</blockquote>
<ul>
<li>范例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>人民币</p>
</blockquote>
</li>
<li>范例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;yen;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>版权</p>
</blockquote>
</li>
<li>范例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;copy;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注册商标</p>
</blockquote>
</li>
<li>范例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;reg;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>摄氏度</p>
</blockquote>
</li>
<li>范例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;deg;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>正负号</p>
</blockquote>
</li>
<li>范例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;plusmn;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>乘号</p>
</blockquote>
</li>
<li>范例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;times;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>除号</p>
</blockquote>
</li>
<li>范例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;divide;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>平方</p>
</blockquote>
</li>
<li>范例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;sup2;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>立方</p>
</blockquote>
</li>
<li>范例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&amp;sup3;</span><br></pre></td></tr></table></figure>
<!--more-->
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>WEB开发</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之常量和变量</title>
    <url>/2021/05/18/Java%E4%B9%8B%E5%B8%B8%E9%87%8F%E5%92%8C%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h2 id="一、常量"><a href="#一、常量" class="headerlink" title="一、常量"></a>一、常量</h2><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1. 概述"></a>1.1. 概述</h3><ul>
<li>常量就是在程序运行过程中，其值不可以发生改变的量。<a id="more"></a>

</li>
</ul>
<h3 id="1-2-常量分类"><a href="#1-2-常量分类" class="headerlink" title="1.2. 常量分类"></a>1.2. 常量分类</h3><ul>
<li>字符串常量<ul>
<li>用双引号括起来的内容</li>
<li>范例：<code>&quot;HelloWorld&quot;</code></li>
</ul>
</li>
<li>整数常量<ul>
<li>不带小数的数字</li>
<li>范例：<code>666</code>，<code>-88</code></li>
</ul>
</li>
<li>小数常量<ul>
<li>带小数的数字</li>
<li>范例：<code>13.14</code>，<code>-5.21</code></li>
</ul>
</li>
<li>字符常量<ul>
<li>用单引号括起来的内容</li>
<li>范例：<code>&#39;A&#39;</code>，<code>&#39;0&#39;</code>，<code>&#39;我&#39;</code></li>
</ul>
</li>
<li>布尔常量<ul>
<li>布尔值，表示真假</li>
<li>只有两个值：<code>true</code>，<code>false</code></li>
</ul>
</li>
<li>空常量<ul>
<li>一个特殊的值，空值</li>
<li>值是：<code>null</code></li>
<li>空常量是不能直接输出的。</li>
</ul>
</li>
</ul>
<h2 id="二、变量"><a href="#二、变量" class="headerlink" title="二、变量"></a>二、变量</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1. 概述"></a>2.1. 概述</h3><ul>
<li>变量就是在程序运行过程中，其值可以发生改变的量。</li>
<li>从本质上讲，变量是内存中的一小块区域。</li>
</ul>
<h3 id="2-2-定义"><a href="#2-2-定义" class="headerlink" title="2.2. 定义"></a>2.2. 定义</h3><ul>
<li>格式<ul>
<li><code>数据类型 变量名 = 变量值;</code></li>
</ul>
</li>
<li>范例<ul>
<li><code>int a = 10;</code></li>
</ul>
</li>
</ul>
<h3 id="2-3-使用"><a href="#2-3-使用" class="headerlink" title="2.3. 使用"></a>2.3. 使用</h3><ul>
<li>取值和修改值</li>
</ul>
<h3 id="2-4-注意事项"><a href="#2-4-注意事项" class="headerlink" title="2.4. 注意事项"></a>2.4. 注意事项</h3><ul>
<li>(1)不能重复定义同一个变量名</li>
<li>(2)定义<code>long</code>类型的变量时，赋值时需要加上<code>L</code><ul>
<li>例如<ul>
<li><code>long a = 10000L</code></li>
</ul>
</li>
<li>因为给出的一个整数默认是<code>int</code>类型的</li>
</ul>
</li>
<li>(3)定义<code>float</code>类型的变量时，赋值时需要加上<code>f</code><ul>
<li>例如<ul>
<li><code>float a = 3.14F</code></li>
</ul>
</li>
<li>因为给出的一个小数默认是<code>double</code>类型的</li>
</ul>
</li>
<li>(4)变量未赋值时，不能使用</li>
</ul>
<!--more-->
]]></content>
      <categories>
        <category>技术</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之标识符</title>
    <url>/2021/05/17/Java%E4%B9%8B%E6%A0%87%E8%AF%86%E7%AC%A6/</url>
    <content><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><ul>
<li>标识符就是给类、方法、变量等起名字的符号<a id="more"></a>

</li>
</ul>
<h2 id="二、定义规则"><a href="#二、定义规则" class="headerlink" title="二、定义规则"></a>二、定义规则</h2><ul>
<li>由数字、字母、下划线和美元符组成</li>
<li>不能以数字开头</li>
<li>不能是关键字</li>
<li>区分大小写，即大写和小写是不同的</li>
</ul>
<h2 id="三、常见命名约定"><a href="#三、常见命名约定" class="headerlink" title="三、常见命名约定"></a>三、常见命名约定</h2><h3 id="3-1-小驼峰命名法：针对方法、变量来命名的"><a href="#3-1-小驼峰命名法：针对方法、变量来命名的" class="headerlink" title="3.1. 小驼峰命名法：针对方法、变量来命名的"></a>3.1. 小驼峰命名法：针对方法、变量来命名的</h3><ul>
<li>(1)标识符是一个单词的时候，首字母小写<ul>
<li>范例：<code>name</code></li>
</ul>
</li>
<li>(2)标识符由多个单词组成的时候，第一个单词首字母小写，其他单词首字母大写<ul>
<li>范例：<code>firstName</code></li>
</ul>
</li>
</ul>
<h3 id="3-2-大驼峰命名法：针对类来命名的"><a href="#3-2-大驼峰命名法：针对类来命名的" class="headerlink" title="3.2. 大驼峰命名法：针对类来命名的"></a>3.2. 大驼峰命名法：针对类来命名的</h3><ul>
<li>(1)标识符是一个单词的时候，首字母大写<ul>
<li>范例：<code>Student</code></li>
</ul>
</li>
<li>(2)标识符由多个单词组成的时候，每个单词的首字母大写<ul>
<li>范例：<code>GoodStudent</code></li>
</ul>
</li>
</ul>
<!--more-->
]]></content>
      <categories>
        <category>技术</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>所有的遇见，都是一种偿还</title>
    <url>/2021/05/16/%E6%89%80%E6%9C%89%E7%9A%84%E9%81%87%E8%A7%81%EF%BC%8C%E9%83%BD%E6%98%AF%E4%B8%80%E7%A7%8D%E5%81%BF%E8%BF%98/</url>
    <content><![CDATA[<h5 id="来源：十点读书（微信公众号）"><a href="#来源：十点读书（微信公众号）" class="headerlink" title="来源：十点读书（微信公众号）"></a>来源：十点读书（微信公众号）</h5><h5 id="文章名：所有的遇见，都是一种偿还"><a href="#文章名：所有的遇见，都是一种偿还" class="headerlink" title="文章名：所有的遇见，都是一种偿还"></a>文章名：<a href="https://mp.weixin.qq.com/s/QDQW7sFHGELB175GlzqnHg">所有的遇见，都是一种偿还</a></h5><hr>
<p>&ensp;&ensp;&ensp;&ensp;每一次的遇见，都应该真心对待，如此在缘分散尽分别的时候，才能不留下遗憾。</p>
<p>&ensp;&ensp;&ensp;&ensp;人这一生，大约会遇见三千万人，然而这其中的大部分人，不过是我们生命中的过客而已，最后能陪我们走完一生的人，少之又少。</p>
<p>&ensp;&ensp;&ensp;&ensp;可无论如何，你要相信，生命中遇到的每一个人，都是有意义的。</p>
<p>&ensp;&ensp;&ensp;&ensp;这世间的一切相遇，都有它独特的意义。</p>
<p>&ensp;&ensp;&ensp;&ensp;要不然，这世界上有几十亿人，为什么冥冥之中，偏偏就遇见了你呢？</p>
<p>&ensp;&ensp;&ensp;&ensp;不管你会遇见什么样的人，都是你生命中该出现的人；</p>
<p>&ensp;&ensp;&ensp;&ensp;不管你会经历什么样的事，都是你人生中该体验的事。</p>
<p>&ensp;&ensp;&ensp;&ensp;所谓一次相遇，一次成长。</p>
<p>&ensp;&ensp;&ensp;&ensp;有的人在你的生命来去匆匆，遇见了，转眼又转身离开了；</p>
<p>&ensp;&ensp;&ensp;&ensp;有的人在你的生命留下无法磨灭的回忆，让你铭记一生。</p>
<p>&ensp;&ensp;&ensp;&ensp;遇见对的人，是一种幸运；遇见错的人，同样丰富了我们的人生。</p>
<p>&ensp;&ensp;&ensp;&ensp;正是因为有这些遇见，让我们成长了，变成现在的模样，拥有现在的人生。</p>
<p>&ensp;&ensp;&ensp;&ensp;都说前世五百次的回眸，才换来今生那一次的擦肩而过。</p>
<font color=#DB5C5C>

<p>&ensp;&ensp;&ensp;&ensp;这世间，没有平白无故的遇见，也没有平白无故的缘分。</p>
<p>&ensp;&ensp;&ensp;&ensp;所有的相遇和离别，都是冥冥之中早已安排好的。</p>
<p>&ensp;&ensp;&ensp;&ensp;该来的人，总有一天会遇上；</p>
<p>&ensp;&ensp;&ensp;&ensp;要走的人，苦苦哀求也留不下来。</p>
<p>&ensp;&ensp;&ensp;&ensp;其实，我们这一生，本就是个不断遇见和告别的过程。</p>
<p>&ensp;&ensp;&ensp;&ensp;缘聚缘散，人来人往，都是命中注定的，半分不由人。</p>
<p>&ensp;&ensp;&ensp;&ensp;《千与千寻》里曾有句台词说得很真实：</p>
<p>&ensp;&ensp;&ensp;&ensp;“人生就是一列开往坟墓的列车，路途上会有很多站，很难有人可以自始至终陪着走完。当陪你的人要下车时，即使不舍也该心存感激，然后挥手道别。”<br></font></p>
<p>&ensp;&ensp;&ensp;&ensp;漫漫人生路上，既然有人来，便会有人走，聚散皆是天意，谁都无法强求。</p>
<p>&ensp;&ensp;&ensp;&ensp;但不管怎么样，遇见了，就该好好珍惜，用心相待每一份感情，如此才不辜负这来之不易的缘分；</p>
<p>&ensp;&ensp;&ensp;&ensp;缘分走到尽头，就笑对别离，无须苦苦纠缠，因为缘分深浅，都是注定的，往后的日子，不辜负自己便好。</p>
<p>&ensp;&ensp;&ensp;&ensp;正如徐志摩说的那样：</p>
<p>&ensp;&ensp;&ensp;&ensp;“得之，我幸；失之，我命。”</p>
<p>&ensp;&ensp;&ensp;&ensp;感恩生命中的每一次遇见，很高兴你能来，也不遗憾你离开。</p>
<p>&ensp;&ensp;&ensp;&ensp;凡是过往，皆为序曲。</p>
<p>&ensp;&ensp;&ensp;&ensp;人生苦短，未来的日子，愿你我且行且珍惜。</p>
]]></content>
      <categories>
        <category>文摘</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络文摘</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之Properties</title>
    <url>/2021/05/16/Java%E4%B9%8BProperties/</url>
    <content><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><ul>
<li><code>Properties</code>是一个Map体系的集合类</li>
<li><code>Properties</code>可以保存到流中或从流中加载<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">prop.out(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">prop.out(<span class="string">&quot;2&quot;</span>,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">Set&lt;Object&gt; keySet = prop.keySet();</span><br><span class="line"><span class="keyword">for</span>(Object key : keySet)</span><br><span class="line">&#123;</span><br><span class="line">    Object value = prop.get(key);</span><br><span class="line">    System.out.println(key + <span class="string">&quot;,&quot;</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="二、Properties作为集合的特有方法"><a href="#二、Properties作为集合的特有方法" class="headerlink" title="二、Properties作为集合的特有方法"></a>二、Properties作为集合的特有方法</h2><table>
<thead>
<tr>
<th align="center">方法名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Object setProperty(String key, String value)</td>
<td align="center">设置集合的键和值，都是String类型，底层调用Hashtable的put方法</td>
</tr>
<tr>
<td align="center">String getProperty(String key)</td>
<td align="center">使用此属性列表中指定的键搜索属性</td>
</tr>
<tr>
<td align="center">Set<String> stringPropertyNames()</td>
<td align="center">从该属性列表中返回一个不可修改的键集，其中键及其对应的值是字符串</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">prop.setProperty(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">prop.setProperty(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line">Set&lt;String&gt; names = prop.getPropertyNames();</span><br><span class="line"><span class="keyword">for</span>(String key : names)</span><br><span class="line">&#123;</span><br><span class="line">    String value = prop.getProperty(key);</span><br><span class="line">    System.out.println(key + <span class="string">&quot;,&quot;</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、Properties和IO流结合的方法"><a href="#三、Properties和IO流结合的方法" class="headerlink" title="三、Properties和IO流结合的方法"></a>三、Properties和IO流结合的方法</h2><table>
<thead>
<tr>
<th align="center">方法名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">void load(InputStream inStream)</td>
<td align="center"><div style="width:500px">从输入字节流读取属性列表（键和元素对），把文件中的数据加载到集合</div></td>
</tr>
<tr>
<td align="center">void load(Reader reader)</td>
<td align="center"><div style="width:500px">从输入字符流读取属性列表（键和元素对），把文件中的数据加载到集合</div></td>
</tr>
<tr>
<td align="center">void store(OutputStream out, String comments)</td>
<td align="center"><div style="width:500px">将此属性列表（键和元素对）写入此Properties表中，以适合于使用load(InputStream)方法的格式写入输出字节流，把集合中的数据保存到文件</div></td>
</tr>
<tr>
<td align="center">void store(Writer writer, String comments)</td>
<td align="center"><div style="width:500px">将此属性列表（键和元素对）写入此Properties表中，以适合使用load(Reader)方法的格式写入输出字符串，把集合中的数据保存到文件</div></td>
</tr>
</tbody></table>
<ul>
<li>comments为描述信息，如果不想写描述信息，则设置为null</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之修饰符</title>
    <url>/2021/05/16/Java%E4%B9%8B%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
    <content><![CDATA[<h2 id="一、权限修饰符"><a href="#一、权限修饰符" class="headerlink" title="一、权限修饰符"></a>一、权限修饰符</h2><table>
<thead>
<tr>
<th align="center">修饰符</th>
<th align="center">同一个类中</th>
<th align="center">同一个包中子类或无关类</th>
<th align="center">不同包的子类</th>
<th align="center">不同包的无关类</th>
</tr>
</thead>
<tbody><tr>
<td align="center">private</td>
<td align="center">√</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">默认</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">protected</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">public</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
</tbody></table>
<a id="more"></a>

<h2 id="二、状态修饰符"><a href="#二、状态修饰符" class="headerlink" title="二、状态修饰符"></a>二、状态修饰符</h2><h3 id="2-1-final（最终态）"><a href="#2-1-final（最终态）" class="headerlink" title="2.1. final（最终态）"></a>2.1. final（最终态）</h3><h4 id="2-1-1-概述"><a href="#2-1-1-概述" class="headerlink" title="2.1.1. 概述"></a>2.1.1. 概述</h4><ul>
<li>final关键字是最终的意思，可以修饰成员方法，成员变量，类。<h4 id="2-1-2-final修饰的特点"><a href="#2-1-2-final修饰的特点" class="headerlink" title="2.1.2. final修饰的特点"></a>2.1.2. final修饰的特点</h4></li>
<li>修饰方法：表明该方法是最终方法，不能被重写。</li>
<li>修饰变量：表明该变量是常量，不能再次被赋值。</li>
<li>修饰类：表明该类是最终类，不能被继承。<h4 id="2-1-3-final修饰局部变量"><a href="#2-1-3-final修饰局部变量" class="headerlink" title="2.1.3. final修饰局部变量"></a>2.1.3. final修饰局部变量</h4></li>
<li>变量是基本类型：final修饰指的是基本类型的数据值不能发生改变。</li>
<li>变量是引用类型：final修饰指的是引用类型的地址值不能发生改变，但是地址里面的内容是可以发生改变的。</li>
</ul>
<h3 id="2-2-static（静态）"><a href="#2-2-static（静态）" class="headerlink" title="2.2. static（静态）"></a>2.2. static（静态）</h3><h4 id="2-2-1-概述"><a href="#2-2-1-概述" class="headerlink" title="2.2.1. 概述"></a>2.2.1. 概述</h4><ul>
<li>static关键字是静态的意思，可以修饰成员方法、成员变量。<h4 id="2-2-2-static修饰的特点"><a href="#2-2-2-static修饰的特点" class="headerlink" title="2.2.2. static修饰的特点"></a>2.2.2. static修饰的特点</h4></li>
<li>(1)被类的所有对象共享，这也是我们判断是否使用静态关键字的条件</li>
<li>(2)可以通过类名调用，也可以通过对象名调用，建议使用类名调用。<h4 id="2-2-3-static访问特点"><a href="#2-2-3-static访问特点" class="headerlink" title="2.2.3. static访问特点"></a>2.2.3. static访问特点</h4></li>
<li>非静态的成员方法<ul>
<li>(1)能访问静态的成员变量</li>
<li>(2)能访问非静态的成员变量</li>
<li>(3)能访问静态的成员方法</li>
<li>(4)能访问非静态的成员方法</li>
</ul>
</li>
<li>静态的成员方法<ul>
<li>(1)能访问静态的成员变量</li>
<li>(2)能访问静态的成员方法</li>
</ul>
</li>
<li>静态成员方法只能访问静态成员</li>
</ul>
<!--more-->
]]></content>
      <categories>
        <category>技术</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之特殊操作流</title>
    <url>/2021/05/16/Java%E4%B9%8B%E7%89%B9%E6%AE%8A%E6%93%8D%E4%BD%9C%E6%B5%81/</url>
    <content><![CDATA[<h2 id="一、标准输入输出流"><a href="#一、标准输入输出流" class="headerlink" title="一、标准输入输出流"></a>一、标准输入输出流</h2><h3 id="1-1-System类中有两个静态的成员变量"><a href="#1-1-System类中有两个静态的成员变量" class="headerlink" title="1.1. System类中有两个静态的成员变量"></a>1.1. System类中有两个静态的成员变量</h3><ul>
<li>标准输入流，通常该流对应于键盘输入或由主机环境或用户指定的另一个输入源<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> InputStream in</span><br></pre></td></tr></table></figure></li>
<li>标准输出流，通常该流对应于显示输出或由主机环境或用户指定的另一个输出目标<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> PrintStream out</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-2-自己实现键盘录入数据"><a href="#1-2-自己实现键盘录入数据" class="headerlink" title="1.2. 自己实现键盘录入数据"></a>1.2. 自己实现键盘录入数据</h3><ul>
<li>范例<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br></pre></td></tr></table></figure></li>
<li>写起来太麻烦了，Java就提供了一个类实现键盘录入<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br></pre></td></tr></table></figure></li>
<li>输出语句的本质：是一个标准的输出流<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PrintStream ps = System.out;</span><br><span class="line">PrintStream类有的方法，System.out都可以使用</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="二、打印流"><a href="#二、打印流" class="headerlink" title="二、打印流"></a>二、打印流</h2><h3 id="2-1-打印流分类"><a href="#2-1-打印流分类" class="headerlink" title="2.1. 打印流分类"></a>2.1. 打印流分类</h3><ul>
<li>字节打印流<ul>
<li><code>PrintStream</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PrintStream ps =<span class="keyword">new</span> PrintStream(<span class="string">&quot;a.java&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>字符打印流<ul>
<li><code>PrintWriter</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PrintWriter pw = <span class="keyword">new</span> PrintWriter(<span class="string">&quot;a.java&quot;</span>);</span><br><span class="line">PrintWriter pw = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;a.java&quot;</span>), <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="2-2-打印流的特点"><a href="#2-2-打印流的特点" class="headerlink" title="2.2. 打印流的特点"></a>2.2. 打印流的特点</h3><ul>
<li>只负责输出数据，不负责读取数据</li>
<li>有自己的特有方法</li>
</ul>
<h3 id="2-3-字节打印流"><a href="#2-3-字节打印流" class="headerlink" title="2.3. 字节打印流"></a>2.3. 字节打印流</h3><ul>
<li><code>PrintStream(String fileName)</code><ul>
<li>使用指定的文件名创建新的打印流</li>
</ul>
</li>
<li>使用继承父类的方法写数据，查看的时候会转码（write）；使用自己的特有方法写数据，查看的数据原样输出(printf)</li>
</ul>
<h3 id="2-4-字符打印流"><a href="#2-4-字符打印流" class="headerlink" title="2.4. 字符打印流"></a>2.4. 字符打印流</h3><ul>
<li><code>PrintWriter(String fileName)</code><ul>
<li>使用指定的文件名创建一个新的PrintWriter，而不会自动执行刷新。</li>
</ul>
</li>
<li><code>PrintWriter(Writer out, boolean autoFlush)</code><ul>
<li>创建一个新的PrintWriter，out：字符输出流。autoFlush：一个布尔值，如果为真，则println、printf或format方法将刷新输出缓冲区。即会自动执行刷新</li>
</ul>
</li>
</ul>
<h2 id="三、对象序列化和反序列化"><a href="#三、对象序列化和反序列化" class="headerlink" title="三、对象序列化和反序列化"></a>三、对象序列化和反序列化</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1. 概述"></a>3.1. 概述</h3><ul>
<li>对象序列化就是将对象保存到磁盘中，或者在网络中传输对象</li>
<li>就是把一个对象的内容写到了一个文件中</li>
<li>这种机制就是使用一个字节序列表示一个对象，该字节序列包含：对象的类型、对象的数据和对象中存储的属性等信息</li>
<li>字节序列写到文件之后，相当于文件中持久保存了一个对象的信息</li>
<li>要实现序列化和反序列化就要使用对象序列化流和对象反序列化流：<ul>
<li>对象序列化流：<code>ObjectOutStream</code></li>
<li>对象反序列化流：<code>ObjectInputStream</code></li>
</ul>
</li>
</ul>
<h3 id="3-2-对象序列化流"><a href="#3-2-对象序列化流" class="headerlink" title="3.2. 对象序列化流"></a>3.2. 对象序列化流</h3><h4 id="3-2-1-简介"><a href="#3-2-1-简介" class="headerlink" title="3.2.1. 简介"></a>3.2.1. 简介</h4><ul>
<li>将Java对象的原始数据类型和图形写入OutputStream，可以使用ObjectInputStream获取（重构）对象，可以通过使用流的文件来实现对象的持久存储。如果流是网络套接字流，则可以在另一个主机上或另一个进程中重构对象</li>
</ul>
<h4 id="3-2-2-构造方法"><a href="#3-2-2-构造方法" class="headerlink" title="3.2.2. 构造方法"></a>3.2.2. 构造方法</h4><ul>
<li><code>ObjectOutputStream(OutputStream out)</code><ul>
<li>创建一个写入指定的OutputStream的ObjectOutputStream</li>
</ul>
</li>
</ul>
<h4 id="3-2-3-序列化对象的方法"><a href="#3-2-3-序列化对象的方法" class="headerlink" title="3.2.3. 序列化对象的方法"></a>3.2.3. 序列化对象的方法</h4><ul>
<li><code>void writeObject(Object obj)</code><ul>
<li>将指定的对象写入ObjectOutputStream</li>
</ul>
</li>
</ul>
<h4 id="3-2-4-注意"><a href="#3-2-4-注意" class="headerlink" title="3.2.4. 注意"></a>3.2.4. 注意</h4><ul>
<li>一个对象要想被序列化，该对象所属的类必须实现Serializable接口。</li>
<li>Serializable是一个标记接口，实现该接口，不需要重写任何方法。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectOutputStreamDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个写入指定的OutputStream的ObjectOutputStream</span></span><br><span class="line">        ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">&quot;阿萨科斯塔&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="comment">//void writeObject(Object obj)，将指定的对象写入ObjectOutputStream</span></span><br><span class="line">        oss.writeObject(s);</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function">pubic <span class="title">Student</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-3-对象反序列化流"><a href="#3-3-对象反序列化流" class="headerlink" title="3.3. 对象反序列化流"></a>3.3. 对象反序列化流</h3><h4 id="3-3-1-简介"><a href="#3-3-1-简介" class="headerlink" title="3.3.1. 简介"></a>3.3.1. 简介</h4><ul>
<li><code>ObjectInputStream</code>反序列化先前使用<code>ObjectOutputStream</code>编写的原始数据和对象</li>
</ul>
<h4 id="3-3-2-构造方法"><a href="#3-3-2-构造方法" class="headerlink" title="3.3.2. 构造方法"></a>3.3.2. 构造方法</h4><ul>
<li><code>ObjectInputStream(InputStream in)</code><ul>
<li>创建从指定的InputStream读取的ObjectInputStream</li>
</ul>
</li>
</ul>
<h4 id="3-3-3-反序列化对象的方法"><a href="#3-3-3-反序列化对象的方法" class="headerlink" title="3.3.3. 反序列化对象的方法"></a>3.3.3. 反序列化对象的方法</h4><ul>
<li><code>Object readObject()</code><ul>
<li>从ObjectInputStream读取一个对象<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//创建从指定的InputStream读取的ObjectInputStream</span></span><br><span class="line">    ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;a.txt&quot;</span>));</span><br><span class="line">    <span class="comment">//Object readObject()：从ObjectInputStream读取一个对象</span></span><br><span class="line">    Object obj = ois.readObject();</span><br><span class="line">    Student s = (Student)obj;</span><br><span class="line">    System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    ois.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h4 id="3-3-4-对象序列化的问题"><a href="#3-3-4-对象序列化的问题" class="headerlink" title="3.3.4. 对象序列化的问题"></a>3.3.4. 对象序列化的问题</h4><ul>
<li>(1)用对象序列化流序列化了一个对象后，假如我们修改了对象所属的类文件，读取数据会不会出现问题呢？<ul>
<li>会出现问题，抛出<code>InvalidClassException</code>异常</li>
</ul>
</li>
<li>(2)如果出现问题了，如何解决呢？<ul>
<li>给对象所属的类加一个<code>serialVersionUID</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">`<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">42L</span>;`</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>(3)如果一个对中的某个成员变量的值不想被序列化，又该如何实现呢？<ul>
<li>给该成员变量加transient关键字修饰，该关键字标记的成员变量不参与序列化过程</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之IO流</title>
    <url>/2021/05/16/Java%E4%B9%8BIO%E6%B5%81/</url>
    <content><![CDATA[<h2 id="一、IO流概述"><a href="#一、IO流概述" class="headerlink" title="一、IO流概述"></a>一、IO流概述</h2><ul>
<li>IO：输入/输出(Input/Output)</li>
<li>流：是一种抽象概念，是对数据传输的总称，也就是说数据在设备间的传输称为流，流的本质是数据传输。</li>
<li>IO流就是用来处理设备间数据传输问题的</li>
<li>常见的应用<ul>
<li>文件复制</li>
<li>文件上传</li>
<li>文件下载</li>
</ul>
</li>
</ul>
<h2 id="二、IO流分类"><a href="#二、IO流分类" class="headerlink" title="二、IO流分类"></a>二、IO流分类</h2><h3 id="2-1-按数据的流向"><a href="#2-1-按数据的流向" class="headerlink" title="2.1. 按数据的流向"></a>2.1. 按数据的流向</h3><ul>
<li>输入流：读数据</li>
<li>输出流：写数据</li>
</ul>
<h3 id="2-2-按照数据类型来分"><a href="#2-2-按照数据类型来分" class="headerlink" title="2.2. 按照数据类型来分"></a>2.2. 按照数据类型来分</h3><ul>
<li>字节流<ul>
<li>字节输入流；字节输出流</li>
</ul>
</li>
<li>字符流<ul>
<li>字符输入流；字符输出流</li>
</ul>
</li>
<li>一般来说，我们说IO流的分类是按照数据类型来分的</li>
<li>这两种流都在什么情况下使用？<ul>
<li>如果数据通过Window自带的记事本软件打开，我们还可以读懂里面的内容，就使用字符流，否则使用字节流，如果你不知道该使用哪种类型的流，就使用字节流。</li>
</ul>
</li>
</ul>
<h2 id="三、字节流"><a href="#三、字节流" class="headerlink" title="三、字节流"></a>三、字节流</h2><h3 id="3-1-字节流写数据"><a href="#3-1-字节流写数据" class="headerlink" title="3.1. 字节流写数据"></a>3.1. 字节流写数据</h3><h4 id="3-1-1-字节流抽象基类"><a href="#3-1-1-字节流抽象基类" class="headerlink" title="3.1.1. 字节流抽象基类"></a>3.1.1. 字节流抽象基类</h4><ul>
<li>InputStream<ul>
<li>这个抽象类是表示字节输入流的所有类的超类。</li>
</ul>
</li>
<li>OutputStream<ul>
<li>这个抽象类是表示字节输出流的所有类的超类。</li>
</ul>
</li>
<li>子类名特点<ul>
<li>子类名称都是以其父类名作为子类名的后缀。</li>
</ul>
</li>
<li>FileOutputStream<ul>
<li>文件输出流用于将数据写入File</li>
</ul>
</li>
<li>FileOutputStream(String name)<ul>
<li>创建文件输出流以指定的名称写入文件。</li>
</ul>
</li>
</ul>
<h4 id="3-1-2-使用字节输出流写数据的步骤"><a href="#3-1-2-使用字节输出流写数据的步骤" class="headerlink" title="3.1.2. 使用字节输出流写数据的步骤"></a>3.1.2. 使用字节输出流写数据的步骤</h4><ul>
<li>(1)创建字节输出流对象<ul>
<li>调用系统功能创建了文件</li>
<li>创建字节输出流对象</li>
<li>让字节输出流对象指向文件</li>
</ul>
</li>
<li>(2)调用字节输出流对象的写数据方法</li>
<li>(3)释放资源（关闭此文件输出流并释放与此流相关联的任何系统资源）</li>
</ul>
<h4 id="3-1-3-字节流写数据的三种方式"><a href="#3-1-3-字节流写数据的三种方式" class="headerlink" title="3.1.3. 字节流写数据的三种方式"></a>3.1.3. 字节流写数据的三种方式</h4><table>
<thead>
<tr>
<th align="center">方法名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">void write(int b)</td>
<td align="center">将指定的字节写入此文件输出流一次写一个字节数据</td>
</tr>
<tr>
<td align="center">void write(byte[] b)</td>
<td align="center">将b.length字节从指定的字节数组写入此文件输出流一次写一个字节数组数据</td>
</tr>
<tr>
<td align="center">void write(byte[] b, int off, int len)</td>
<td align="center">将len字节从指定的字节数组开始，从偏移量off开始写入此文件输出流一次写一个字节数组的部分数据</td>
</tr>
</tbody></table>
<h4 id="3-1-4-字节流写数据的两个问题"><a href="#3-1-4-字节流写数据的两个问题" class="headerlink" title="3.1.4. 字节流写数据的两个问题"></a>3.1.4. 字节流写数据的两个问题</h4><ul>
<li>字节流写数据如何实现换行<ul>
<li>写完数据后，加换行符</li>
<li>window：\r\n</li>
<li>linux：\n</li>
<li>mac：\r</li>
</ul>
</li>
<li>字节流写数据如何实现追加写入<ul>
<li>public FileOutputStream(String name, boolean append)</li>
<li>创建文件输出流以指定的名称写入文件，如果第二个参数为true，则字节将写入文件的末尾而不是开头。默认为false，会在开头写入数据</li>
</ul>
</li>
</ul>
<h4 id="3-1-5-字节流写数据加异常处理"><a href="#3-1-5-字节流写数据加异常处理" class="headerlink" title="3.1.5. 字节流写数据加异常处理"></a>3.1.5. 字节流写数据加异常处理</h4><ul>
<li>finally在异常处理时提供finally块来执行所有清除操作，比如说IO流中的释放资源</li>
<li>特点：被finally控制的语句一定会执行，除非JVM退出</li>
<li>格式<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    可能出现异常的代码;</span><br><span class="line">&#125;cathch(异常类名 变量名)</span><br><span class="line">&#123;</span><br><span class="line">    异常的处理代码;</span><br><span class="line">&#125;<span class="keyword">finally</span></span><br><span class="line">&#123;</span><br><span class="line">    执行所有清除操作;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-2-字节流读数据（一次读一个字节数据）"><a href="#3-2-字节流读数据（一次读一个字节数据）" class="headerlink" title="3.2. 字节流读数据（一次读一个字节数据）"></a>3.2. 字节流读数据（一次读一个字节数据）</h3><h4 id="3-2-1-类"><a href="#3-2-1-类" class="headerlink" title="3.2.1. 类"></a>3.2.1. 类</h4><ul>
<li><code>FileInputStream</code><ul>
<li>从文件系统中的文件获取输入字节</li>
</ul>
</li>
<li><code>FileInputStream(String name)</code><ul>
<li>通过打开与实际文件的连接来创建一个FileInputStream，该文件由文件系统中的路径名name命名</li>
</ul>
</li>
</ul>
<h4 id="3-2-2-使用字节输入流读数据的步骤"><a href="#3-2-2-使用字节输入流读数据的步骤" class="headerlink" title="3.2.2. 使用字节输入流读数据的步骤"></a>3.2.2. 使用字节输入流读数据的步骤</h4><ul>
<li>(1)创建字节输入流对象</li>
<li>(2)调用字节输入流对象的读数据方法</li>
<li>(3)释放资源</li>
</ul>
<h4 id="3-2-3-字节流读数据范例"><a href="#3-2-3-字节流读数据范例" class="headerlink" title="3.2.3. 字节流读数据范例"></a>3.2.3. 字节流读数据范例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;fos.txt&quot;</span>);</span><br><span class="line"><span class="keyword">byte</span>[] bys = <span class="keyword">new</span> bys[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">while</span>((len = fis.read(bys)) != -<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    System.out.print(<span class="keyword">new</span> String(bys, len));</span><br><span class="line">&#125;</span><br><span class="line">fis.close();</span><br></pre></td></tr></table></figure>

<h3 id="3-3-字节流复制图片"><a href="#3-3-字节流复制图片" class="headerlink" title="3.3. 字节流复制图片"></a>3.3. 字节流复制图片</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">CopyJpgDemo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\mm.jpg&quot;</span>);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;mm.jpg&quot;</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = fis.read(bys)) != -<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            fos.write(bys, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-4-字节缓冲流"><a href="#3-4-字节缓冲流" class="headerlink" title="3.4. 字节缓冲流"></a>3.4. 字节缓冲流</h3><h4 id="3-4-1-类"><a href="#3-4-1-类" class="headerlink" title="3.4.1. 类"></a>3.4.1. 类</h4><ul>
<li><code>BufferOutputStream</code><ul>
<li>该类实现缓冲输出流，通过设置这样的输出流，应用程序可以向底层输出流写入字节，而不必为写入的每个字节导致底层系统的调用。通过设置一个缓冲区，将来可以一次性把数据写到文件中，这样就减少了底层调用，从而提高了效率。</li>
</ul>
</li>
<li><code>BufferInputStream</code><ul>
<li>创建BufferedInputStream将创建一个内部缓冲区数组，当从流中读取或跳过字节时，内部缓冲区将根据需要从所包含的输入流中重新填充，一次很多字节。</li>
</ul>
</li>
</ul>
<h4 id="3-4-2-构造方法"><a href="#3-4-2-构造方法" class="headerlink" title="3.4.2. 构造方法"></a>3.4.2. 构造方法</h4><ul>
<li>字节缓冲输出流<ul>
<li><code>BufferedOutputStream(OutputStream out)</code></li>
</ul>
</li>
<li>字节缓冲输入流<ul>
<li><code>BufferedInputStream(InputStream in)</code></li>
</ul>
</li>
<li>为什么构造方法需要的是字节流，而不是具体的文件或者路径？<ul>
<li>字节缓冲流仅仅提供缓冲区，而真正的读写数据还得依靠基本的字节流对象进行操作<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//字节缓冲输出流：BufferedOutputStream(OutputStream out)</span></span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;box.txt&quot;</span>);</span><br><span class="line">    BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line">    <span class="comment">//写数据</span></span><br><span class="line">    bos.write(<span class="string">&quot;hello\r\n&quot;</span>.getByte());</span><br><span class="line">    bos.write(<span class="string">&quot;world\r\n&quot;</span>.getByte());</span><br><span class="line">    <span class="comment">//字节缓冲输入流：BufferedInputStream(InputStream in)</span></span><br><span class="line">    BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;box.txt&quot;</span>));</span><br><span class="line">    <span class="comment">//一次读取一个字节数据</span></span><br><span class="line">    <span class="keyword">int</span> by;</span><br><span class="line">    <span class="keyword">while</span>((by = bis.read()) != -<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.print((<span class="keyword">char</span>)by);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//一次读取一个字节数组，效率最高</span></span><br><span class="line">    <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">while</span>((len = bis.read(bys)) != -<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.print(<span class="keyword">new</span> String(bys, <span class="number">0</span>, len));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    bos.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="四、字符流"><a href="#四、字符流" class="headerlink" title="四、字符流"></a>四、字符流</h2><h3 id="4-1-为什么会出现字符流"><a href="#4-1-为什么会出现字符流" class="headerlink" title="4.1. 为什么会出现字符流"></a>4.1. 为什么会出现字符流</h3><ul>
<li>由于字节流操作中文不是特别的方便，所以Java就提供了字符流</li>
<li>字符流 = 字节流 + 编码表</li>
<li>用字节流复制文本文件时，文本文件也会有中文，但是没有问题，原因是最终底层操作会自动进行字节拼接成正文，如何识别中文的呢？汉字在存储的时候，无论选择哪种编码存储，第一个字节都是负数</li>
<li>注意<ul>
<li>一个汉字存储</li>
<li>如果是GBK编码，占用2个字节</li>
<li>如果是UTF-8编码，占用3个字节</li>
</ul>
</li>
</ul>
<h3 id="4-2-编码表"><a href="#4-2-编码表" class="headerlink" title="4.2. 编码表"></a>4.2. 编码表</h3><ul>
<li>计算机中储存的信息都是用二进制数表示的；我们在屏幕上看到的英文、汉字等字符是二进制数转换之后的结果</li>
<li>按照某种规则，将字符存储到计算机中，称为编码。反之，将存储在计算机中的二进制数按照某种规则解析显示出来，称为解码。按照A编码存储，必须按照A编码解析，这样才能显示正确的文本符号，否则就会导致乱码现象</li>
<li>字符编码<ul>
<li>就是一套自然语言的字符与二进制数之间的对应规则（A，65）</li>
</ul>
</li>
</ul>
<h3 id="4-3-字符集"><a href="#4-3-字符集" class="headerlink" title="4.3. 字符集"></a>4.3. 字符集</h3><ul>
<li>字符集是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等</li>
<li>计算机要准确的存储和识别各种字符集符号，就需要进行字符编码，一套字符集必然至少有一套字符编码</li>
<li>常见字符集有ASCll字符集、GBXXX字符集、Unicode字符集等</li>
</ul>
<h3 id="4-4-ASCII字符集"><a href="#4-4-ASCII字符集" class="headerlink" title="4.4. ASCII字符集"></a>4.4. ASCII字符集</h3><ul>
<li>ASCII（美国信息交换标准代码）<ul>
<li>是基于拉丁字母的一套电脑编码系统，用于显示现代英语，主要包括控制字符（回车键、退格、换行键等）和可显示字符（英文大小写字符、阿拉伯数字和西文符号）</li>
</ul>
</li>
<li>基本的ASCII字符集，使用7位表示一个字符，共128字符。ASCII的扩展字符集使用8位表示一个字符，共256字符，方便支持欧洲常用字符，是一个系统支持的所有字符的集合，包括国家文字、标点符号、图形符号、数字等</li>
</ul>
<h3 id="4-5-GBXXX字符集"><a href="#4-5-GBXXX字符集" class="headerlink" title="4.5. GBXXX字符集"></a>4.5. GBXXX字符集</h3><ul>
<li>GB2312<ul>
<li>简体中文码表。一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，这样大约可以组合了包含7000多个简体汉字，此外数学符号、罗马希腊的字母、日文的假名等都编进去了，连在ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的“全角”字符，而原来在127号以下的那些就叫“半角”字符了</li>
</ul>
</li>
<li>GBK<ul>
<li>最常用的中文码表，是在GB2312标准的基础上的扩展规范，使用了双字节编码方案，共收录了21003个汉字，完全兼容GB2312标准，同时支持繁体汉字以及日韩汉字等</li>
</ul>
</li>
<li>GB18030<ul>
<li>最新的中文码表，收录汉字70244个，采用多字节编码，每个字可以由1个、2个或4个字节组成，支持中国国内少数民族的文字，同时支持繁体汉字以及日韩汉字等</li>
</ul>
</li>
</ul>
<h3 id="4-6-Unicode字符集"><a href="#4-6-Unicode字符集" class="headerlink" title="4.6. Unicode字符集"></a>4.6. Unicode字符集</h3><ul>
<li>为表达任意语言的任意字符而设计，是业界的一种标准，也称为统一码、标准万国码。它最多使用4个字节的数字来表达每个字母、符号，或者文字。有三种编码方案，UTF-8、UTF-16和UTF32，最为常用的是UTF-8编码</li>
<li>UTF-8编码可以用来表示Unicode标准中任意字符，它是电子邮件、网页及其他存储或传送文字的应用中，优先采用的编码，互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码，它使用一至四个字节为每个字符编码<ul>
<li>编码规则<ul>
<li>128个US-ASCII字符，只需一个字节编码</li>
<li>拉丁文等字符，需要二个字节编码</li>
<li>大部分常用字（含中文），使用三个字节编码</li>
<li>其他极少使用的Unicode辅助字符，使用四字节编码</li>
</ul>
</li>
</ul>
</li>
<li>采用何种规则编码，就要采用对应规则解码，否则就会出现乱码</li>
</ul>
<h3 id="4-7-字符串中的编码解码问题"><a href="#4-7-字符串中的编码解码问题" class="headerlink" title="4.7. 字符串中的编码解码问题"></a>4.7. 字符串中的编码解码问题</h3><h4 id="4-7-1-编码"><a href="#4-7-1-编码" class="headerlink" title="4.7.1. 编码"></a>4.7.1. 编码</h4><ul>
<li><code>byte[] getBytes()</code><ul>
<li>使用平台的默认字符集将该String编码为一系列字节，将结果存储到新的字节数组中</li>
</ul>
</li>
<li><code>byte[] getBytes(String charsetName)</code><ul>
<li>使用指定的字符集将该String编码为一系列字节，将结果存储到新的字节数组中</li>
</ul>
</li>
</ul>
<h4 id="4-7-2-解码"><a href="#4-7-2-解码" class="headerlink" title="4.7.2. 解码"></a>4.7.2. 解码</h4><ul>
<li><code>String(byte[] bytes)</code><ul>
<li>通过使用平台的默认字符集解码指定的字节数组来构造新的String</li>
</ul>
</li>
<li><code>String(byte[] bytes, String charseName)</code><ul>
<li>通过指定的字符集解码指定的字节数组来构造新的String</li>
</ul>
</li>
</ul>
<h3 id="4-8-字符流中的编码解码问题"><a href="#4-8-字符流中的编码解码问题" class="headerlink" title="4.8. 字符流中的编码解码问题"></a>4.8. 字符流中的编码解码问题</h3><h4 id="4-8-1-字符流抽象基类"><a href="#4-8-1-字符流抽象基类" class="headerlink" title="4.8.1. 字符流抽象基类"></a>4.8.1. 字符流抽象基类</h4><ul>
<li>Reader<ul>
<li>字符输入流的抽象类</li>
</ul>
</li>
<li>Writer<ul>
<li>字符输出流的抽象类</li>
</ul>
</li>
</ul>
<h4 id="4-8-2-字符流中和编码解码问题相关的两个类"><a href="#4-8-2-字符流中和编码解码问题相关的两个类" class="headerlink" title="4.8.2. 字符流中和编码解码问题相关的两个类"></a>4.8.2. 字符流中和编码解码问题相关的两个类</h4><ul>
<li>InputStreamReader，是从字节流到字符流的桥梁<ul>
<li>它读取字节，并使用指定的编码将其解码为字符</li>
<li>它使用的字符集可以由名称指定，也可以被明确指定，或者可以接受平台的默认字符集</li>
</ul>
</li>
<li>OutputStreamWriter，是从字符流到字节流的桥梁<ul>
<li>使用指定的编码将写入的字符编码为字节</li>
<li>它使用的字符集可以由名称指定，也可以被明确指定，或者可以接受平台的默认字符集</li>
</ul>
</li>
<li>范例<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;a.txt&quot;</span>), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;a.txt&quot;</span>), <span class="string">&quot;UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li>转换流的名字比较长，而我们常见的操作都是按照本地默认编码实现的，所以为了简化书写，转换流提供了对应的子类<ul>
<li>FileReader<ul>
<li>用于读取字符文件的便捷类</li>
<li>FileReader(String fileName)</li>
</ul>
</li>
<li>FileWriter<ul>
<li>用于写入字符文件的便捷类。FileWriter(String fileName)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="4-8-3-数据源和目的地的分析"><a href="#4-8-3-数据源和目的地的分析" class="headerlink" title="4.8.3. 数据源和目的地的分析"></a>4.8.3. 数据源和目的地的分析</h4><ul>
<li>数据源<ul>
<li><code>myCharStream\\ConversionStreamDemo.java</code>—&gt;<code>读数据</code>—&gt;<code>Reader</code>—&gt;<code>InputStreamReader</code>—&gt;<code>FileReader</code></li>
</ul>
</li>
<li>目的<ul>
<li><code>myCharStream\\Copy.java—&gt;Writer—&gt;OutputStreamWriter</code>—&gt;<code>FileWriter</code></li>
</ul>
</li>
</ul>
<h3 id="4-9-字符流写数据的5种方式"><a href="#4-9-字符流写数据的5种方式" class="headerlink" title="4.9. 字符流写数据的5种方式"></a>4.9. 字符流写数据的5种方式</h3><table>
<thead>
<tr>
<th align="center">方法名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">void write(int c)</td>
<td align="center">写一个字符</td>
</tr>
<tr>
<td align="center">void write(char[] cbuf)</td>
<td align="center">写入一个字符数组</td>
</tr>
<tr>
<td align="center">void write(char[] cbuf, int off, int len)</td>
<td align="center">写入字符数组的一部分</td>
</tr>
<tr>
<td align="center">void write(String str)</td>
<td align="center">写一个字符串</td>
</tr>
<tr>
<td align="center">void write(String str, int off, int len)</td>
<td align="center">写一个字符串的一部分</td>
</tr>
</tbody></table>
<ul>
<li>使用字符流写数据后，需要刷新流之后，才会写入到文件中。</li>
<li>flush()<ul>
<li>刷新流，还可以继续写数据</li>
</ul>
</li>
<li>close()<ul>
<li>关闭流，释放资源，但是在关闭之前会先刷新流，一旦关闭，就不能再写数据</li>
</ul>
</li>
</ul>
<h3 id="4-10-字符流读数据的2种方式"><a href="#4-10-字符流读数据的2种方式" class="headerlink" title="4.10. 字符流读数据的2种方式"></a>4.10. 字符流读数据的2种方式</h3><p>方法名|说明<br>int read()|一次读一个字符数据<br>int read(char[] cbuf)|一次读一个字符数组数据</p>
<h3 id="4-11-字符缓冲流"><a href="#4-11-字符缓冲流" class="headerlink" title="4.11. 字符缓冲流"></a>4.11. 字符缓冲流</h3><h4 id="4-11-1-类"><a href="#4-11-1-类" class="headerlink" title="4.11.1. 类"></a>4.11.1. 类</h4><ul>
<li>BufferedWriter<ul>
<li>将文本写入字符输出流，缓冲字符，以提供单个字符，数组和字符串的高效写入，可以指定缓冲区大小，或者可以接受默认大小，默认值足够大，可用于大多数用途</li>
</ul>
</li>
<li>BufferedReader<ul>
<li>从字符输入流读取文本，缓冲字符，以提供字符，数组和行的高效读取，可以指定缓冲区大小，或者可以使用默认大小，默认值足够大，可用于大多数用途</li>
</ul>
</li>
</ul>
<h4 id="4-11-2-构造方法"><a href="#4-11-2-构造方法" class="headerlink" title="4.11.2. 构造方法"></a>4.11.2. 构造方法</h4><ul>
<li><code>BufferedWriter(Writer out)</code></li>
<li><code>BufferedReader(Reader in)</code></li>
<li>范例<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;a.txt&quot;</span>));</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;a.txt&quot;</span>));</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="4-11-3-字符缓冲流特有功能"><a href="#4-11-3-字符缓冲流特有功能" class="headerlink" title="4.11.3. 字符缓冲流特有功能"></a>4.11.3. 字符缓冲流特有功能</h4><ul>
<li>BufferedWriter<ul>
<li>void newLine()：写一行行分隔符，行分隔符字符串由系统属性定义。表示换行，适用于所有操作系统。</li>
</ul>
</li>
<li>BufferedReader<ul>
<li>public String readLine()：读一行文字。结果包含行的内容的字符串，不包括任何行终止字符，如果流的结尾已经到达，则为null。执行一次只读取一行的内容，不会读取换行的符号。</li>
</ul>
</li>
</ul>
<h3 id="4-12-复制文件常用方式"><a href="#4-12-复制文件常用方式" class="headerlink" title="4.12. 复制文件常用方式"></a>4.12. 复制文件常用方式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;a.java&quot;</span>));</span><br><span class="line">    BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;a.java&quot;</span>));</span><br><span class="line">    String line;</span><br><span class="line">    <span class="keyword">while</span>((line = br.readLine()) != <span class="keyword">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        bw.write(line);</span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bw.close();</span><br><span class="line">    br.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="五、IO流小结"><a href="#五、IO流小结" class="headerlink" title="五、IO流小结"></a>五、IO流小结</h2><h3 id="5-1-字节流"><a href="#5-1-字节流" class="headerlink" title="5.1. 字节流"></a>5.1. 字节流</h3><pre class="mermaid">graph TD
  a[字节流]
  b[字节输入流InputStream]
  c[字节输出流OutputStream]
  d[FileInputStream]
  e[BufferInputStream]
  f[FileOutputStream]
  g[BufferOutputStream]

  a-->b
  a-->c
  b-->d
  b-->e
  c-->f
  c-->g</pre>
<ul>
<li>字节流可以复制任意文件数据，有4种方式，一般采用字节缓冲流一次读写一个字节数组的方式</li>
</ul>
<h3 id="5-2-字符流"><a href="#5-2-字符流" class="headerlink" title="5.2. 字符流"></a>5.2. 字符流</h3><pre class="mermaid">graph TD
  a[字符流]
  b[字符输入流Reader]
  c[字符输出流Writer]
  d[InputStreamReader]
  e[BufferedReader]
  f[FileReader]
  g[OutputStreamWriter]
  h[BufferedWriter]
  i[FileWriter]

  a-->b
  a-->c
  b-->d
  b-->e
  d-->f
  c-->g
  c-->h
  g-->i</pre>
<ul>
<li><code>String readLine();</code><ul>
<li>一次读取一个字符串`</li>
</ul>
</li>
<li><code>void newLine();</code><ul>
<li>写一个换行符</li>
</ul>
</li>
<li><code>void write(String line);</code><ul>
<li>一次写一个字符串</li>
</ul>
</li>
<li>字符流只能复制文本数据，有5中方式，一般采用字符缓冲流的特有功能</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java相关</title>
    <url>/2021/05/16/Java%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="一、Java介绍"><a href="#一、Java介绍" class="headerlink" title="一、Java介绍"></a>一、Java介绍</h2><h3 id="1-1-Java语言的发展"><a href="#1-1-Java语言的发展" class="headerlink" title="1.1. Java语言的发展"></a>1.1. Java语言的发展</h3><ul>
<li>语言：人与人交流沟通的表达方式</li>
<li>Java语言：人与计算机之间进行信息交流沟通的一种特殊语言</li>
<li>Java语言是美国Sun公司在1995年推出的计算机语言</li>
<li>Java之父：詹姆斯·高斯林<code>James Gosling</code></li>
</ul>
<h3 id="1-2-Java语言跨平台原理"><a href="#1-2-Java语言跨平台原理" class="headerlink" title="1.2. Java语言跨平台原理"></a>1.2. Java语言跨平台原理</h3><ul>
<li>在需要运行Java应用程序的操作系统上，安装一个与操作系统对应的Java虚拟机（JVM Java Virtual Machine）即可</li>
</ul>
<h3 id="1-3-JRE（Java-Runtime-Environment）"><a href="#1-3-JRE（Java-Runtime-Environment）" class="headerlink" title="1.3. JRE（Java Runtime Environment）"></a>1.3. JRE（Java Runtime Environment）</h3><ul>
<li>是Java程序的运行环境，包含JVM和运行时所需要的核心类库。<br>想要运行一个已有的Java程序，只需要安装JRE即可</li>
</ul>
<h3 id="1-4-JDK（Java-Development-Kit）"><a href="#1-4-JDK（Java-Development-Kit）" class="headerlink" title="1.4. JDK（Java Development Kit）"></a>1.4. JDK（Java Development Kit）</h3><ul>
<li>是Java程序开发工具包，包含JRE和开发人员使用的工具<br>其中的开发工具：编译工具<code>javac.exe</code>和运行工具<code>java.exe</code></li>
<li>想要开发一个全新的Java程序，那么必须要安装JDK</li>
</ul>
<h4 id="1-4-1-JDK的安装目录"><a href="#1-4-1-JDK的安装目录" class="headerlink" title="1.4.1. JDK的安装目录"></a>1.4.1. JDK的安装目录</h4><ul>
<li><code>bin</code> 该路径下存放了JDK的给种工具命令，<code>javac</code>和<code>java</code>就放在这个目录中</li>
<li><code>conf</code> 该路径下存放了JDK的相关配置文件</li>
<li><code>include</code> 该路径下存放了一些平台指定的头文件</li>
<li><code>legal</code> 该路径下存放了JDK各模块的授权文档</li>
<li><code>lib</code> 该路径下存放了JDK工具的一些补充JAR包</li>
<li><code>其余文件</code> 为说明文档</li>
<li><code>JDK</code>的下载地址：<a href="http://www.oracle.com/">http://www.oracle.com</a></li>
</ul>
<h3 id="1-5-Path环境变量的配置"><a href="#1-5-Path环境变量的配置" class="headerlink" title="1.5. Path环境变量的配置"></a>1.5. Path环境变量的配置</h3><h4 id="1-5-1-为什么要配置Path环境变量"><a href="#1-5-1-为什么要配置Path环境变量" class="headerlink" title="1.5.1. 为什么要配置Path环境变量"></a>1.5.1. 为什么要配置Path环境变量</h4><ul>
<li>开发Java程序，需要使用JDK提供的开发工具，而这些工具在JDK的安装目录的<code>bin</code>目录下</li>
<li>为了在开发Java程序的时候，能够方便的使用javac和java这些命令，我们需要配置<code>Path</code>环境变量</li>
</ul>
<h4 id="1-5-2-如何配置Path环境变量"><a href="#1-5-2-如何配置Path环境变量" class="headerlink" title="1.5.2. 如何配置Path环境变量"></a>1.5.2. 如何配置Path环境变量</h4><ul>
<li>进入“计算机”的属性界面-&gt;点击高级系统设置-&gt;高级-&gt;环境变量-&gt;点击系统变量下的新建-&gt;变量名：<code>JAVA_HOME</code>，变量值：<code>JDK</code>的安装目录-&gt;确定-&gt;编辑<code>Path</code>变量-&gt;添加<code>%JAVA_HOME%/bin;</code>-&gt;确定</li>
</ul>
<h4 id="1-5-3-如何验证Path环境变量配置是否成功"><a href="#1-5-3-如何验证Path环境变量配置是否成功" class="headerlink" title="1.5.3. 如何验证Path环境变量配置是否成功"></a>1.5.3. 如何验证Path环境变量配置是否成功</h4><ul>
<li>打开<code>cmd</code>-&gt;输入<code>javac</code>或<code>java</code></li>
</ul>
<h3 id="1-6-Java程序开发运行流程"><a href="#1-6-Java程序开发运行流程" class="headerlink" title="1.6. Java程序开发运行流程"></a>1.6. Java程序开发运行流程</h3><ul>
<li>开发<code>Java</code>程序，需要三个步骤：编写程序、编译程序、运行程序</li>
</ul>
<h3 id="1-7-Java文件在cmd中的编译和运行"><a href="#1-7-Java文件在cmd中的编译和运行" class="headerlink" title="1.7. Java文件在cmd中的编译和运行"></a>1.7. Java文件在cmd中的编译和运行</h3><ol>
<li>打开命令提示符窗口，进入到<code>HelloWorld.java</code>所在的目录，输入指令编译和执行</li>
<li>编译：<code>javac 文件名.java</code>。 范例：<code>javac HelloWorld.java</code></li>
<li>执行：<code>java 类名</code>。 范例：<code>java HelloWorld</code></li>
</ol>
<h2 id="二、小知识点"><a href="#二、小知识点" class="headerlink" title="二、小知识点"></a>二、小知识点</h2><h3 id="2-1-注释"><a href="#2-1-注释" class="headerlink" title="2.1. 注释"></a>2.1. 注释</h3><h4 id="2-1-1-单行注释"><a href="#2-1-1-单行注释" class="headerlink" title="2.1.1. 单行注释"></a>2.1.1. 单行注释</h4><ul>
<li>格式：//注释信息</li>
</ul>
<h4 id="2-1-2-多行注释"><a href="#2-1-2-多行注释" class="headerlink" title="2.1.2. 多行注释"></a>2.1.2. 多行注释</h4><ul>
<li>格式：/<em>注释信息</em>/</li>
</ul>
<h4 id="2-1-3-文档注释"><a href="#2-1-3-文档注释" class="headerlink" title="2.1.3. 文档注释"></a>2.1.3. 文档注释</h4><ul>
<li>格式：/*<em>注释信息</em>/</li>
</ul>
<h3 id="2-3-main方法"><a href="#2-3-main方法" class="headerlink" title="2.3. main方法"></a>2.3. main方法</h3><ul>
<li>main方法是程序的入口方法，代码的执行是从main方法开始的</li>
</ul>
<h3 id="2-4-关键字"><a href="#2-4-关键字" class="headerlink" title="2.4. 关键字"></a>2.4. 关键字</h3><h4 id="2-4-1-概述"><a href="#2-4-1-概述" class="headerlink" title="2.4.1. 概述"></a>2.4.1. 概述</h4><ul>
<li>关键字就是被java语言赋予了特定含义的单词。</li>
</ul>
<h4 id="2-4-2-特点"><a href="#2-4-2-特点" class="headerlink" title="2.4.2. 特点"></a>2.4.2. 特点</h4><ul>
<li>关键字的字母全部是小写的</li>
<li>常用的代码编辑器，针对关键字有特殊的颜色标记，非常直观</li>
</ul>
<h3 id="2-5-数据输入"><a href="#2-5-数据输入" class="headerlink" title="2.5. 数据输入"></a>2.5. 数据输入</h3><ul>
<li>导包<ul>
<li><code>import java.util.Scanner;</code><ul>
<li>导包的动作必须出现在类定义的上边</li>
</ul>
</li>
</ul>
</li>
<li>创建对象<ul>
<li><code>Scanner sc = new Scanner(System.in);</code><ul>
<li>只有sc是变量名，可以变，其他的都不允许变</li>
</ul>
</li>
</ul>
</li>
<li>接受数据<ul>
<li><code>int i = sc.nextInt();</code><ul>
<li>只有i是变量名，可以变，其他的都不允许变</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-6-Random"><a href="#2-6-Random" class="headerlink" title="2.6. Random"></a>2.6. Random</h3><h4 id="2-6-1-作用"><a href="#2-6-1-作用" class="headerlink" title="2.6.1. 作用"></a>2.6.1. 作用</h4><ul>
<li>用于产生一个随机数</li>
</ul>
<h4 id="2-6-2-使用步骤"><a href="#2-6-2-使用步骤" class="headerlink" title="2.6.2. 使用步骤"></a>2.6.2. 使用步骤</h4><ul>
<li>导包<ul>
<li><code>import java.uti.Random;</code></li>
</ul>
</li>
<li>创建对象<ul>
<li><code>Random r = new Random();</code></li>
</ul>
</li>
<li>获取随机数<ul>
<li><code>int number = r.nextInt(10);获取数据的范围：（0，10）包括0，不包括10</code></li>
</ul>
</li>
</ul>
<h3 id="2-7-内存分配"><a href="#2-7-内存分配" class="headerlink" title="2.7. 内存分配"></a>2.7. 内存分配</h3><h4 id="2-7-1-概述"><a href="#2-7-1-概述" class="headerlink" title="2.7.1. 概述"></a>2.7.1. 概述</h4><ul>
<li>Java程序在运行时，需要在内存中分配空间，为了提高运算效率，就对空间进行了不同区域的划分，因为每一片区域都有特定的处理数据方式和内存管理方式</li>
</ul>
<h4 id="2-7-2-栈内存"><a href="#2-7-2-栈内存" class="headerlink" title="2.7.2. 栈内存"></a>2.7.2. 栈内存</h4><ul>
<li>存储局部变量,使用完毕，立即消失。</li>
<li>方法也是加载到栈内存，调用完毕后，从栈内存中消失</li>
</ul>
<h4 id="2-7-3-堆内存"><a href="#2-7-3-堆内存" class="headerlink" title="2.7.3. 堆内存"></a>2.7.3. 堆内存</h4><ul>
<li>存储new出来的内容（实体、对象），每一个new出来的东西都有一个地址值，使用完毕，会在垃圾回收器空闲时被回收</li>
</ul>
<h3 id="2-8-Debug"><a href="#2-8-Debug" class="headerlink" title="2.8. Debug"></a>2.8. Debug</h3><h4 id="2-8-1-概述"><a href="#2-8-1-概述" class="headerlink" title="2.8.1. 概述"></a>2.8.1. 概述</h4><ul>
<li>是供程序员使用的程序调试工具，它可以用于查看程序的执行流程，也可以用于追踪程序执行过程来调试程序</li>
<li>Debug调试，又被称为断点调试，断点其实是一个标记，告诉我们从哪里开始查看</li>
<li>如果数据来自于键盘输入，一定要记住输入数据，不然就不能继续往下查看了</li>
</ul>
<h4 id="2-8-2-Debug操作流程"><a href="#2-8-2-Debug操作流程" class="headerlink" title="2.8.2. Debug操作流程"></a>2.8.2. Debug操作流程</h4><ul>
<li>加断点：选择要设置断点的代码行，在行号的区域后面单机鼠标左键即可</li>
</ul>
<h4 id="2-8-3-如何运行加了断点的程序"><a href="#2-8-3-如何运行加了断点的程序" class="headerlink" title="2.8.3. 如何运行加了断点的程序"></a>2.8.3. 如何运行加了断点的程序</h4><ul>
<li>在代码区域右键Debug执行</li>
<li>观察：在<code>Debugger</code>窗口中，看代码执行到哪里了，看代码执行过程中变量的变化</li>
<li>在<code>Console</code>窗口中，看程序执行过程中的结果展示</li>
<li>往下执行：点<code>Step Into（F7）</code>这个箭头，也可以直接按<code>F7</code></li>
<li>结束：点<code>Stop</code>结束</li>
</ul>
<h4 id="2-8-4-如何删除断点"><a href="#2-8-4-如何删除断点" class="headerlink" title="2.8.4. 如何删除断点"></a>2.8.4. 如何删除断点</h4><ul>
<li>选择要删除的断点，单机鼠标左键即可</li>
</ul>
<h3 id="2-9-API"><a href="#2-9-API" class="headerlink" title="2.9. API"></a>2.9. API</h3><ul>
<li>应用程序编程接口</li>
<li>Java API指的就是JDK中提供的各种功能的Java类，这些类将底层的实现封装了起来，我们不需要关心这些类是如何实现的，只需要学习这些类如何使用即可。我们可以通过帮助文档来学习这些API如何使用</li>
</ul>
<h3 id="2-10-缩进"><a href="#2-10-缩进" class="headerlink" title="2.10. 缩进"></a>2.10. 缩进</h3><ul>
<li>\t：相对于tab键的功能</li>
</ul>
<h3 id="2-11-包"><a href="#2-11-包" class="headerlink" title="2.11. 包"></a>2.11. 包</h3><h4 id="2-11-1-概述"><a href="#2-11-1-概述" class="headerlink" title="2.11.1. 概述"></a>2.11.1. 概述</h4><ul>
<li>实际上就是文件夹</li>
</ul>
<h4 id="2-11-2-作用"><a href="#2-11-2-作用" class="headerlink" title="2.11.2. 作用"></a>2.11.2. 作用</h4><ul>
<li>对类进行分类管理</li>
</ul>
<h4 id="2-11-3-包的定义格式"><a href="#2-11-3-包的定义格式" class="headerlink" title="2.11.3. 包的定义格式"></a>2.11.3. 包的定义格式</h4><ul>
<li>格式：<code>package 包名;</code> （多级包用“.”分开）</li>
<li>范例：`package com.abc;``</li>
</ul>
<h4 id="2-11-4-带包的Java类编译和执行"><a href="#2-11-4-带包的Java类编译和执行" class="headerlink" title="2.11.4. 带包的Java类编译和执行"></a>2.11.4. 带包的Java类编译和执行</h4><ul>
<li>手动建包<ul>
<li>(1)按照以前的格式编译<code>java</code>文件<code>java HelloWorld.java</code></li>
<li>(2)手动创建包 在E盘建立文件夹<code>com</code>，然后在<code>com</code>下建立文件夹<code>abc</code></li>
<li>(3)把<code>class</code>文件放到包的最里面 把<code>HelloWorld.class</code>文件放到<code>com</code>下的<code>abc</code>这个文件夹下</li>
<li>(4)带包执行 <code>java com.abc.HelloWorld</code></li>
</ul>
</li>
<li>自动建包<ul>
<li><code>javac -d.HelloWorld.java</code></li>
<li><code>java com.abc.HelloWorld</code></li>
</ul>
</li>
</ul>
<h4 id="2-11-5-导包"><a href="#2-11-5-导包" class="headerlink" title="2.11.5. 导包"></a>2.11.5. 导包</h4><ul>
<li>概述<ul>
<li>使用不同包下的类时，使用的时候要写类的全路径，写起来太麻烦了</li>
<li>为了简化带包的操作，java就提供了导包的功能</li>
</ul>
</li>
<li>导包的格式<ul>
<li>格式：<code>import 包名;</code></li>
<li>范例：<code>import cn.abc.Teacher;</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Emmet</title>
    <url>/2021/05/15/Emmet/</url>
    <content><![CDATA[<h2 id="一、Emmet简介"><a href="#一、Emmet简介" class="headerlink" title="一、Emmet简介"></a>一、Emmet简介</h2><ul>
<li><code>Emmet</code>能够快速生成<code>HTML</code>结构和<code>CSS</code>样式语法，提高了编写速度</li>
</ul>
<a id="more"></a>
<h2 id="二、快速生成HTML结构语法"><a href="#二、快速生成HTML结构语法" class="headerlink" title="二、快速生成HTML结构语法"></a>二、快速生成HTML结构语法</h2><h3 id="2-1-生成标签"><a href="#2-1-生成标签" class="headerlink" title="2.1. 生成标签"></a>2.1. 生成标签</h3><ul>
<li>直接输入标签名然后按<code>tab</code>键<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tab</span>&gt;</span><span class="tag">&lt;/<span class="name">tab</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-2-生成多个相同标签"><a href="#2-2-生成多个相同标签" class="headerlink" title="2.2. 生成多个相同标签"></a>2.2. 生成多个相同标签</h3><ul>
<li>使用<code>*</code>符号</li>
<li>例如生成3个<code>div</code>标签，输入<code>div*3</code>然后按<code>tab</code>键<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-3-生成有父子级关系的标签"><a href="#2-3-生成有父子级关系的标签" class="headerlink" title="2.3. 生成有父子级关系的标签"></a>2.3. 生成有父子级关系的标签</h3><ul>
<li>使用<code>&gt;</code>符号</li>
<li>例如输入<code>div&gt;p</code>，按<code>tab</code>键，<code>div</code>为父标签，<code>p</code>为子标签<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-4-生成有兄弟关系的标签"><a href="#2-4-生成有兄弟关系的标签" class="headerlink" title="2.4. 生成有兄弟关系的标签"></a>2.4. 生成有兄弟关系的标签</h3><ul>
<li>使用<code>+</code>符号</li>
<li>例如输入<code>div+p</code>，按<code>tab</code>键<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-5-生成带有类名的标签"><a href="#2-5-生成带有类名的标签" class="headerlink" title="2.5. 生成带有类名的标签"></a>2.5. 生成带有类名的标签</h3><ul>
<li>使用<code>.</code>符号</li>
<li>例如输入<code>p.phd</code>，按<code>tab</code>键<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;phd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-6-生成带有id的标签"><a href="#2-6-生成带有id的标签" class="headerlink" title="2.6. 生成带有id的标签"></a>2.6. 生成带有id的标签</h3><ul>
<li>使用<code>#</code>符号</li>
<li>例如输入<code>p#phd</code>，按<code>tab</code>键<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;phd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-7-生成带有类名或id顺序的多个相同标签"><a href="#2-7-生成带有类名或id顺序的多个相同标签" class="headerlink" title="2.7. 生成带有类名或id顺序的多个相同标签"></a>2.7. 生成带有类名或id顺序的多个相同标签</h3><ul>
<li><p>使用<code>$</code>符号</p>
</li>
<li><p>例如输入<code>p.phd$*3</code>，按<code>tab</code>键，<code>$</code>表示序号</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;phd1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;phd2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;phd3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>例如输入<code>p#phd$*3</code>，按<code>tab</code>键，<code>$</code>表示序号</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;phd1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;phd2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;phd3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="2-8-生成带有内容的标签"><a href="#2-8-生成带有内容的标签" class="headerlink" title="2.8. 生成带有内容的标签"></a>2.8. 生成带有内容的标签</h3><ul>
<li>使用<code>&#123;&#125;</code>符号</li>
<li>例如输入<code>p&#123;无所谓&#125;</code>，按<code>tab</code>键<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>无所谓<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>例如输入<code>p&#123;无所谓$&#125;*3</code>，按<code>tab</code>键<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>无所谓1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>无所谓2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>无所谓3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="三、快速生成CSS样式语法"><a href="#三、快速生成CSS样式语法" class="headerlink" title="三、快速生成CSS样式语法"></a>三、快速生成CSS样式语法</h2><h3 id="3-1-直接输入每个单词的首字母，然后按tab键"><a href="#3-1-直接输入每个单词的首字母，然后按tab键" class="headerlink" title="3.1. 直接输入每个单词的首字母，然后按tab键"></a>3.1. 直接输入每个单词的首字母，然后按<code>tab</code>键</h3><ul>
<li>例如输入<code>w</code>，按<code>tab</code>键<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">width: ;</span><br></pre></td></tr></table></figure></li>
<li>例如输入<code>ti</code>，按<code>tab</code>键<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">text-indent: ;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-2-可以把值也一起输入"><a href="#3-2-可以把值也一起输入" class="headerlink" title="3.2. 可以把值也一起输入"></a>3.2. 可以把值也一起输入</h3><ul>
<li>可以不给数值加上单位，数值不加单位的默认单位为<code>px</code></li>
<li>例如输入<code>w100</code>或<code>w100px</code>，按<code>tab</code>键<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">width: 100px;</span><br></pre></td></tr></table></figure></li>
<li>例如输入<code>ti2</code>，按<code>tab</code>键<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">text-indent: 2px;</span><br></pre></td></tr></table></figure></li>
<li>例如输入<code>tac</code>，按<code>tab</code>键<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">text-align: center;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<!--more-->
]]></content>
      <categories>
        <category>技术</category>
        <category>WEB开发</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之String</title>
    <url>/2021/04/25/Java%E4%B9%8BString/</url>
    <content><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><ul>
<li>String类在java.lang包下，所以使用的时候不需要导包</li>
<li>String类代表字符串，Java程序中的所有字符串文字都被实现为此类的实例，即Java程序中所有的双引号字符串，都是String类的对象。</li>
</ul>
<h2 id="二、字符串的特点"><a href="#二、字符串的特点" class="headerlink" title="二、字符串的特点"></a>二、字符串的特点</h2><ul>
<li>字符串不可变，它们的值在创建后不能被更改。</li>
<li>虽然String的值是不可变的，但是它们可以被共享。</li>
<li>字符串效果上相当于字符串数组（char[]），但是底层原理是字节数组（byte[]）。</li>
</ul>
<h2 id="三、String构造方法"><a href="#三、String构造方法" class="headerlink" title="三、String构造方法"></a>三、String构造方法</h2><ul>
<li><code>public String()</code><ul>
<li>创建一个空白字符串对象，不含有任何内容</li>
</ul>
</li>
<li><code>public String(char[] chs)</code><ul>
<li>根据字符数组的内容，来创建字符串对象</li>
</ul>
</li>
<li><code>public String(byte[] bys)</code><ul>
<li>根据字节数组的内容，来创建字符串对象</li>
</ul>
</li>
<li><code>String s = &quot;abc&quot;;</code><ul>
<li>直接赋值的方式创建字符串对象，内容就是abc</li>
</ul>
</li>
<li>范例<ul>
<li>推荐使用直接赋值的方式得到字符串对象<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//public String();创建一个空白字符串对象，不含任何内容</span></span><br><span class="line">String s1 = <span class="keyword">new</span> String();</span><br><span class="line">System.out.println(<span class="string">&quot;s1:&quot;</span> + s1);</span><br><span class="line"><span class="comment">//结果为：s1:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//public String(char[] chs);根据字符数组的内容，来创建字符串对象</span></span><br><span class="line"><span class="keyword">char</span>[] chs = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">String s2 = <span class="keyword">new</span> String(chs);</span><br><span class="line">System.out.println(<span class="string">&quot;s2:&quot;</span> + s2);</span><br><span class="line"><span class="comment">//结果为：s2:abc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//public String(byte[] bys);根据字节数组的内容，来创建字符串对象</span></span><br><span class="line"><span class="keyword">byte</span>[] bys = &#123;<span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>&#125;;</span><br><span class="line">String s3 = <span class="keyword">new</span> String(bys);</span><br><span class="line">System.out.println(<span class="string">&quot;s3:&quot;</span> + s3);</span><br><span class="line"><span class="comment">//结果为：s3:abc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//String s = &quot;abc&quot;;直接赋值的方式创建字符串对象，内容就是abc</span></span><br><span class="line">String s4 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;s4:&quot;</span> + s4);</span><br><span class="line"><span class="comment">//结果为：s4:abc</span></span><br></pre></td></tr></table></figure>
<h2 id="四、String对象的特点"><a href="#四、String对象的特点" class="headerlink" title="四、String对象的特点"></a>四、String对象的特点</h2></li>
</ul>
</li>
<li>通过new创建的字符串对象，每一次new都会申请一个内存空间，虽然内容相同，但是地址值不同。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span>[] chs = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">String s1 = <span class="keyword">new</span> String(chs);</span><br><span class="line">String s2 = <span class="keyword">new</span> String(chs);</span><br></pre></td></tr></table></figure>
<ul>
<li>上面的代码中，JVM会首先创建一个字符数组，然后每一次new的时候都会有一个新的地址，只不过s1和s2参考的字符串内容是相同的。</li>
</ul>
</li>
<li>以<code>&quot;&quot;</code>方式给出的字符串，只要字符序列相同（顺序和大小写），无论在程序代码中出现几次，JVM都只会建立一个String对象，并在字符串池中维护。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s3 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">String s4 = <span class="string">&quot;abc&quot;</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>在上面的代码中，针对第一行代码，JVM会建立一个String对象放在字符串池中，并给s3参考；第二行则让s4直接参考字符串池中的String对象，也就是说它们本质上是同一个对象。</li>
</ul>
</li>
</ul>
<h2 id="五、字符串的比较"><a href="#五、字符串的比较" class="headerlink" title="五、字符串的比较"></a>五、字符串的比较</h2><ul>
<li>使用==做比较</li>
<li>基本类型：比较的是数据值是否相同</li>
<li>引用类型：比较的是地址值是否相同</li>
<li>字符串是对象，它比较内容是否相同，是通过equals()方法来实现的。</li>
<li><code>public boolean eauals(Object anObject)</code>将此字符串与指定对象进行比较，由于我们比较的是字符串对象，所以参数直接传递一个字符串。</li>
</ul>
<h2 id="六、StringBuilder"><a href="#六、StringBuilder" class="headerlink" title="六、StringBuilder"></a>六、StringBuilder</h2><h3 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1. 概述"></a>6.1. 概述</h3><ul>
<li>如果对字符串进行拼接操作，每次拼接，都会构建一个新的String对象，既耗时又浪费内存空间，而这种操作还不可避免。我们可以通过Java提供的StringBuilder类来解决这个问题。</li>
<li>StringBuilder是一个可变的字符串类，我们可以把它看成是一个容器，这里的可变指的是StringBuilder对象中的内容是可变的。</li>
</ul>
<h3 id="6-2-String和StringBuilder的区别"><a href="#6-2-String和StringBuilder的区别" class="headerlink" title="6.2. String和StringBuilder的区别"></a>6.2. String和StringBuilder的区别</h3><ul>
<li><code>String</code>内容是不可变的</li>
<li><code>StringBuilder</code>内容是可变的</li>
</ul>
<h3 id="6-3-StringBuilder的构造方法"><a href="#6-3-StringBuilder的构造方法" class="headerlink" title="6.3. StringBuilder的构造方法"></a>6.3. StringBuilder的构造方法</h3><ul>
<li><code>public StringBuilder()</code><ul>
<li>创建一个空白可变字符串对象，不含有任何内容</li>
</ul>
</li>
<li><code>public StringBuilder(String str)</code><ul>
<li>根据字符串的内容，来创建可变字符串对象</li>
</ul>
</li>
</ul>
<h3 id="6-4-StringBuilder的添加和反转方法"><a href="#6-4-StringBuilder的添加和反转方法" class="headerlink" title="6.4. StringBuilder的添加和反转方法"></a>6.4. StringBuilder的添加和反转方法</h3><ul>
<li><code>public StringBuilder append(任意类型)</code><ul>
<li>添加数据，并返回对象本身</li>
</ul>
</li>
<li><code>public StringBuilder reverse()</code><ul>
<li>返回相反的字符序列，例如”abc”反转之后为”cba”</li>
</ul>
</li>
</ul>
<h3 id="6-5-StringBuilder和String相互转换"><a href="#6-5-StringBuilder和String相互转换" class="headerlink" title="6.5. StringBuilder和String相互转换"></a>6.5. StringBuilder和String相互转换</h3><h4 id="6-5-1-StringBuilder转换为String"><a href="#6-5-1-StringBuilder转换为String" class="headerlink" title="6.5.1. StringBuilder转换为String"></a>6.5.1. StringBuilder转换为String</h4><ul>
<li><code>public String toString()</code><ul>
<li>通过toString()就可以实现把StringBuilder转换为String。</li>
</ul>
</li>
</ul>
<h4 id="6-5-2-String转换为StringBuilder"><a href="#6-5-2-String转换为StringBuilder" class="headerlink" title="6.5.2. String转换为StringBuilder"></a>6.5.2. String转换为StringBuilder</h4><ul>
<li><code>public StringBuilder(String s)</code><ul>
<li>通过构造方法就可以实现把String转换为StringBuilder。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之模块化</title>
    <url>/2021/04/25/Java%E4%B9%8B%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
    <content><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><ul>
<li>Java语言随着这些年的发展已经成为了一门影响深远的编程语言，无数平台，系统都采用Java语言编写，但是，伴随着发展，Java也越来越庞大，逐渐发展成为一门“臃肿”的语言，而且，无论是运行一个大型的软件系统，还是运行一个小的程序，即时程序只需要使用Java的部分核心功能，JVM也要加载整个JRE环节。为了给Java“廋身”，让Java实现轻量化，Java9正式的推出了模块化系统，Java被拆分为N多个模块，并允许Java程序可以根据需要选择加载程序必须的Java模块，这样就可以让Java以轻量化的方式来运行。</li>
<li>其实，Java7的时候已经提出了模块化的概念，但由于其过于复杂，Java7、Java8都一直未能真正推出，直到Java9才真正成熟起来。对于Java语言来说，模块化系统是一次真正的自我革新，这种革新使得“古老而庞大”的Java语言重新焕发年轻的活力。</li>
</ul>
<pre class="mermaid">graph TD
  subgraph 项目Project
    subgraph 模块1
      subgraph 包1
        a5[1.java]
        a6[2.java]
        a5---a6
      end
      subgraph 包2
        a1[...]
        a2[...]
        a1---a2
      end
    end
    subgraph 模块2
      d[包1]
      h[...]
      d---h
    end
    subgraph 模块3
      f[包2]
      i[...]
      f---i
    end
  end</pre>


<h2 id="二、模块的基本使用步骤"><a href="#二、模块的基本使用步骤" class="headerlink" title="二、模块的基本使用步骤"></a>二、模块的基本使用步骤</h2><ul>
<li>(1)创建模块<ul>
<li>为了体现模块的使用，我们创建2个模块，一个是myOne，一个是myTwo</li>
</ul>
</li>
<li>(2)在模块的src目录下新建一个名为module-info.java的描述性文件，该文件专门定义模块名，访问权限，模块依赖等信息<ul>
<li>描述性文件中使用模块导出和模块依赖来进行配置并使用</li>
</ul>
</li>
<li>(3)模块中所有未导出的包都是模块私有的，他们是不能在模块之外被访问的<ul>
<li>在myOne这个模块下的描述性文件中配置模块导出</li>
<li>模块导出格式：exports 包名;<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> myOne</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">exports</span> com.itheima;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>(4)一个模块要访问其他的模块，必须明确指定依赖哪些模块，未明确指定依赖的模块不能访问<ul>
<li>在myTwo这个模块下的描述性文件中配置模块依赖</li>
<li>模块依赖格式：requires 模块名;</li>
<li>然后再使用import</li>
<li>注意：写模块名报错，需要按下Alt+Enter提示，然后选择模块依赖<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> myTwo</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">requires</span> myOne;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="三、模块服务的使用"><a href="#三、模块服务的使用" class="headerlink" title="三、模块服务的使用"></a>三、模块服务的使用</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1. 概述"></a>3.1. 概述</h3><ul>
<li>服务：从Java6开始，Java提供了一种服务机制，允许服务提供者和服务使用者之间完成解耦</li>
<li>简单的说，就是服务使用者只面向接口编程，但不清楚服务提供者的实现类</li>
<li>Java9的模块化系统则进一步的简化了Java的服务机制，Java9允许将服务接口定义在一个模块中，并使用uses语句来声明该服务接口，然后针对该服务接口提供不同的服务实现类，这些服务实现类可以分布在不同的模块中，服务实现模块则使用provides语句为服务接口指定实现类</li>
<li>服务使用者只需要面向接口编程即可</li>
</ul>
<h3 id="3-2-模块服务的使用步骤"><a href="#3-2-模块服务的使用步骤" class="headerlink" title="3.2. 模块服务的使用步骤"></a>3.2. 模块服务的使用步骤</h3><ul>
<li>(1)在myOne模块下创建一个包com.itheima，在该包下提供一个接口，接口中定义一个抽象方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">service</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>(2)在com.itheima包下创建一个包impl，在该包下提供接口的两个实现类Itheima和Czxy</li>
<li>(3)在myOne这个模块下的描述性文件中添加如下配置<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itheima.MyService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.impl.Itheima;</span><br><span class="line"><span class="keyword">module</span> myOne</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">exports</span> com.itheima;<span class="comment">//模块导出</span></span><br><span class="line">    provides MyService with Itheima;<span class="comment">//服务提供，指定MyService的服务实现类是Itheima</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>(4)在myTwo这个模块下的描述性文件中添加如下配置<ul>
<li>声明服务接口：uses MyService;<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itheima.MyService;</span><br><span class="line"><span class="keyword">module</span> myTwo</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">requires</span> myOne;</span><br><span class="line">    uses MyService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>(5)在myTwo这个模块的类中使用MyService接口提供的服务<ul>
<li>ServiceLoader：一种加载服务实现的工具<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itheima.MyService;</span><br><span class="line"><span class="keyword">import</span> java.util.ServiceLoader;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//加载服务</span></span><br><span class="line">        ServiceLoader&lt;MyService&gt; myServices = myServiceLoader.Load(MyService.class);</span><br><span class="line">        <span class="comment">//遍历服务</span></span><br><span class="line">        <span class="keyword">for</span>(MyService my : myServices)</span><br><span class="line">        &#123;</span><br><span class="line">            my.service();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之File</title>
    <url>/2021/04/25/Java%E4%B9%8BFile/</url>
    <content><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><ul>
<li>File是文件和目录路径名的抽象表示。</li>
<li>文件和目录是可以通过File封装成对象的。</li>
<li>对于File而言，其封装的并不是一个正真存在的文件，仅仅是一个路径名而已，它可以是存在的，也可以是不存在的，将来是要通过具体的操作把这个路径的内容转换为具体存在的。</li>
</ul>
<table>
<thead>
<tr>
<th align="center">方法名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">File(String pathname)</td>
<td align="center"><div style="width:300px">通过将给定的路径名字符串转换为抽象路径名来创建新的File实例</div></td>
</tr>
<tr>
<td align="center">File(String parent, String child)</td>
<td align="center"><div style="width:300px">从父路径名字符串和子路径名字符串创建新的File实例</div></td>
</tr>
<tr>
<td align="center">File(File parent, String child)</td>
<td align="center"><div style="width:300px">从父抽象路径名和子路径名字符串创建新的File实例</div></td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1</span></span><br><span class="line">File f1 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\itcast\\java.txt&quot;</span>);</span><br><span class="line"><span class="comment">//2</span></span><br><span class="line">File f2 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\itcast&quot;</span>, <span class="string">&quot;java.txt&quot;</span>);</span><br><span class="line"><span class="comment">//3</span></span><br><span class="line">File f3 = <span class="keyword">new</span> File(<span class="string">&quot;E:\\itcast&quot;</span>);</span><br><span class="line">File f4 = <span class="keyword">new</span> File(f3, <span class="string">&quot;java.txt&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="二、File类创建功能"><a href="#二、File类创建功能" class="headerlink" title="二、File类创建功能"></a>二、File类创建功能</h2><table>
<thead>
<tr>
<th align="center">方法名</th>
<th align="center">说明</th>
<th align="center">注意</th>
</tr>
</thead>
<tbody><tr>
<td align="center">public boolean createNewFile()</td>
<td align="center"><div style="width:300px">当具有该名称的文件不存在时，创建一个由该抽象路径名命名的新空文件</div></td>
<td align="center"><div style="width:300px">如果文件不存在，就创建文件，并返回true，如果文件存在，就不创建文件，并返回false</div></td>
</tr>
<tr>
<td align="center">public boolean mkdir()</td>
<td align="center"><div style="width:300px">创建由此抽象路径名命名的目录，创建一个目录</td>
<td align="center"><div style="width:300px">如果目录不存在，就创建文件，并返回true，如果目录存在，就不创建文件，并返回false</td>
</tr>
<tr>
<td align="center">public boolean mkdirs()</div></td>
<td align="center"><div style="width:300px">创建由此抽象路径名命名的目录，包括任何必需但不存在的父目录，即创建多级目录</td>
<td align="center"><div style="width:300px">如果目录不存在，就创建文件，并返回true，如果目录存在，就不创建文件，并返回false</div></td>
</tr>
</tbody></table>
<ul>
<li>在一个目录（文件夹）中创建文件时，需要先创建该文件夹，否则找不到路径</li>
</ul>
<h2 id="三、File类判断和获取功能"><a href="#三、File类判断和获取功能" class="headerlink" title="三、File类判断和获取功能"></a>三、File类判断和获取功能</h2><table>
<thead>
<tr>
<th align="center">方法名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">public boolean isDirectory()</td>
<td align="center"><div style="width:300px">测试此抽象路径名表示的File是否为目录</div></td>
</tr>
<tr>
<td align="center">public boolean isFile()</td>
<td align="center"><div style="width:300px">测试此抽象路径名表示的File是否为文件</div></td>
</tr>
<tr>
<td align="center">public boolean exists()</td>
<td align="center"><div style="width:300px">测试此抽象路径名表示的File是否存在</div></td>
</tr>
<tr>
<td align="center">public String getAbsolutePath()</td>
<td align="center"><div style="width:300px">返回此抽象路径名的绝对路径名字符串</div></td>
</tr>
<tr>
<td align="center">public String getPath()</td>
<td align="center"><div style="width:300px">将此抽象路径名转换为路径名字符串</div></td>
</tr>
<tr>
<td align="center">public String getName()</td>
<td align="center"><div style="width:300px">返回由此抽象路径名表示的文件或目录的名称</div></td>
</tr>
<tr>
<td align="center">public String[] list()</td>
<td align="center"><div style="width:300px">返回此抽象路径名表示的目录中的文件和目录的名称字符串数组</div></td>
</tr>
<tr>
<td align="center">public File[] listFiles()</td>
<td align="center"><div style="width:300px">返回此抽象路径名表示的目录中的文件和目录的File对象数组</div></td>
</tr>
</tbody></table>
<h2 id="四、File类删除功能"><a href="#四、File类删除功能" class="headerlink" title="四、File类删除功能"></a>四、File类删除功能</h2><table>
<thead>
<tr>
<th align="center">方法名</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">public boolean delete()</td>
<td align="center">删除由此抽象路径名表示的文件或目录</td>
</tr>
</tbody></table>
<ul>
<li>删除目录的注意事项<ul>
<li>如果一个目录中有内容（目录、文件），不能直接删除，应该先删除目录中的内容，最后才能删除目录。</li>
</ul>
</li>
</ul>
<h2 id="五、绝对路径和相对路径的区别"><a href="#五、绝对路径和相对路径的区别" class="headerlink" title="五、绝对路径和相对路径的区别"></a>五、绝对路径和相对路径的区别</h2><ul>
<li>绝对路径：完整的路径名，不需要任何其他信息就可以定位它所表示的文件<ul>
<li>例如：<code>E:\\itcast\\java.txt</code></li>
</ul>
</li>
<li>相对路径：必须使用取自其他路径名的信息进行解释<ul>
<li>例如：<code>myfile\\java.txt</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之数据类型</title>
    <url>/2021/04/25/Java%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><ul>
<li>java语言是强类型语言，对于每一种数据都给出了明确的数据类型，不同的数据类型也分配了不同的内存空间，所以它们表示的数据大小也是不一样的。</li>
<li>数据类型<ul>
<li>基本数据类型<ul>
<li>数值型<ul>
<li>整数<code>byte,short,int,long</code></li>
<li>浮点数<code>float,double</code></li>
<li>字符<code>char</code></li>
</ul>
</li>
<li>非数值型<ul>
<li>布尔<code>boolean</code></li>
</ul>
</li>
</ul>
</li>
<li>引用数据类型<ul>
<li>类<code>class</code></li>
<li>接口<code>interface</code></li>
<li>数值<code>[]</code><a id="more"></a>


</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="二、数据类型内存占用和取值范围"><a href="#二、数据类型内存占用和取值范围" class="headerlink" title="二、数据类型内存占用和取值范围"></a>二、数据类型内存占用和取值范围</h2><h3 id="2-1-整数"><a href="#2-1-整数" class="headerlink" title="2.1. 整数"></a>2.1. 整数</h3><ul>
<li>byte<ul>
<li>内存占用：<code>1</code></li>
<li>取值范围：<code>-128~127</code></li>
</ul>
</li>
<li>short<ul>
<li>内存占用：<code>2</code></li>
<li>取值范围：<code>-32768~32767</code></li>
</ul>
</li>
<li>int(默认)<ul>
<li>内存占用：<code>4</code></li>
<li>取值范围：<code>(-2的31次方~2的31次方)-1</code></li>
</ul>
</li>
<li>long<ul>
<li>内存占用：<code>8</code></li>
<li>取值范围：<code>(-2的63次方~2的63次方)-1</code></li>
</ul>
</li>
</ul>
<h3 id="2-2-浮点数"><a href="#2-2-浮点数" class="headerlink" title="2.2. 浮点数"></a>2.2. 浮点数</h3><ul>
<li>float<ul>
<li>内存占用：<code>4</code></li>
<li>取值范围<ul>
<li>负数：<code>-3.402823E+38~-1.401298E-45</code></li>
<li>正数：<code>1.401298E-45~3.402823E+38</code></li>
</ul>
</li>
</ul>
</li>
<li>double(默认)<ul>
<li>内存占用：<code>8</code></li>
<li>取值范围<ul>
<li>负数：<code>-1.797693E+308~-4.9000000E-324</code></li>
<li>正数：<code>4.9000000E-324~1.797693E+308</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-3-字符"><a href="#2-3-字符" class="headerlink" title="2.3. 字符"></a>2.3. 字符</h3><ul>
<li>char<ul>
<li>内存占用：<code>2</code></li>
<li>取值范围：<code>0~65535</code></li>
</ul>
</li>
</ul>
<h3 id="2-4-布尔"><a href="#2-4-布尔" class="headerlink" title="2.4. 布尔"></a>2.4. 布尔</h3><ul>
<li>boolean<ul>
<li>内存占用：<code>1</code></li>
<li>取值范围：<code>true,false</code></li>
</ul>
</li>
</ul>
<h3 id="2-5-E"><a href="#2-5-E" class="headerlink" title="2.5. E"></a>2.5. E</h3><ul>
<li><code>E+99</code>表示：乘以10的99次方</li>
<li><code>E-99</code>表示：乘以10的-99次方</li>
</ul>
<!--more-->
]]></content>
      <categories>
        <category>技术</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之异常</title>
    <url>/2021/04/25/Java%E4%B9%8B%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><ul>
<li>异常（Exception）就是程序出现了不正常的情况</li>
</ul>
<h2 id="二、异常体系"><a href="#二、异常体系" class="headerlink" title="二、异常体系"></a>二、异常体系</h2><pre class="mermaid">graph TD
  a(Throwable)
  b(Error)
  c(Exception)
  d(RuntimeException)
  e(非RuntimeException)
  a-->b
  a-->c
  c-->d
  c-->e</pre>

<ul>
<li><code>Error</code>：严重问题，不需要处理</li>
<li><code>Exception</code>：称为异常类，它表示程序本身可以处理的问题<ul>
<li><code>RuntimeException</code>：在编译期是不检查的，出现问题后，需要我们回来修改代码。</li>
<li><code>非RuntimeException</code>：编译期就必须处理的，否则程序不能通过编译，就更不能正常运行了。</li>
</ul>
</li>
</ul>
<h2 id="三、JVM的默认处理方案"><a href="#三、JVM的默认处理方案" class="headerlink" title="三、JVM的默认处理方案"></a>三、JVM的默认处理方案</h2><ul>
<li>如果出现出现了问题，我们没有做任何处理，最终JVM会做默认的处理。<ul>
<li>(1)把异常的名称、异常原因及异常出现的位置等信息输出在了控制台</li>
<li>(2)程序停止执行</li>
</ul>
</li>
</ul>
<h2 id="四、异常处理"><a href="#四、异常处理" class="headerlink" title="四、异常处理"></a>四、异常处理</h2><h3 id="4-1-分类"><a href="#4-1-分类" class="headerlink" title="4.1. 分类"></a>4.1. 分类</h3><ul>
<li>如果出现出现了问题，我们需要自己来处理，有两种方案：<ul>
<li><code>try……catch……</code></li>
<li><code>throws</code></li>
</ul>
</li>
</ul>
<h3 id="4-2-异常处理之try……catch……"><a href="#4-2-异常处理之try……catch……" class="headerlink" title="4.2. 异常处理之try……catch……"></a>4.2. 异常处理之try……catch……</h3><h4 id="4-2-1-格式"><a href="#4-2-1-格式" class="headerlink" title="4.2.1. 格式"></a>4.2.1. 格式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    可能出现异常的代码;</span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类名 变量名)</span><br><span class="line">&#123;</span><br><span class="line">    异常的处理代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-2-执行流程"><a href="#4-2-2-执行流程" class="headerlink" title="4.2.2. 执行流程"></a>4.2.2. 执行流程</h4><ul>
<li>(1)程序从try里面的代码开始执行</li>
<li>(2)出现异常，会自动生成一个异常类对象，该异常对象将被提交给Java运行时系统</li>
<li>(3)当Java运行时系统接收到异常对象时，会到catch中去找匹配的异常类，找到后进行异常的处理</li>
<li>(4)执行完毕之后，程序还可以继续往下执行</li>
</ul>
<h4 id="4-2-3-Throwable"><a href="#4-2-3-Throwable" class="headerlink" title="4.2.3. Throwable"></a>4.2.3. Throwable</h4><ul>
<li><code>public String getMessage()</code><ul>
<li>返回次throwable的详细消息字符串</li>
</ul>
</li>
<li><code>public String toString()</code><ul>
<li>返回次可抛出的简短描述</li>
</ul>
</li>
<li><code>public void printStackTrace()</code><ul>
<li>把异常的错误信息输出在控制台，输出的信息是最全的</li>
</ul>
</li>
</ul>
<h4 id="4-2-4-编译时异常和运行时异常的区别"><a href="#4-2-4-编译时异常和运行时异常的区别" class="headerlink" title="4.2.4. 编译时异常和运行时异常的区别"></a>4.2.4. 编译时异常和运行时异常的区别</h4><ul>
<li>Java中的异常被分为两大类：编译时异常和运行时异常，也被称为受检异常和非受检异常。</li>
<li>所有的RuntimeException类及其子类被称为运行时异常，其他的异常都是编译时异常。</li>
<li>编译时异常：必须显示处理，否则程序就会发生错误，无法通过编译。编译时异常表示有可能会出现问题，但不一定会出现问题。</li>
<li>运行时异常：无需显示处理，也可以和编译时异常一样处理。</li>
</ul>
<h3 id="4-3-异常处理之throws"><a href="#4-3-异常处理之throws" class="headerlink" title="4.3. 异常处理之throws"></a>4.3. 异常处理之throws</h3><ul>
<li><p>虽然我们通过try……catch……可以对异常进行处理，但是并不是所有的情况我们都有权限进行异常的处理。</p>
</li>
<li><p>有些时候可能出现的异常是我们处理不了的，这个时候怎么办？</p>
<ul>
<li>针对这种情况，Java提供了throws的处理方案。</li>
</ul>
</li>
<li><p>格式：throws 异常类名:</p>
</li>
<li><p>注意：这个格式是跟在方法的括号后面的。</p>
</li>
<li><p>范例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> <span class="keyword">throws</span> ArrayIndexOutOfBoundsException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译时异常必须要进行处理，两种处理方案：try……catch……或者throws，如果采用throws这种方案，将来谁调用谁处理，会将异常抛出给异常类名后，通过调用try……catch(异常类名)来处理。</p>
</li>
<li><p>运行时异常可以不处理，出现问题后，需要我们回来修改代码。</p>
</li>
</ul>
<h3 id="4-4-自定义异常"><a href="#4-4-自定义异常" class="headerlink" title="4.4. 自定义异常"></a>4.4. 自定义异常</h3><ul>
<li>格式<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 异常类名 <span class="keyword">extends</span> <span class="title">Exception</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    无参构造</span><br><span class="line">    带参构造</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>范例<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScoreException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ScoreException</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ScoreException</span><span class="params">(String message)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>调用自定义异常<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkScore</span><span class="params">(<span class="keyword">int</span> score)</span> <span class="keyword">throws</span> ScoreException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(score&lt;<span class="number">0</span> || score&gt;<span class="number">100</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ScoreException(<span class="string">&quot;你给的分数有误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;分数正常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="4-5-throws和throw的区别"><a href="#4-5-throws和throw的区别" class="headerlink" title="4.5. throws和throw的区别"></a>4.5. throws和throw的区别</h3><ul>
<li>throws<ul>
<li>用在方法声明后面，跟的是异常类名。</li>
<li>表示抛出异常，由该方法的调用者来处理。</li>
<li>表示出现异常的一种可能性，并不一定会发生这些异常。</li>
</ul>
</li>
<li>throw<ul>
<li>用在方法体内，跟的是异常对象名。</li>
<li>表示抛出异常，由方法体内的语句处理。</li>
<li>执行throw一定抛出了某种异常。</li>
</ul>
</li>
</ul>
<h2 id="五、复制文件的异常处理"><a href="#五、复制文件的异常处理" class="headerlink" title="五、复制文件的异常处理"></a>五、复制文件的异常处理</h2><h3 id="5-1-直接将异常抛出去"><a href="#5-1-直接将异常抛出去" class="headerlink" title="5.1. 直接将异常抛出去"></a>5.1. 直接将异常抛出去</h3><ul>
<li><code>throws IOException</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="5-2-try……catch……finally的做法"><a href="#5-2-try……catch……finally的做法" class="headerlink" title="5.2. try……catch……finally的做法"></a>5.2. <code>try……catch……finally</code>的做法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    可能出现异常的代码;</span><br><span class="line">&#125;cathch(异常类名 变量名)</span><br><span class="line">&#123;</span><br><span class="line">    异常的处理代码;</span><br><span class="line">&#125;<span class="keyword">finally</span></span><br><span class="line">&#123;</span><br><span class="line">    执行所有清除操作;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-3-JDK7改进方案（最好）"><a href="#5-3-JDK7改进方案（最好）" class="headerlink" title="5.3. JDK7改进方案（最好）"></a>5.3. JDK7改进方案（最好）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>(定义流对象)</span><br><span class="line">&#123;</span><br><span class="line">    可能出现异常的代码;</span><br><span class="line">&#125;cathch(异常类名 变量名)</span><br><span class="line">&#123;</span><br><span class="line">    异常的处理代码;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//自动释放资源</span></span><br></pre></td></tr></table></figure>

<h3 id="5-4-JDK9改进方案"><a href="#5-4-JDK9改进方案" class="headerlink" title="5.4. JDK9改进方案"></a>5.4. JDK9改进方案</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义输入流对象;</span></span><br><span class="line"><span class="comment">//定义输出流对象;</span></span><br><span class="line"><span class="keyword">try</span>(输入流对象; 输出流对象)</span><br><span class="line">&#123;</span><br><span class="line">    可能出现异常的代码;</span><br><span class="line">&#125;cathch(异常类名 变量名)</span><br><span class="line">&#123;</span><br><span class="line">    异常的处理代码;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//该代码对应的方法需要抛出异常</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之集合</title>
    <url>/2021/04/25/Java%E4%B9%8B%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h2 id="一、集合的介绍"><a href="#一、集合的介绍" class="headerlink" title="一、集合的介绍"></a>一、集合的介绍</h2><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1. 概述"></a>1.1. 概述</h3><ul>
<li>编程的时候如果要存储多个数据，使用长度固定的数组存储格式，不一定满足我们的需求，更适应不了变化的需求，所以需要使用集合来解决这些问题。</li>
</ul>
<h3 id="1-2-集合类的特点"><a href="#1-2-集合类的特点" class="headerlink" title="1.2. 集合类的特点"></a>1.2. 集合类的特点</h3><ul>
<li>提供一种存储空间可变的存储模型，即存储的数据容量可以发生改变</li>
</ul>
<h3 id="1-3-集合的使用步骤"><a href="#1-3-集合的使用步骤" class="headerlink" title="1.3. 集合的使用步骤"></a>1.3. 集合的使用步骤</h3><ul>
<li>(1)创建集合对象</li>
<li>(2)添加元素<ul>
<li>创建元素</li>
<li>添加元素到集合</li>
</ul>
</li>
<li>(3)遍历集合<ul>
<li>通过集合对象获取迭代器对象</li>
<li>通过迭代器对象的<code>hasNext()</code>方法判断是否还有元素</li>
<li>通过迭代器对象的<code>next()</code>方法获取下一个元素</li>
</ul>
</li>
</ul>
<h3 id="1-4-集合类体系结构"><a href="#1-4-集合类体系结构" class="headerlink" title="1.4. 集合类体系结构"></a>1.4. 集合类体系结构</h3><pre class="mermaid">graph TD
  a[集合]
  b[Collection单列]
  c[Map双列]
  d[List可重复]
  e[Set不可重复]
  f(HashMap)
  g(...)
  h(ArrayList)
  i(LinkedList)
  j(HashSet)
  k(TreeSet)
  l(...)
  m(...)

  a-->b
  a-->c
  b-->d
  b-->e
  c-->f
  c-->g
  d-->h
  d-->i
  d-->l
  e-->j
  e-->k
  e-->m</pre>

<ul>
<li>矩形框为接口</li>
<li>圆角框为实现类</li>
</ul>
<h2 id="二、ArrayList-lt-E-gt"><a href="#二、ArrayList-lt-E-gt" class="headerlink" title="二、ArrayList&lt;E&gt;"></a>二、<code>ArrayList&lt;E&gt;</code></h2><h3 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1. 简介"></a>2.1. 简介</h3><ul>
<li>可调整大小的数组实现。</li>
<li><code>&lt;E&gt;</code>是一种特殊的数据类型，泛型。<ul>
<li>在出现E的地方我们使用引用数据类型替换即可。</li>
<li>举例：<code>ArrayList&lt;String&gt;</code>，<code>ArrayList&lt;Student&gt;</code></li>
</ul>
</li>
</ul>
<h3 id="2-2-ArrayList构造方法和添加方法"><a href="#2-2-ArrayList构造方法和添加方法" class="headerlink" title="2.2. ArrayList构造方法和添加方法"></a>2.2. ArrayList构造方法和添加方法</h3><ul>
<li><code>public ArrayList()</code><ul>
<li>创建一个空的集合对象</li>
</ul>
</li>
<li><code>public boolean add(E e)</code><ul>
<li>将指定的元素追加到此集合的末尾</li>
</ul>
</li>
<li><code>public void add(int index, E element)</code><ul>
<li>在此集合中的指定位置插入指定的元素</li>
</ul>
</li>
</ul>
<h3 id="2-3-ArrayList集合常用方法"><a href="#2-3-ArrayList集合常用方法" class="headerlink" title="2.3. ArrayList集合常用方法"></a>2.3. ArrayList集合常用方法</h3><ul>
<li><code>public boolean remove(Object o)</code><ul>
<li>删除指定的元素，返回删除是否成功</li>
</ul>
</li>
<li><code>public E remove(int index)</code><ul>
<li>删除指定索引处的元素，返回被删除的元素</li>
</ul>
</li>
<li><code>public E set(int index, E element)</code><ul>
<li>修改指定索引处的元素，返回被修改的元素</li>
</ul>
</li>
<li><code>public E get(int index)</code><ul>
<li>返回指定索引处的元素</li>
</ul>
</li>
<li><code>public int size()</code><ul>
<li>返回集合中的元素的个数</li>
</ul>
</li>
</ul>
<h2 id="三、Collection"><a href="#三、Collection" class="headerlink" title="三、Collection"></a>三、Collection</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1. 概述"></a>3.1. 概述</h3><ul>
<li>是单例集合的顶层接口，它表示一组对象，这些对象也称为Collection的元素</li>
<li>JDK不提供此接口的任何直接实现，它提供更具体的子接口（如Set和List）实现</li>
</ul>
<h3 id="3-2-创建Collection集合的对象"><a href="#3-2-创建Collection集合的对象" class="headerlink" title="3.2. 创建Collection集合的对象"></a>3.2. 创建Collection集合的对象</h3><ul>
<li>多态的方式</li>
<li>具体的实现类ArrayList</li>
</ul>
<h3 id="3-3-Collection集合常用方法"><a href="#3-3-Collection集合常用方法" class="headerlink" title="3.3. Collection集合常用方法"></a>3.3. Collection集合常用方法</h3><ul>
<li><code>boolean add(E e)</code><ul>
<li>添加元素</li>
</ul>
</li>
<li><code>boolean remove(Object o)</code><ul>
<li>从集合中移除指定的元素</li>
</ul>
</li>
<li><code>void clear()</code><ul>
<li>清空集合中的元素</li>
</ul>
</li>
<li><code>boolean contains(Object o)</code><ul>
<li>判断集合中是否存在指定的元素</li>
</ul>
</li>
<li><code>boolean isEmpty()</code><ul>
<li>判断集合是否为空</li>
</ul>
</li>
<li><code>int size()</code><ul>
<li>集合的长度，也就是集合中元素的个数</li>
</ul>
</li>
</ul>
<h3 id="3-4-Collection集合的遍历"><a href="#3-4-Collection集合的遍历" class="headerlink" title="3.4. Collection集合的遍历"></a>3.4. Collection集合的遍历</h3><ul>
<li><code>Iterator</code>:迭代器，集合的专用遍历方式</li>
<li><code>Iterator&lt;E&gt; iterator()</code>：返回此集合中元素的迭代器，通过集合的iterator()方法得到</li>
<li>迭代器是通过集合的<code>iterator()</code>方法得到的，所以我们说它是依赖于集合而存在的</li>
<li>Iterator中的常用方法</li>
<li><code>E next()</code>：返回迭代中的下一个元素。</li>
<li><code>boolean hasNext()</code>：如果迭代具有更多元素，则返回true。</li>
<li>范例<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collection&lt;String&gt; c = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">c.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">c.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">c.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">Iterator&lt;String&gt; it = c.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())</span><br><span class="line">&#123;</span><br><span class="line">    String s = <span class="keyword">if</span>.next();</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="四、Collections"><a href="#四、Collections" class="headerlink" title="四、Collections"></a>四、Collections</h2><h3 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1. 概述"></a>4.1. 概述</h3><ul>
<li>Collections类是针对集合的工具类</li>
</ul>
<h3 id="4-2-常用方法"><a href="#4-2-常用方法" class="headerlink" title="4.2. 常用方法"></a>4.2. 常用方法</h3><ul>
<li>(1)将指定的列表按升序排序<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt; <span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(List&lt;T&gt; list)</span></span></span><br></pre></td></tr></table></figure></li>
<li>(2)反转指定列表中元素的顺序<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(List&lt;?&gt; list)</span></span></span><br></pre></td></tr></table></figure></li>
<li>(3)使用默认的随机源随机排列指定的列表,即随机排序<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shuffle</span><span class="params">(List&lt;?&gt; list)</span></span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">list.add(<span class="number">30</span>);</span><br><span class="line">list.add(<span class="number">20</span>);</span><br><span class="line">list.add(<span class="number">50</span>);</span><br><span class="line">list.add(<span class="number">10</span>);</span><br><span class="line">list.add(<span class="number">40</span>);</span><br><span class="line">Collection.sort(list);<span class="comment">//1</span></span><br><span class="line">Collection.reverse(list);<span class="comment">//2</span></span><br><span class="line">Collection.shuffle(list);<span class="comment">//3</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="五、List"><a href="#五、List" class="headerlink" title="五、List"></a>五、List</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1. 概述"></a>5.1. 概述</h3><ul>
<li>有序集合（也称为序列），用户可以精确控制列表中每个元素的插入位置，用户可以通过证书索引访问元素，并搜索列表中的元素。</li>
<li>与Set集合不同，列表通常允许重复的元素。</li>
</ul>
<h3 id="5-2-特点"><a href="#5-2-特点" class="headerlink" title="5.2. 特点"></a>5.2. 特点</h3><ul>
<li>(1)有序：存储和取出的元素顺序一致</li>
<li>(2)可重复：存储的元素可以重复</li>
</ul>
<h3 id="5-3-List集合的特有方法"><a href="#5-3-List集合的特有方法" class="headerlink" title="5.3. List集合的特有方法"></a>5.3. List集合的特有方法</h3><ul>
<li><code>E remove(int index)</code><ul>
<li>删除指定索引处的元素，返回被删除的元素</li>
</ul>
</li>
<li><code>E set(int index, E element)</code><ul>
<li>修改指定索引处的元素，返回被修改的元素</li>
</ul>
</li>
<li><code>void add(int index, E element)</code><ul>
<li>在此集合中的指定位置插入指定的元素</li>
</ul>
</li>
<li><code>E get(int index)</code><ul>
<li>返回指定索引处的元素</li>
</ul>
</li>
</ul>
<h3 id="5-4-并发修改异常"><a href="#5-4-并发修改异常" class="headerlink" title="5.4. 并发修改异常"></a>5.4. 并发修改异常</h3><ul>
<li><code>ConcurrentModificationException</code></li>
<li>产生原因<ul>
<li>迭代器遍历的过程中，通过集合对象修改了集合中元素的长度，造成了迭代器获取元素中判断预期修改值和实际修改值不一致。</li>
</ul>
</li>
<li>解决方案<ul>
<li>用for循环遍历，然后用集合对象做对应的操作即可。</li>
</ul>
</li>
</ul>
<h3 id="5-5-ListIterator列表迭代器"><a href="#5-5-ListIterator列表迭代器" class="headerlink" title="5.5. ListIterator列表迭代器"></a>5.5. ListIterator列表迭代器</h3><ul>
<li>通过List集合的<code>listIterator()</code>方法得到，所以说它是List集合特有的迭代器。</li>
<li>用于允许程序员沿任一方向遍历列表的列表迭代器，在迭代期间修改列表，并获取列表中迭代器的当前位置。</li>
<li>ListIterator中的常用方法<ul>
<li><code>E next()</code><ul>
<li>返回迭代中的下一个元素</li>
</ul>
</li>
<li><code>boolean hasNext()</code><ul>
<li>如果迭代具有更多元素，则返回true</li>
</ul>
</li>
<li><code>E previous()</code><ul>
<li>返回列表中的上一个元素</li>
</ul>
</li>
<li><code>boolean hasPrevious()</code><ul>
<li>如果此列表迭代器在相反方向遍历列表时具有更多元素，则返回true</li>
</ul>
</li>
<li><code>void add(E e)</code><ul>
<li>将指定的元素插入列表</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="5-6-List集合子类的特点"><a href="#5-6-List集合子类的特点" class="headerlink" title="5.6. List集合子类的特点"></a>5.6. List集合子类的特点</h3><ul>
<li>List集合常用子类：ArrayList、LinkedList</li>
<li>ArrayList<ul>
<li>底层数据结构是数组，查询快，增删慢。</li>
</ul>
</li>
<li>LinkedList<ul>
<li>底层数据结构是链表，查询慢，增删快。</li>
</ul>
</li>
</ul>
<h3 id="5-7-LinkedList集合的特有功能"><a href="#5-7-LinkedList集合的特有功能" class="headerlink" title="5.7. LinkedList集合的特有功能"></a>5.7. LinkedList集合的特有功能</h3><ul>
<li><code>public void addFirst(E e)</code><ul>
<li>在该列表开头插入指定的元素</li>
</ul>
</li>
<li><code>public void addLast(E e)</code><ul>
<li>将指定的元素追加到此列表的末尾</li>
</ul>
</li>
<li><code>public E getFirst()</code><ul>
<li>返回此列表中的第一个元素</li>
</ul>
</li>
<li><code>public E getLast()</code><ul>
<li>返回此列表中的最后一个元素</li>
</ul>
</li>
<li><code>public E removeFirst()</code><ul>
<li>从此列表中删除并返回第一个元素</li>
</ul>
</li>
<li><code>public E removeLast()</code><ul>
<li>从此列表中删除并返回最后一个元素</li>
</ul>
</li>
</ul>
<h2 id="六、Set"><a href="#六、Set" class="headerlink" title="六、Set"></a>六、Set</h2><h3 id="6-1-Set集合特点"><a href="#6-1-Set集合特点" class="headerlink" title="6.1. Set集合特点"></a>6.1. Set集合特点</h3><ul>
<li>不包含重复元素的集合</li>
<li>没有带索引的方法，所以不能使用普通for循环遍历</li>
<li>HashSet：对集合的迭代顺序不作任何保证</li>
</ul>
<h3 id="6-2-哈希值"><a href="#6-2-哈希值" class="headerlink" title="6.2. 哈希值"></a>6.2. 哈希值</h3><ul>
<li>哈希值是JDK根据对象的地址或者字符串或者数字算出来的int类型的数值</li>
<li>Object类中有一个方法可以获取对象的哈希值<ul>
<li><code>public int hashCode()</code>：返回对象的哈希码值</li>
</ul>
</li>
<li>对象的哈希值特点<ul>
<li>同一个对象多次调用<code>hashCode()</code>方法返回的哈希值是相同的</li>
<li>默认情况下，不同对象的哈希值是不同的，而重写<code>hashCode()</code>方法，可以实现让不同对象的哈希值相同</li>
</ul>
</li>
</ul>
<h3 id="6-3-HashSet集合"><a href="#6-3-HashSet集合" class="headerlink" title="6.3. HashSet集合"></a>6.3. HashSet集合</h3><ul>
<li>HashSet集合特点<ul>
<li>(1)底层数据结构是哈希表</li>
<li>(2)对集合的迭代顺序不作任何保证，也就是说不保证存储和取出的元素顺序一致</li>
<li>(3)没有带索引的方法，所以不能使用普通for循环遍历</li>
<li>(4)由于是Set集合，所以是不包含重复元素的集合</li>
</ul>
</li>
<li>HashSet集合保证元素唯一性<ul>
<li>要保证元素唯一性，需要重写<code>hashCode()</code>和<code>equals()</code>，自动生成即可</li>
</ul>
</li>
</ul>
<h3 id="6-4-LinkedHashSet集合"><a href="#6-4-LinkedHashSet集合" class="headerlink" title="6.4. LinkedHashSet集合"></a>6.4. LinkedHashSet集合</h3><ul>
<li>LinkedHashSet集合特点<ul>
<li>哈希表和链表实现的Set接口，具有可预测的迭代次序</li>
<li>由链表保证元素有序，也就是说元素的存储和取出顺序是一致的。</li>
<li>由哈希表保证元素唯一，也就是说没有重复的元素</li>
</ul>
</li>
</ul>
<h3 id="6-5-TreeSet集合"><a href="#6-5-TreeSet集合" class="headerlink" title="6.5. TreeSet集合"></a>6.5. TreeSet集合</h3><h4 id="6-5-1-TreeSet集合特点"><a href="#6-5-1-TreeSet集合特点" class="headerlink" title="6.5.1. TreeSet集合特点"></a>6.5.1. TreeSet集合特点</h4><ul>
<li>元素有序，这里的顺序不是指存储和取出的顺序，而是按照一定的规则进行排序，具体排序方式取决于构造方法<ul>
<li><code>TreeSet()</code>：根据其元素的自然排序进行排序，默认为从小到大排序</li>
<li><code>TreeSet(Comparator comparator)</code>:根据指定的比较器进行排序。</li>
</ul>
</li>
<li>没有带索引的方法，所以不能使用普遍for循环遍历</li>
<li>由于是Set集合，所以不包含重复元素的集合</li>
</ul>
<h4 id="6-5-2-自然排序Comparable的使用"><a href="#6-5-2-自然排序Comparable的使用" class="headerlink" title="6.5.2. 自然排序Comparable的使用"></a>6.5.2. 自然排序Comparable的使用</h4><ul>
<li>用TreeSet集合存储自定义对象，无参构造方法使用的是自然排序对元素进行排序的</li>
<li>自然排序就是让元素所属的类实现Comparable接口，重写compareTo(T o)方法</li>
<li>重写方法时，一定要注意排序规则必须按照要求的主要条件和次要条件来写</li>
</ul>
<h4 id="6-5-3-比较器排序Comparator的使用"><a href="#6-5-3-比较器排序Comparator的使用" class="headerlink" title="6.5.3. 比较器排序Comparator的使用"></a>6.5.3. 比较器排序Comparator的使用</h4><ul>
<li>用TreeSet集合存储自定义对象，带参构造方法使用的是比较排序对元素进行排序的</li>
<li>比较器排序就是让集合构造方法接收Comparator的实现类对象，重写<code>compare(T o1,T o2)</code>方法</li>
<li>重写方法时，一定要注意排序规则必须按照要求的主要条件和次要条件来写</li>
</ul>
<h3 id="6-6-增强for循环"><a href="#6-6-增强for循环" class="headerlink" title="6.6. 增强for循环"></a>6.6. 增强for循环</h3><ul>
<li>简化数组和Collection集合的遍历。</li>
<li>实现Iterable接口的类允许其对象成为增强型for语句的目标。</li>
<li>它是JDK5之后出现的，其内部原理是一个Iterator迭代器。</li>
<li>格式<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(元素数据类型 变量名:数组或者Collection集合）</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//在此处使用变量即可，该变量就是元素</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//范例</span></span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i : arr)</span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="七、Map集合"><a href="#七、Map集合" class="headerlink" title="七、Map集合"></a>七、Map集合</h2><h3 id="7-1-概述"><a href="#7-1-概述" class="headerlink" title="7.1. 概述"></a>7.1. 概述</h3><ul>
<li><code>Interface Map&lt;K,V&gt;</code><ul>
<li>K：键的类型</li>
<li>V：值的类型</li>
</ul>
</li>
<li>将键映射到值的对象；不能包含重复的键；每个键可以映射到最多一个值<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="7-2-创建Map集合的对象"><a href="#7-2-创建Map集合的对象" class="headerlink" title="7.2. 创建Map集合的对象"></a>7.2. 创建Map集合的对象</h3><ul>
<li>多态的方式</li>
<li>具体的实现类HashMap</li>
</ul>
<h3 id="7-3-Map集合的基本功能"><a href="#7-3-Map集合的基本功能" class="headerlink" title="7.3. Map集合的基本功能"></a>7.3. Map集合的基本功能</h3><ul>
<li><code>V put(K key, V value)</code><ul>
<li>添加元素</li>
</ul>
</li>
<li><code>V remove(Object key)</code><ul>
<li>根据键删除键值对元素</li>
</ul>
</li>
<li><code>void clear()</code><ul>
<li>移除所有的键值对元素</li>
</ul>
</li>
<li><code>boolean containsKey(Object key)</code><ul>
<li>判断集合是否包含指定的键</li>
</ul>
</li>
<li><code>boolean containsValue(Object value)</code><ul>
<li>判断集合是否包含指定的值</li>
</ul>
</li>
<li><code>boolean isEmpty()</code><ul>
<li>判断集合是否为空</li>
</ul>
</li>
<li><code>int size()</code><ul>
<li>集合的长度，也就是集合中键值对的个数</li>
</ul>
</li>
</ul>
<h3 id="7-4-Map集合的获取功能"><a href="#7-4-Map集合的获取功能" class="headerlink" title="7.4. Map集合的获取功能"></a>7.4. Map集合的获取功能</h3><ul>
<li><code>V get(Object key)</code><ul>
<li>根据键获取值</li>
</ul>
</li>
<li><code>Set&lt;K&gt; keySet()</code><ul>
<li>获取所有键的集合</li>
</ul>
</li>
<li><code>Collection&lt;V&gt; values()</code><ul>
<li>获取所有值的集合</li>
</ul>
</li>
<li><code>Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet()</code><ul>
<li>获取所有键值对对象的集合，把一个键值和其对应的值当成一个整体</li>
</ul>
</li>
</ul>
<h3 id="7-5-Map集合的遍历"><a href="#7-5-Map集合的遍历" class="headerlink" title="7.5. Map集合的遍历"></a>7.5. Map集合的遍历</h3><h4 id="7-5-1-方式一"><a href="#7-5-1-方式一" class="headerlink" title="7.5.1. 方式一"></a>7.5.1. 方式一</h4><ul>
<li>(1)获取所有键的集合，用<code>keySet()</code>方法实现</li>
<li>(2)遍历键的集合，获取到每一个键，用增强for实现</li>
<li>(3)根据键去找值，用<code>get(Object key)</code>方法实现</li>
<li>范例<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">map.put(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;11&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;2&quot;</span>,<span class="string">&quot;22&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;3&quot;</span>,<span class="string">&quot;33&quot;</span>);</span><br><span class="line">Set&lt;String&gt; keySet = map.keySet();</span><br><span class="line"><span class="keyword">for</span>(String key : keySet)</span><br><span class="line">&#123;</span><br><span class="line">    String value = map.get(key);</span><br><span class="line">    System.out.println(key + <span class="string">&quot;,&quot;</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="7-5-2-方式二"><a href="#7-5-2-方式二" class="headerlink" title="7.5.2. 方式二"></a>7.5.2. 方式二</h4><ul>
<li>(1)获取所有键值对对象的集合<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Set&lt;Map.<span class="function">Entry&lt;K, V&gt; <span class="title">entrySet</span><span class="params">()</span>：获取所有键值对对象的集合</span></span><br></pre></td></tr></table></figure></li>
<li>(2)遍历键值对对象的集合，得到每一个键值对对象<ul>
<li>用增强for实现，得到每一个Map.Entry<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">map.put(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;11&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;2&quot;</span>,<span class="string">&quot;22&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;3&quot;</span>,<span class="string">&quot;33&quot;</span>);</span><br><span class="line">Set&lt;Map.Entry&lt;String, String&gt;&gt; entrySet = map.entrySet();</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;String, String&gt; me : entrySet)</span><br><span class="line">&#123;</span><br><span class="line">    String key = me.getKey();</span><br><span class="line">    String value = me.getValue();</span><br><span class="line">    System.out.println(key + <span class="string">&quot;,&quot;</span> + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="八、可变参数"><a href="#八、可变参数" class="headerlink" title="八、可变参数"></a>八、可变参数</h2><h3 id="8-1-概述"><a href="#8-1-概述" class="headerlink" title="8.1. 概述"></a>8.1. 概述</h3><ul>
<li>可变参数又称参数个数可变，用作方法的形参出现，那么方法参数个数就是可变的了</li>
<li>格式：修饰符 返回值类型 方法名(数据类型… 变量名){}</li>
<li>范例：<code>public static int sum(int... a)&#123;&#125;</code></li>
</ul>
<h3 id="8-2-可变参数的注意事项"><a href="#8-2-可变参数的注意事项" class="headerlink" title="8.2. 可变参数的注意事项"></a>8.2. 可变参数的注意事项</h3><ul>
<li>这里的变量其实是一个数组</li>
<li>如果一个方法有多个参数，包含可变参数，可变参数要放在最后面。</li>
</ul>
<h3 id="8-3-可变参数的使用"><a href="#8-3-可变参数的使用" class="headerlink" title="8.3. 可变参数的使用"></a>8.3. 可变参数的使用</h3><h4 id="8-3-1-Arrays工具类中有一个静态方法"><a href="#8-3-1-Arrays工具类中有一个静态方法" class="headerlink" title="8.3.1. Arrays工具类中有一个静态方法"></a>8.3.1. Arrays工具类中有一个静态方法</h4><ul>
<li><code>public static &lt;T&gt; List&lt;T&gt; asList(T... a)</code></li>
<li>返回由指定数组支持的固定大小的列表</li>
<li>返回的集合不能做增删操作，可以做修改操作</li>
</ul>
<h4 id="8-3-2-List接口中有一个静态方法"><a href="#8-3-2-List接口中有一个静态方法" class="headerlink" title="8.3.2. List接口中有一个静态方法"></a>8.3.2. List接口中有一个静态方法</h4><ul>
<li><code>public static &lt;E&gt; List&lt;E&gt; of(E... elements)</code></li>
<li>返回包含任意数量元素的不可变列表</li>
<li>返回的集合不能做增删改操作</li>
</ul>
<h4 id="8-3-3-Set接口中有一个静态方法"><a href="#8-3-3-Set接口中有一个静态方法" class="headerlink" title="8.3.3. Set接口中有一个静态方法"></a>8.3.3. Set接口中有一个静态方法</h4><ul>
<li><code>public static &lt;E&gt; Set&lt;E&gt; of(E... elements)</code></li>
<li>返回一个包含任意数量元素的不可变集合</li>
<li>返回的集合不能做增删操作，Set没有修改的方法</li>
<li>范例<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;java&quot;</span>);</span><br><span class="line">List&lt;String&gt; list = List.of(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;java&quot;</span>);</span><br><span class="line">Set&lt;String&gt; set = Set.of(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;java&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之类</title>
    <url>/2021/04/25/Java%E4%B9%8B%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="一、类的介绍"><a href="#一、类的介绍" class="headerlink" title="一、类的介绍"></a>一、类的介绍</h2><h3 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1. 概述"></a>1.1. 概述</h3><ul>
<li>类是对现实生活中一类具有共同属性和行为的事物的抽象</li>
<li>对象是计算机中具体的数据信息，而类是这个信息的数据类型</li>
<li>java程序中最基本的组成单位是类</li>
<li>类的定义格式<ul>
<li><code>public class 类名&#123;&#125;</code><a id="more"></a>

</li>
</ul>
</li>
</ul>
<h3 id="1-2-类的特点"><a href="#1-2-类的特点" class="headerlink" title="1.2. 类的特点"></a>1.2. 类的特点</h3><ul>
<li>类是对象的数据类型</li>
<li>类是具有相同属性和行为的一组对象的集合<h3 id="1-3-类的重要性"><a href="#1-3-类的重要性" class="headerlink" title="1.3. 类的重要性"></a>1.3. 类的重要性</h3></li>
<li>类是java程序的基本组成单位<h3 id="1-4-类的组成"><a href="#1-4-类的组成" class="headerlink" title="1.4. 类的组成"></a>1.4. 类的组成</h3></li>
<li>属性和行为<ul>
<li>属性：在类中通过成员变量来体现（类中方法外的变量）</li>
<li>行为：在类中通过成员方法来体现（掉static关键字）<h3 id="1-5-类的定义步骤"><a href="#1-5-类的定义步骤" class="headerlink" title="1.5. 类的定义步骤"></a>1.5. 类的定义步骤</h3></li>
</ul>
</li>
<li>(1)定义类</li>
<li>(2)编写类的成员变量</li>
<li>(3)编写类的成员方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    变量<span class="number">1</span>的数据类型 变量<span class="number">1</span>;</span><br><span class="line">    变量<span class="number">2</span>的数据类型 变量<span class="number">2</span>;</span><br><span class="line">    ……</span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    方法<span class="number">1</span>;</span><br><span class="line">    方法<span class="number">2</span>;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="1-6-对象"><a href="#1-6-对象" class="headerlink" title="1.6. 对象"></a>1.6. 对象</h3><ul>
<li>概述<ul>
<li>万物皆对象，客观存在的事物皆为对象，面向对象就是面向一个具体的对象。</li>
</ul>
</li>
<li>对象的属性<ul>
<li>指对象具有的各种特征，每个对象的每个属性都拥有特定的值。</li>
</ul>
</li>
<li>对象的行为<ul>
<li>指对象能够执行的操作，即对象能够干什么。</li>
</ul>
</li>
<li>创建对象<ul>
<li>格式：类名 对象名 = new 类名();</li>
<li>范例：<code>Phone p = new Phone();</code></li>
</ul>
</li>
<li>使用对象<ul>
<li>使用成员变量<ul>
<li>格式：对象名.变量名</li>
<li>范例：<code>p.brand</code></li>
</ul>
</li>
<li>使用成员方法<ul>
<li>格式：对象名.方法名()</li>
<li>范例：<code>p.call()</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="1-7-类和对象的关系"><a href="#1-7-类和对象的关系" class="headerlink" title="1.7. 类和对象的关系"></a>1.7. 类和对象的关系</h3><ul>
<li>类是对现实生活中一类具有共同属性和行为的事物的抽象</li>
<li>对象是能够看得到摸的着的真实存在的实体</li>
<li>类是对象的抽象，对象是类的实体</li>
</ul>
<h3 id="1-8-成员变量和局部变量"><a href="#1-8-成员变量和局部变量" class="headerlink" title="1.8. 成员变量和局部变量"></a>1.8. 成员变量和局部变量</h3><h4 id="1-8-1-概述"><a href="#1-8-1-概述" class="headerlink" title="1.8.1. 概述"></a>1.8.1. 概述</h4><ul>
<li>成员变量：类中方法外的变量</li>
<li>局部变量：方法中的变量<h4 id="1-8-2-成员变量和局部变量区别"><a href="#1-8-2-成员变量和局部变量区别" class="headerlink" title="1.8.2. 成员变量和局部变量区别"></a>1.8.2. 成员变量和局部变量区别</h4></li>
<li>类中位置不同<ul>
<li>成员变量在类中，方法外</li>
<li>局部变量在方法内或者方法声明上</li>
</ul>
</li>
<li>内存中位置不同<ul>
<li>成员变量在堆内存</li>
<li>局部变量在栈内存</li>
</ul>
</li>
<li>生命周期不同<ul>
<li>成员变量随着对象的存在而存在，随着对象的消失而消失</li>
<li>局部变量随着方法的调用而存在，随着方法的调用完毕而消失</li>
</ul>
</li>
<li>初始化值不同<ul>
<li>成员变量有默认的初始化值</li>
<li>局部变量没有默认的初始化值，必须先定义，赋值，才能使用</li>
</ul>
</li>
</ul>
<h3 id="1-9-构造方法"><a href="#1-9-构造方法" class="headerlink" title="1.9. 构造方法"></a>1.9. 构造方法</h3><h4 id="1-9-1-概述"><a href="#1-9-1-概述" class="headerlink" title="1.9.1. 概述"></a>1.9.1. 概述</h4><ul>
<li>构造方法是一种特殊的方法<h4 id="1-9-2-作用"><a href="#1-9-2-作用" class="headerlink" title="1.9.2. 作用"></a>1.9.2. 作用</h4></li>
<li>创建对象<h4 id="1-9-3-格式"><a href="#1-9-3-格式" class="headerlink" title="1.9.3. 格式"></a>1.9.3. 格式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    修饰符 类名(参数)</span><br><span class="line">    &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="1-9-4-功能"><a href="#1-9-4-功能" class="headerlink" title="1.9.4. 功能"></a>1.9.4. 功能</h4><ul>
<li>主要是完成对象数据的初始化<h4 id="1-9-5-注意事项"><a href="#1-9-5-注意事项" class="headerlink" title="1.9.5. 注意事项"></a>1.9.5. 注意事项</h4></li>
<li>构造方法的创建<ul>
<li>如果没有定义构造方法，系统将给出一个默认的无参数构造方法</li>
<li>如果定义了构造方法，系统将不再提供默认的构造方法</li>
</ul>
</li>
<li>构造方法的重载<ul>
<li>如果自定义了带参构造方法，还要使用无参数构造方法，就必须再写一个无参数构造方法</li>
<li>建议，无论是否使用，都手工书写无参数构造方法</li>
</ul>
</li>
</ul>
<h3 id="1-10-标准类制作"><a href="#1-10-标准类制作" class="headerlink" title="1.10. 标准类制作"></a>1.10. 标准类制作</h3><h4 id="1-10-1-成员变量"><a href="#1-10-1-成员变量" class="headerlink" title="1.10.1. 成员变量"></a>1.10.1. 成员变量</h4><ul>
<li>使用private修饰<h4 id="1-10-2-构造方法"><a href="#1-10-2-构造方法" class="headerlink" title="1.10.2. 构造方法"></a>1.10.2. 构造方法</h4></li>
<li>提供一个无参构造方法</li>
<li>提供一个带多个参数的构造方法<h4 id="1-10-3-成员方法"><a href="#1-10-3-成员方法" class="headerlink" title="1.10.3. 成员方法"></a>1.10.3. 成员方法</h4></li>
<li>提供一个成员变量对应的<code>setXxx()/getXxx()</code></li>
<li>提供一个显示对象信息的<code>show()</code><h4 id="1-10-4-创建对象并为其成员变量赋值的两种方式"><a href="#1-10-4-创建对象并为其成员变量赋值的两种方式" class="headerlink" title="1.10.4. 创建对象并为其成员变量赋值的两种方式"></a>1.10.4. 创建对象并为其成员变量赋值的两种方式</h4></li>
<li>无参构造方法创建对象后使用<code>setXxx()</code>赋值</li>
<li>使用带参构造方法直接创建带有属性值的对象</li>
</ul>
<h2 id="二、抽象类"><a href="#二、抽象类" class="headerlink" title="二、抽象类"></a>二、抽象类</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1. 概述"></a>2.1. 概述</h3><ul>
<li>在Java中，一个没有方法体的方法应该定义为抽象方法，而类中如果有抽象方法，该类必须定义为抽象类。<h3 id="2-2-抽象类的特点"><a href="#2-2-抽象类的特点" class="headerlink" title="2.2. 抽象类的特点"></a>2.2. 抽象类的特点</h3></li>
<li>抽象类和抽象方法必须使用abstract关键字修饰<ul>
<li>抽象类：<code>public abstract class 类名&#123;&#125;</code></li>
<li>抽象方法：<code>public abstract void 方法名();</code></li>
</ul>
</li>
<li>抽象类中不一定有抽象方法，有抽象方法的类一定是抽象类</li>
<li>抽象类不能实例化<ul>
<li>抽象类如何实例化呢？</li>
<li>参照多态的方式，通过子类对象实例化，这叫抽象类多态。</li>
</ul>
</li>
<li>抽象类的子类<ul>
<li>要么重写抽象类中的所有抽象方法</li>
<li>要么是抽象类<h3 id="2-3-抽象类的成员特点"><a href="#2-3-抽象类的成员特点" class="headerlink" title="2.3. 抽象类的成员特点"></a>2.3. 抽象类的成员特点</h3></li>
</ul>
</li>
<li>成员变量<ul>
<li>可以是变量也可以是常量</li>
</ul>
</li>
<li>构造方法<ul>
<li>有构造方法，但是不能实例化</li>
<li>构造方法的作用是用于子类访问父类数据的初始哈</li>
</ul>
</li>
<li>成员方法<ul>
<li>可以有抽象方法：限定子类必须完成某些动作</li>
<li>也可以有非抽象方法：提高代码复用性</li>
</ul>
</li>
</ul>
<h2 id="三、接口"><a href="#三、接口" class="headerlink" title="三、接口"></a>三、接口</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1. 概述"></a>3.1. 概述</h3><ul>
<li>接口就是一种公共的规范标准，只要符合规范标准，大家都可以通用</li>
<li>Java中的接口更多的体现在对行为的抽象<h3 id="3-2-接口的特点"><a href="#3-2-接口的特点" class="headerlink" title="3.2. 接口的特点"></a>3.2. 接口的特点</h3></li>
<li>接口用关键字interface修饰<ul>
<li><code>public interface 接口名&#123;&#125;</code></li>
</ul>
</li>
<li>类实现接口用implements表示<ul>
<li>`public class 类名 implements 接口名{}``</li>
</ul>
</li>
<li>接口不能实例化<ul>
<li>接口如何实例化：参照多态的方式，通过实现类对象实例化，这叫接口多态</li>
<li>多态的形式：具体类多态，抽象类多态，接口多态</li>
<li>多态的前提：有继承或者实现关系；有方法重写；有父类引用指向子类对象；有父接口引用指向实现类对象</li>
</ul>
</li>
<li>接口的实现类<ul>
<li>要么重写接口中的所有抽象方法</li>
<li>要么是抽象类</li>
</ul>
</li>
</ul>
<h3 id="3-3-接口的成员特点"><a href="#3-3-接口的成员特点" class="headerlink" title="3.3. 接口的成员特点"></a>3.3. 接口的成员特点</h3><ul>
<li>成员变量<ul>
<li>只能是常量</li>
<li>默认修饰符：<code>public static final（可以不写）</code></li>
</ul>
</li>
<li>构造方法<ul>
<li>接口没有构造方法，因为接口主要是对行为进行抽象的，是没有具体存在的</li>
<li>一个类如果没有父类，默认继承自Object类</li>
</ul>
</li>
<li>成员方法<ul>
<li>只能是抽象方法</li>
<li>默认修饰符：public abstract。</li>
<li>关于接口中的方法，JDK8和JDK9中有一些新特性</li>
</ul>
</li>
</ul>
<h3 id="3-4-类和接口的关系"><a href="#3-4-类和接口的关系" class="headerlink" title="3.4. 类和接口的关系"></a>3.4. 类和接口的关系</h3><ul>
<li>类和类的关系<ul>
<li>继承关系，只能单继承，但是可以多层继承。</li>
</ul>
</li>
<li>类和接口的关系<ul>
<li>实现关系，可以单实现，也可以多实现，还可以在继承一个类的同时实现多个接口。</li>
</ul>
</li>
<li>接口和接口的关系<ul>
<li>继承关系，可以单继承，也可以多继承。</li>
</ul>
</li>
</ul>
<h3 id="3-5-抽象类和接口的区别"><a href="#3-5-抽象类和接口的区别" class="headerlink" title="3.5. 抽象类和接口的区别"></a>3.5. 抽象类和接口的区别</h3><ul>
<li>成员区别<ul>
<li>抽象类：变量，常量；有构造方法；有抽象方法，也有非抽象方法</li>
<li>接口：常量；抽象方法</li>
</ul>
</li>
<li>关系区别<ul>
<li>类与类：继承关系，单继承</li>
<li>类与接口：实现关系，可以单实现，也可以多实现</li>
<li>接口与接口：继承关系，单继承，多继承</li>
</ul>
</li>
<li>设计理念区别<ul>
<li>抽象类：对类抽象，包括属性、行为，抽象类是对事物的抽象</li>
<li>接口：对行为抽象，主要是行为</li>
</ul>
</li>
</ul>
<h3 id="3-6-形参和返回值"><a href="#3-6-形参和返回值" class="headerlink" title="3.6. 形参和返回值"></a>3.6. 形参和返回值</h3><ul>
<li>抽象类名作为形参和返回值<ul>
<li>方法的形参是抽象类名，其实需要的是该抽象类的子类对象。</li>
<li>方法的返回值是抽象类名，其实返回的是该抽象类的子类对象。</li>
</ul>
</li>
<li>接口名作为形参和返回值<ul>
<li>方法的形参是接口名，其实需要的是该接口的实现类对象。</li>
<li>方法的返回值是接口名，其实返回的是该接口的实现类对象。</li>
</ul>
</li>
</ul>
<h2 id="四、内部类"><a href="#四、内部类" class="headerlink" title="四、内部类"></a>四、内部类</h2><h3 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1. 概述"></a>4.1. 概述</h3><ul>
<li>内部类就是在一个类中定义一个类。</li>
<li>举例：在一个类A的内部定义一个类B，类B就被称为内部类。</li>
<li>按照内部类在类中定义的位置不同，可以分为如下两种方式<ul>
<li>在类的成员位置：成员内部类</li>
<li>在类的局部位置：局部内部类<h3 id="4-2-格式"><a href="#4-2-格式" class="headerlink" title="4.2. 格式"></a>4.2. 格式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//内部类</span></span><br><span class="line">    修饰符 <span class="class"><span class="keyword">class</span> 类名</span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//范例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">a</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    pubilc <span class="class"><span class="keyword">class</span> <span class="title">b</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="4-3-内部类的访问特点"><a href="#4-3-内部类的访问特点" class="headerlink" title="4.3. 内部类的访问特点"></a>4.3. 内部类的访问特点</h3><ul>
<li>内部类可以直接访问外部类的成员，包括私有的</li>
<li>外部类要访问内部类的成员，必须创建对象<h3 id="4-4-成员内部类"><a href="#4-4-成员内部类" class="headerlink" title="4.4. 成员内部类"></a>4.4. 成员内部类</h3></li>
<li>在类的成员位置</li>
<li>成员内部类，外界如何创建对象使用呢？</li>
<li>格式：外部类名.内部类名 对象名 = 外部类对象.内部类对象;</li>
<li>范例：Outer.lnner oi = new Outer.lnner();<h3 id="4-5-局部内部类"><a href="#4-5-局部内部类" class="headerlink" title="4.5. 局部内部类"></a>4.5. 局部内部类</h3></li>
<li>在类的局部位置，即在方法中</li>
<li>局部内部类是在方法中定义的类，所以外界是无法直接使用的，需要在方法内部创建对象并使用</li>
<li>该类可以直接访问外部类的成员，也可以访问方法内的局部变量。<h3 id="4-6-匿名内部类"><a href="#4-6-匿名内部类" class="headerlink" title="4.6. 匿名内部类"></a>4.6. 匿名内部类</h3></li>
<li>也归属于局部内部类</li>
<li>前提：存在一个类或者接口，这里的类可以是具体类也可以是抽象类。</li>
<li>格式<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> 类名或者接口名()</span><br><span class="line">&#123;</span><br><span class="line">    重写方法;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//范例</span></span><br><span class="line"><span class="keyword">new</span> Inter()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>本质：是一个继承了该类或者实现了该接口的子类匿名对象</li>
<li>匿名内部类在开发中的使用<ul>
<li>当接口实例化时需要重新定义一个子类去实现接口中的方法，使用匿名内部类后，就不需要定义一个新的子类</li>
</ul>
</li>
</ul>
<h2 id="五、Math类"><a href="#五、Math类" class="headerlink" title="五、Math类"></a>五、Math类</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1. 概述"></a>5.1. 概述</h3><ul>
<li>Math包含执行基本数字运算的方法</li>
<li>没有构造方法时如何使用类中的成员呢？看类的成员是否都是静态的，如果是，通过类名就可以直接调用<h3 id="5-2-Math类的常用方法"><a href="#5-2-Math类的常用方法" class="headerlink" title="5.2. Math类的常用方法"></a>5.2. Math类的常用方法</h3></li>
<li><code>public static int abs(int a)</code><ul>
<li>返回参数的绝对值</li>
</ul>
</li>
<li><code>public static double ceil(double a)</code><ul>
<li>返回大于或等于参数double值的最小整数</li>
</ul>
</li>
<li><code>public static double floor(double a)</code><ul>
<li>返回小于或等于参数double值的最大整数</li>
</ul>
</li>
<li><code>public static int round(float a)</code><ul>
<li>按照四舍五入返回最接近参数的int</li>
</ul>
</li>
<li><code>public static int max(int a, int b)</code><ul>
<li>返回两个int值中的较大值</li>
</ul>
</li>
<li><code>public static int min(int a, int b)</code><ul>
<li>返回两个int值中的较小值</li>
</ul>
</li>
<li><code>public static double pow(double a, double b)</code><ul>
<li>返回a的b次幂的值</li>
</ul>
</li>
<li><code>public static double random()</code><ul>
<li>返回值为double的正值，范围为[0.0，1.0)</li>
</ul>
</li>
</ul>
<h2 id="六、System类"><a href="#六、System类" class="headerlink" title="六、System类"></a>六、System类</h2><h3 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1. 概述"></a>6.1. 概述</h3><ul>
<li>System包含几个有用的类字段和方法，它不能被实例化<h3 id="6-2-System类的常用方法"><a href="#6-2-System类的常用方法" class="headerlink" title="6.2. System类的常用方法"></a>6.2. System类的常用方法</h3></li>
<li><code>public static void exit(int status)</code><ul>
<li>终止当前运行的Java虚拟机，非零表示异常终止</li>
</ul>
</li>
<li><code>public static long currentTimeMillis()</code><ul>
<li>返回当前时间（以毫秒为单位），当前时间与1970年之间的毫秒值</li>
</ul>
</li>
</ul>
<h2 id="七、Object类"><a href="#七、Object类" class="headerlink" title="七、Object类"></a>七、Object类</h2><h3 id="7-1-概述"><a href="#7-1-概述" class="headerlink" title="7.1. 概述"></a>7.1. 概述</h3><ul>
<li>Object是类层次结构的根，每个类都可以将Object作为超类，所有类都直接或者间接的继承自该类</li>
<li>构造方法：public Object()</li>
<li>回想面向对象中，为什么说子类的构造方法默认访问的是父类的无参构造方法？<ul>
<li>因为它们的顶级父类只有无参构造方法<h3 id="7-2-toString方法"><a href="#7-2-toString方法" class="headerlink" title="7.2. toString方法"></a>7.2. toString方法</h3></li>
</ul>
</li>
<li><code>public String toString()</code></li>
<li>建议所有子类重写此方法。因为该方法原本输出的内容不直观。</li>
<li>如何重写：自动生成即可（与生成get、set相似）</li>
<li><code>System.out.println(对象名);</code>实际上就是System.out.println(对象名.toString());<h3 id="7-3-equals方法"><a href="#7-3-equals方法" class="headerlink" title="7.3. equals方法"></a>7.3. equals方法</h3></li>
<li><code>public boolean equals(Object obj)</code></li>
<li>比较对象是否相等，默认比较地址，重写可以比较内容，自动生成（与生成get、set相似）</li>
</ul>
<h2 id="八、Arrays类"><a href="#八、Arrays类" class="headerlink" title="八、Arrays类"></a>八、Arrays类</h2><ul>
<li>Arrays类包含用于操作数组的各种方法</li>
<li><code>public static String toString(int[] a)</code><ul>
<li>返回指定数组的内容的字符串表示形式，数字之间会自动用逗号隔开，输出范例：[1,2,3,4,5]</li>
</ul>
</li>
<li><code>public static void sort(int[] a)</code><ul>
<li>按照数字顺序排列指定的数组</li>
</ul>
</li>
</ul>
<h2 id="九、工具类的设计思想"><a href="#九、工具类的设计思想" class="headerlink" title="九、工具类的设计思想"></a>九、工具类的设计思想</h2><ul>
<li>构造方法用private修饰，原因是为了防止外界创建该对象。</li>
<li>成员用public static修饰，原因是为了让使用类名来访问该成员方法。</li>
</ul>
<h2 id="十、基本类型包装类"><a href="#十、基本类型包装类" class="headerlink" title="十、基本类型包装类"></a>十、基本类型包装类</h2><h3 id="10-1-概述"><a href="#10-1-概述" class="headerlink" title="10.1. 概述"></a>10.1. 概述</h3><ul>
<li>将基本数据类型封装成对象的好处在于可以在对象中定义更多的功能方法操作该数据。</li>
<li>常用的操作之一：用于基本数据类型与字符串之间的转换</li>
</ul>
<table>
<thead>
<tr>
<th align="center">基本数据类型</th>
<th align="center">包装类</th>
</tr>
</thead>
<tbody><tr>
<td align="center">byte</td>
<td align="center">Byte</td>
</tr>
<tr>
<td align="center">short</td>
<td align="center">Short</td>
</tr>
<tr>
<td align="center">int</td>
<td align="center">Integer</td>
</tr>
<tr>
<td align="center">long</td>
<td align="center">Long</td>
</tr>
<tr>
<td align="center">float</td>
<td align="center">Float</td>
</tr>
<tr>
<td align="center">double</td>
<td align="center">Double</td>
</tr>
<tr>
<td align="center">char</td>
<td align="center">Character</td>
</tr>
<tr>
<td align="center">boolean</td>
<td align="center">Boolean</td>
</tr>
</tbody></table>
<h3 id="10-2-Integer类的概述和使用"><a href="#10-2-Integer类的概述和使用" class="headerlink" title="10.2. Integer类的概述和使用"></a>10.2. Integer类的概述和使用</h3><ul>
<li>Integer包装一个对象中的原始类型int的值</li>
<li><code>public Integer(int value)</code><ul>
<li>根据int值创建Integer对象(过时)</li>
</ul>
</li>
<li><code>public Integer(String s)</code><ul>
<li>根据String值创建Integer对象(过时)</li>
</ul>
</li>
<li><code>public static Integer valueOf(int i)</code><ul>
<li>返回表示指定的int值的Integer实例</li>
</ul>
</li>
<li><code>public static Integer valueOf(String s)</code><ul>
<li>返回一个保存指定值String的Integer对象</li>
</ul>
</li>
</ul>
<h3 id="10-3-int和String的相互转换"><a href="#10-3-int和String的相互转换" class="headerlink" title="10.3. int和String的相互转换"></a>10.3. int和String的相互转换</h3><ul>
<li>基本类型包装类的最常见操作就是：用于基本类型和字符串之间的相互转换。</li>
<li>int转换为String<ul>
<li><code>public static String valueOf(int i)</code></li>
<li>返回int参数的字符串表示形式。该方法是String类中的方法。</li>
</ul>
</li>
<li>String转换为int<ul>
<li>public static int parseInt(String s)</li>
<li>将字符串解析为int类型，该方法是Integer类中的方法。</li>
</ul>
</li>
</ul>
<h3 id="10-4-自动装箱和拆箱"><a href="#10-4-自动装箱和拆箱" class="headerlink" title="10.4. 自动装箱和拆箱"></a>10.4. 自动装箱和拆箱</h3><ul>
<li>装箱：把基本数据类型转换为对应的包装类类型</li>
<li>拆箱：把包装类类型转换为对应的基本数据类型<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer a = Integer.valueOf(<span class="number">100</span>);<span class="comment">//装箱</span></span><br><span class="line">Integer i = <span class="number">100</span>;<span class="comment">//自动装箱</span></span><br><span class="line">i = i.intValue() + <span class="number">200</span>;<span class="comment">//i.intValue()是拆箱</span></span><br><span class="line">i += <span class="number">200</span>;<span class="comment">//i = i + 200; i + 200是自动拆箱; i = i + 200是自动装箱</span></span><br></pre></td></tr></table></figure></li>
<li>注意：在使用包装类类型的时候，如果做操作，最好先判断是否为null，建议只要是对象，在使用前就必须进行不为null的判断。</li>
</ul>
<h2 id="十一、日期类"><a href="#十一、日期类" class="headerlink" title="十一、日期类"></a>十一、日期类</h2><h3 id="11-1-Date"><a href="#11-1-Date" class="headerlink" title="11.1. Date"></a>11.1. Date</h3><h4 id="11-1-1-概述"><a href="#11-1-1-概述" class="headerlink" title="11.1.1. 概述"></a>11.1.1. 概述</h4><ul>
<li>Date代表了一个特点的时间，精确到毫秒。</li>
<li><code>public Date()</code><ul>
<li>分配一个Date对象，并初始化，以便它代表它被分配的时间，精确到毫秒，输出值为当前时间。</li>
</ul>
</li>
<li><code>public Date(long date)</code><ul>
<li>分配一个Date对象，并将其初始化为表示从标准基准时间起指定的毫秒数。</li>
</ul>
</li>
</ul>
<h3 id="11-1-2-Date类的常用方法"><a href="#11-1-2-Date类的常用方法" class="headerlink" title="11.1.2. Date类的常用方法"></a>11.1.2. Date类的常用方法</h3><ul>
<li><code>public long getTime()</code><ul>
<li>获取的是日期对象从1970年1月1日00：00：00到现在的毫秒值</li>
</ul>
</li>
<li><code>public void setTime(long time)</code><ul>
<li>设置时间，给的是毫米值</li>
</ul>
</li>
</ul>
<h3 id="11-2-SimpleDateFormat"><a href="#11-2-SimpleDateFormat" class="headerlink" title="11.2. SimpleDateFormat"></a>11.2. SimpleDateFormat</h3><h4 id="11-2-1-概述"><a href="#11-2-1-概述" class="headerlink" title="11.2.1. 概述"></a>11.2.1. 概述</h4><ul>
<li>SimpleDateFormat是一个具体的类，用于以区域设置敏感的方式格式化和解析日期</li>
<li>日期和时间格式由日期和时间模式字符串指定，在日期和时间模式字符串中，从‘A’到‘Z’以及从‘a’到‘z’引号的字母被解释为表示日期或时间字符串的组件的模式字母</li>
<li>常用的模式字母即对应关系如下<ul>
<li>y：年</li>
<li>M：月</li>
<li>d：日</li>
<li>H：时</li>
<li>m：分</li>
<li>s：秒</li>
</ul>
</li>
</ul>
<h4 id="11-2-2-SimpleDateFormat的构造方法"><a href="#11-2-2-SimpleDateFormat的构造方法" class="headerlink" title="11.2.2. SimpleDateFormat的构造方法"></a>11.2.2. SimpleDateFormat的构造方法</h4><ul>
<li><code>public SimpleDateFormat()</code><ul>
<li>构造一个SimpleDateFormat，使用默认模式和日期格式</li>
</ul>
</li>
<li><code>public SimpleDateFormat(String pattern)</code><ul>
<li>构造一个SimpleDateFormat使用给定的pattern模式和默认的日期格式</li>
</ul>
</li>
</ul>
<h4 id="11-2-3-SimpleDateFormat格式化和解析日期"><a href="#11-2-3-SimpleDateFormat格式化和解析日期" class="headerlink" title="11.2.3. SimpleDateFormat格式化和解析日期"></a>11.2.3. SimpleDateFormat格式化和解析日期</h4><ul>
<li>格式化（从Date到String）<ul>
<li>public final String format(Date date)</li>
<li>将日期格式化成日期/时间字符串，从Date到String<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Date d = <span class="keyword">new</span> Date();</span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy年MM月dd日 HH:mm:ss&quot;</span>);</span><br><span class="line">String s = sdf.format(d);</span><br><span class="line">System.out.println(s);</span><br><span class="line"><span class="comment">//输出结果为：2020年06月03日 14:09:11</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>解析（从String到Date）<ul>
<li>public Date parse(String source)</li>
<li>从给定字符串的开始解析文本以生成日期，从String到Date<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = <span class="string">&quot;2048-08-09 11:11:11&quot;</span>;</span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">Date d = sdf.parse(s);</span><br><span class="line">System.out.println(d);</span><br><span class="line"><span class="comment">//输出结果为：Sun Aug 09 11:11:11 CST 2048</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="11-3-Calendar"><a href="#11-3-Calendar" class="headerlink" title="11.3. Calendar"></a>11.3. Calendar</h3><h4 id="11-3-1-概述"><a href="#11-3-1-概述" class="headerlink" title="11.3.1. 概述"></a>11.3.1. 概述</h4><ul>
<li>Calendar为某一时刻和一组日历字段之间的转换提供了一些方法，并为操作日历字段提供了一些方法。</li>
<li>Calendar提供了一个类方法getInstance用于获取Calendar对象，其日历字段已使用当前日期和时间初始化。</li>
<li><code>Calendar rightNow = Calendar.getInstance();</code></li>
<li>注意：月数是从0开始的。<h4 id="11-3-2-Calendar类的常用方法"><a href="#11-3-2-Calendar类的常用方法" class="headerlink" title="11.3.2. Calendar类的常用方法"></a>11.3.2. Calendar类的常用方法</h4></li>
<li><code>public int get(int field)</code><ul>
<li>返回给定日历字段的值</li>
</ul>
</li>
<li><code>public abstract void add(int field, int amount)</code><ul>
<li>根据日历的规则，将指定的时间量添加或减去给定的日历字段</li>
</ul>
</li>
<li><code>public final void set(int year, int month, int date)</code><ul>
<li>设置当前日历的年月日</li>
</ul>
</li>
</ul>
<!--more-->
]]></content>
      <categories>
        <category>技术</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>低谷</title>
    <url>/2021/04/25/%E4%BD%8E%E8%B0%B7/</url>
    <content><![CDATA[<h5 id="来源：十点读书（微信公众号）"><a href="#来源：十点读书（微信公众号）" class="headerlink" title="来源：十点读书（微信公众号）"></a>来源：十点读书（微信公众号）</h5><h5 id="文章名：人在低谷时，请默念这三句话"><a href="#文章名：人在低谷时，请默念这三句话" class="headerlink" title="文章名：人在低谷时，请默念这三句话"></a>文章名：<a href="https://mp.weixin.qq.com/s/Aj_QTVWfMSn0mhb7cGbA8w">人在低谷时，请默念这三句话</a></h5><hr>
<p>&ensp;&ensp;&ensp;&ensp;法国作家加缪说：</p>
<p>&ensp;&ensp;&ensp;&ensp;“我并不期待人生可以一直过得很顺利，但我希望碰到人生难关的时候，自己可以是它的对手。”</p>
<hr>
<h2 id="低谷是人生常态"><a href="#低谷是人生常态" class="headerlink" title="低谷是人生常态"></a><center>低谷是人生常态</center></h2><p>&ensp;&ensp;&ensp;&ensp;生活中，尝尝会出现这样的想法：</p>
<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;觉得自己太没用了，找不到自己存在的意义。</p>
<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;生活太累了，上班太累了，可是不努力又不行。</p>
<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;羡慕别人拥有的一切，反观自己却一无是处。</p>
<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;……</p>
<p>&ensp;&ensp;&ensp;&ensp;其实啊，每个人都应该认清：</p>
<p>&ensp;&ensp;&ensp;&ensp;<font color=#DB5C5C>低谷是常态，高潮才是偶然。</font></p>
<p>&ensp;&ensp;&ensp;&ensp;人生很多事都是不能如你所愿的，从考试、升学、恋爱、社交，再到工作、婚姻、育儿、生离死别……</p>
<p>&ensp;&ensp;&ensp;&ensp;世上的事情，都经不起推敲。一推敲，每一件都藏着委屈。</p>
<p>&ensp;&ensp;&ensp;&ensp;作家余华说过：</p>
<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;生命就像是一个疗伤的过程，我们受伤，痊愈，再受伤，再痊愈。</p>
<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;每一次的痊愈好像都是为了迎接下一次的受伤。</p>
<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;或许总要彻彻底底地绝望一次，才能重新活一次。</p>
<p>&ensp;&ensp;&ensp;&ensp;身处高峰时莫得意，身处低谷时莫丧气，便是成年人最了不起的能力。</p>
<hr>
<h2 id="人生没有过不去的坎"><a href="#人生没有过不去的坎" class="headerlink" title="人生没有过不去的坎"></a><center>人生没有过不去的坎</center></h2><br>

<p>&ensp;&ensp;&ensp;&ensp;<font color=#DB5C5C>很多时候，当下那个我们以为跨不过去的坎，一段时间之后回过头看，其实早就轻松跳过了。</font></p>
<p>&ensp;&ensp;&ensp;&ensp;<font color=#DB5C5C>当下我们以为撑不住的时刻，其实忍着熬着也就自然而然地过去了。</font></p>
<p>&ensp;&ensp;&ensp;&ensp;<font color=#DB5C5C>人生没有过不去的坎，熬过低谷，所有心酸和苦痛，有一天都可以笑着说出来。</font></p>
<br>

<hr>
<h2 id="没人扶的时候，靠自己站稳"><a href="#没人扶的时候，靠自己站稳" class="headerlink" title="没人扶的时候，靠自己站稳"></a><center>没人扶的时候，靠自己站稳</center></h2><br>

<p>&ensp;&ensp;&ensp;&ensp;看过这样一个问答：</p>
<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;问：“如果命运是一条孤独的河流，谁会是你灵魂的摆渡人？”</p>
<p>&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;答：“自己。”</p>
<p>&ensp;&ensp;&ensp;&ensp;有些苦必须自己扛，自己熬。越是人生低谷，越要一个人默默熬过。</p>
<p>&ensp;&ensp;&ensp;&ensp;<font color=#DB5C5C>当你靠自己时，你才会发现，只要坚持努力，那些失去的都会渐渐以另一种方式归来；</font></p>
<p>&ensp;&ensp;&ensp;&ensp;<font color=#DB5C5C>当你靠自己时，你才会醒悟，这世界就是你一个人的升级打怪的过程，别人爱莫能助；</font></p>
<p>&ensp;&ensp;&ensp;&ensp;<font color=#DB5C5C>当你靠自己时，你才会理解，以前能把你折磨到到崩溃的，都变成了现在强大的地方；</font></p>
<hr>
<p>&ensp;&ensp;&ensp;&ensp;世人无数，可能真的有人可以无忧无虑一辈子，没有烦恼，没有悲伤。</p>
<p>&ensp;&ensp;&ensp;&ensp;但更多的是许许多多像我们一样过着普通日子的普通人。</p>
<p>&ensp;&ensp;&ensp;&ensp;有喜怒哀乐，有悲欢离合，有纠结挣扎，有无奈沮丧，在生存和生活间徘徊。</p>
<p>&ensp;&ensp;&ensp;&ensp;那些被称之为低谷的日子，终有一天待你回望，也不过如此。</p>
<p>&ensp;&ensp;&ensp;&ensp;<font color=#DB5C5C>时间会给你很多答案，没有什么难是熬不过去的，也没有什么悲伤是永远不会消散的。</font></p>
]]></content>
      <categories>
        <category>文摘</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络文摘</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之数组</title>
    <url>/2021/04/25/Java%E4%B9%8B%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><ul>
<li>数组（array）是一种用于存储多个相同类型数据的存储模型<a id="more"></a>

</li>
</ul>
<h2 id="二、格式"><a href="#二、格式" class="headerlink" title="二、格式"></a>二、格式</h2><h3 id="2-1-格式一"><a href="#2-1-格式一" class="headerlink" title="2.1. 格式一"></a>2.1. 格式一</h3><ul>
<li>数据类型[] 变量名</li>
<li>范例：int[] arr</li>
<li>定义了一个int类型的数组，数组名是arr数组</li>
</ul>
<h3 id="2-2-格式二"><a href="#2-2-格式二" class="headerlink" title="2.2. 格式二"></a>2.2. 格式二</h3><ul>
<li>数据类型 变量名[]</li>
<li>范例：int arr[]</li>
<li>定义了一个int类型的变量，变量名是arr数组</li>
</ul>
<h2 id="三、数组初始化"><a href="#三、数组初始化" class="headerlink" title="三、数组初始化"></a>三、数组初始化</h2><h3 id="3-1-简介"><a href="#3-1-简介" class="headerlink" title="3.1. 简介"></a>3.1. 简介</h3><ul>
<li>Java中的数组必须先初始化，然后才能使用</li>
<li>所谓初始化：就是为数组中的数组元素分配内存空间，并为每个数组元素赋值</li>
<li>数组在初始化时，会为存储空间添加默认值<ul>
<li>整数：默认值0</li>
<li>浮点数：默认值0.0</li>
<li>布尔值：默认值false</li>
<li>字符：默认值是空字符</li>
<li>引用数据类型：默认值是null</li>
</ul>
</li>
</ul>
<h3 id="3-2-动态初始化"><a href="#3-2-动态初始化" class="headerlink" title="3.2. 动态初始化"></a>3.2. 动态初始化</h3><ul>
<li>动态初始化时只指定数组长度，由系统为数组分配初始值</li>
<li>格式<ul>
<li><code>数据类型[] 变量名 = new 数据类型[数组长度];</code></li>
</ul>
</li>
<li>范例<ul>
<li><code>int[] arr = new int[3];</code></li>
</ul>
</li>
</ul>
<h3 id="3-3-静态初始化"><a href="#3-3-静态初始化" class="headerlink" title="3.3. 静态初始化"></a>3.3. 静态初始化</h3><ul>
<li>静态初始化时指定每个数组元素的初始值，由系统决定数组长度</li>
<li>格式<ul>
<li>数据类型[] 变量名 = new 数据类型[]{数据1，数据2，数据3，……};</li>
<li>范例<ul>
<li><code>int[] arr = new int[]&#123;1,2,3&#125;;</code></li>
</ul>
</li>
</ul>
</li>
<li>简化格式<ul>
<li>数据类型[] 变量名 = {数据1，数据2，数据3，……};<ul>
<li>范例<ul>
<li><code>int[] arr = &#123;1,2,3&#125;;</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="四、数组操纵的常见问题"><a href="#四、数组操纵的常见问题" class="headerlink" title="四、数组操纵的常见问题"></a>四、数组操纵的常见问题</h2><ul>
<li>索引越界<ul>
<li>访问了数组中不存在的索引对应的元素，造成索引越界问题</li>
</ul>
</li>
<li>空指针异常<ul>
<li>访问的数组已经不再指向堆内存的数据，造成空指针异常</li>
</ul>
</li>
<li>null<ul>
<li>空值，引用数据类型的默认值，表示不指向任何有效对象</li>
</ul>
</li>
</ul>
<!--more-->
]]></content>
      <categories>
        <category>技术</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>你要去相信,没有到不了的明天</title>
    <url>/2021/04/25/%E4%BD%A0%E8%A6%81%E5%8E%BB%E7%9B%B8%E4%BF%A1-%E6%B2%A1%E6%9C%89%E5%88%B0%E4%B8%8D%E4%BA%86%E7%9A%84%E6%98%8E%E5%A4%A9/</url>
    <content><![CDATA[<h5 id="书名：你要去相信，没有到不了的明天"><a href="#书名：你要去相信，没有到不了的明天" class="headerlink" title="书名：你要去相信，没有到不了的明天"></a>书名：你要去相信，没有到不了的明天</h5><h5 id="作者：卢思浩"><a href="#作者：卢思浩" class="headerlink" title="作者：卢思浩"></a>作者：卢思浩</h5><hr>
<h5 id="1"><a href="#1" class="headerlink" title="1"></a>1</h5><p>&emsp;&emsp;人就是这样，拥有的时候不知道珍惜，失去之后追悔莫及。我们一再地追忆旧时光，为一部部系列电影埋单，为一次次的错过和分开难过，却从没想过我们挥霍的今天，正在变成以后再也回不去的旧时光。</p>
<hr>
<a id="more"></a>
<h5 id="2"><a href="#2" class="headerlink" title="2"></a>2</h5><p>&emsp;&emsp;请好好守护曾经坚定的信念、曾经感动的感情、曾经灿烂的梦想，不要随便把这些丢下，否则在未来的夜里，你会因为把这些都留在了回忆里而难过不已。</p>
<p>&emsp;&emsp;永远要在现在努力。如果你不把今天过得比昨天更有意义，那明天的到来又有什么用呢？</p>
<hr>
<h5 id="3"><a href="#3" class="headerlink" title="3"></a>3</h5><p>&emsp;&emsp;人生有多残酷，你就该有多坚强。现在让你难过的事情，许久回过头来看都会觉得那不算事，你之所以会把痛苦看得那么重，是因为你经历得不够多。觉得难过的时候，不妨告诉自己，现在正是你蜕变的契机。</p>
<hr>
<h5 id="4"><a href="#4" class="headerlink" title="4"></a>4</h5><p>&emsp;&emsp;失去的未必真的失去了，得到的也未必永远都是你的。</p>
<hr>
<h5 id="5"><a href="#5" class="headerlink" title="5"></a>5</h5><p>&emsp;&emsp;后来我才明白，与其担心未来，不如现在好好努力。这条路上，只有奋斗才能给你安全感。不要轻易把梦想寄托在某个人身上，也不要太在乎身旁的耳语，因为未来是你自己的，只有你自己能给自己最大的安全感。别忘了答应自己要做的事情，别忘了自己想去的地方，不管那有多难，有多远，有多“不靠谱”。</p>
<p>&emsp;&emsp;当你犹豫的时候，这个世界就很大；当你勇敢地踏出第一步的时候，这个世界就很小。等到有一天你变成了你喜欢的自己的时候，谁还会质疑你的选择不靠谱呢？你已经变成更好的你了，一定会遇到更好的人的。你是谁，就会遇到谁。</p>
<p>&emsp;&emsp;重要的是，不管做怎样的选择，都要对得起自己的内心。就像上面写的一样：很多年后，当你再次回想起来，唯一让你觉得真实和骄傲的，是你昂首挺胸用力走过的人生。</p>
<hr>
<h5 id="6"><a href="#6" class="headerlink" title="6"></a>6</h5><p>&emsp;&emsp;有时候你需要真正的颠肺流离，那会让你觉出生活的不易和艰辛，那不是自暴自弃，而是一种逐渐成长得到的心平气和。你需要被伤害、被拒绝，才能变得更坚强，更珍惜现在得到的一切。你需要去远方，只带上自己。更多时候，旅行的意义不在于你拍了多少照片，买了多少纪念品，去了哪些地方，而在于你经历了多少疯狂的瞬间，是不是看到了不一样的自己，是否找到了那个你能够分享喜悦和难过的人。</p>
<p>&emsp;&emsp;其实伤害也不见得是天大的坏事，重点在于你是不是能够在跌倒之后重新站起来。你是一个怎样的人，不在于你跌倒了多少次，而在于你站起来重新来过多少次。</p>
<p>&emsp;&emsp;生活没有那么多原因，也许几年后你回过头来看，才发现自己的改变来源于看似不经意的小事，等到那时候，其实梦想已经握在你手中了，实现不实现，它都在那里，因为你已经找到了最好的自己。就算这个世界真的是一个疯狂的世界，就算最后我也只是一个一事无成的我，我也觉得没有什么大不了的。我知道自己努力过，更何况，我真的有感觉到，有这么多人跟我在一起为了各自的梦想努力着。</p>
<hr>
<h5 id="7"><a href="#7" class="headerlink" title="7"></a>7</h5><p>&emsp;&emsp;有些东西，消失了就是消失了，即使大多数时候你根本说不清这东西是什么。这个世界上，最怕的，是当你最需要爱的时候，你需要的那个人却不在。慢慢地，你觉得，少了他好像自己也能活下去。</p>
<hr>
<h5 id="8"><a href="#8" class="headerlink" title="8"></a>8</h5><p>&emsp;&emsp;有些东西你要相信它才会存在，你要相信自己，要相信奇迹，不必感伤不必害怕，因为你就是那个奇迹。只有相信奇迹的人，奇迹才会选择你。</p>
<hr>
<h5 id="9"><a href="#9" class="headerlink" title="9"></a>9</h5><p>&emsp;&emsp;总有一天，你的菱角会被世界磨平，你会拔掉身上的刺，你会微笑应对讨厌的人，你会变成一个不动声色的大人。我常觉得自己还没有准备好，就已经长大了。大人的世界比想象的更难懂，有那么多字典里无法解释的字眼，有那么多努力做好了也不会被所有人喜欢的事情。</p>
<hr>
<h5 id="10"><a href="#10" class="headerlink" title="10"></a>10</h5><p>&emsp;&emsp;你想得越多，顾虑就越多，什么都不想的时候反而能一往无前；你害怕得越多，困难就越多，什么都不怕的时候一切反而没那么难。这世界就是这样，当你不敢去实现梦想的时候，梦想会离你越来越远，当你勇敢地去追梦的时候，全世界都会来帮你。</p>
<hr>
<h5 id="11"><a href="#11" class="headerlink" title="11"></a>11</h5><p>&emsp;&emsp;所有牛逼后面都是一道道苦逼的高墙，所有的苦逼背后都是一次次别人看不见的坚持。关于你的未来，只有你自己才知道。</p>
<p>&emsp;&emsp;所以，管他呢，管别人怎么看，做自己想要的，努力到坚持不下去为止。既然解释不清，那就不要去解释。没有人在意你的青春，也别让别人左右了你的青春。这个世界没那么在意你，也别让世界改变你的节奏。</p>
<hr>
<h5 id="12"><a href="#12" class="headerlink" title="12"></a>12</h5><p>&emsp;&emsp;选择做一件事情，做你最喜欢的事情，把其他的都抛开。把这件事情做到你想要做到的极致，把这件事情做到你梦想中的最大化。永远不要害怕梦想太大，只有很大的梦想才拥有你向上的无限可能性。站得高才能望得远，梦想这东西也一样。从另一个角度来讲，永远要相信自己可以比现在走得更远，永远不要因为现在所取得的一点点小成绩而沾沾自喜。</p>
<p>&emsp;&emsp;选择，本身就意味着要放弃另外一些东西。有时没有选择反而是更好的选择，没有退路反而是更好的出路。我们最容易犯的错误就是以为生活在别处，所以我们轻易地放弃一份工作、一种兴趣，我们总认为我们可以在很多事情上做得很好，这件事情不行换件事情做就行了，所以三天打鱼两天晒网。即便你可以在很多事情上做得很好，也做不到无可替代的程度，到头来，你也只是在Average上下徘徊，怎么也没能达到你想要的层次。</p>
<p>&emsp;&emsp;所以试着去听从内心的声音，不要在乎外面的掌声。选择最喜欢的一件事情做，把它当成你最重要的事情来做，在这件事情上做到最好，而不是去不断尝试别人看来很好的。还是那句话，唯有割舍，才能专注；唯有放弃，才能追求。</p>
<p>&emsp;&emsp;经得起诱惑，耐得住寂寞，永远是成功道路上的不二法则。</p>
<hr>
<h5 id="13"><a href="#13" class="headerlink" title="13"></a>13</h5><p>&emsp;&emsp;每个人表现出来的，都是光鲜的想让别人看到的外衣，你梦想过他们的生活的同时，却没有看到他们背后付出的代价。根本就不存在一蹴而就的说法，即使你偶尔幸运走上了神坛，你也会因为本身实力不足而跌落下来。那些屹立不倒的，哪儿不是付出了千百倍的努力？</p>
<hr>
<h5 id="14"><a href="#14" class="headerlink" title="14"></a>14</h5><p>&emsp;&emsp;如果你真的不知道自己要什么，就安静下来，寻找自己身上的闪光点，寻找你想要做的事情。生命本就没有意义，你能给它什么样的意义，它就会有什么样的意义。</p>
<p>&emsp;&emsp;很多时候，你觉得难过，是因为你追逐的不是更好，而是比别人更好。所以你把自己的未来限定在了一个很小的框框内，过着看起来安稳却让你不甘的人生。</p>
<p>&emsp;&emsp;让你不甘的人生，那就不要过。不知道自己想要什么，至少能够知道自己不想要什么。</p>
<hr>
<h5 id="15"><a href="#15" class="headerlink" title="15"></a>15</h5><p>&emsp;&emsp;不知道走哪条路的时候，就把眼前的路走好吧。觉得焦虑的时候，就去做眼前那些让你逃避的事情吧。不管做什么事情，一定都会有回报。生命是一张单程票，无法回头但是可以转弯。</p>
<p>&emsp;&emsp;越是漫长，越要平静；越是害怕，越要面对；越是困难，越要倔强；越是困难的梦想，就越是有去实现的价值。</p>
<p>&emsp;&emsp;无论什么时候都不要放弃希望，哪怕看不清前面的路，哪怕你是孤单一人。因为只有你放弃的时候，你才真的输了。</p>
<p>&emsp;&emsp;你不会因为一件事情一步登天，也不会因为一件事情而一蹶不振。慢慢走，慢慢看，生命是个慢慢累积的过程，而这过程中，你唯一要做的，也是最重要的前提，就是不要放弃努力。</p>
<hr>
<h5 id="16"><a href="#16" class="headerlink" title="16"></a>16</h5><p>&emsp;&emsp;你不认清这个世界，就没有办法完全接受它；你不去接受它，那你就没有办法从幻灭中重新开始。你需要被这个世界狠狠地打击，狠狠地跌倒，才能真真正正脚踏实地地站在这片大地上。</p>
<hr>
<h5 id="17"><a href="#17" class="headerlink" title="17"></a>17</h5><p>&emsp;&emsp;生活中，并不是自己努力就什么都可以做到的。很多时候我们都会无能为力，大家都一样，没必要为难自己。人生很长，要看到新的希望；人生又很短，如果一直用消极情绪困扰自己，就太不值得了。</p>
<hr>
<h5 id="18"><a href="#18" class="headerlink" title="18"></a>18</h5><p>&emsp;&emsp;曾经也有个阶段觉得父母不可理喻，想离家越远越好。离开家了才发现，其实他们也有梦想，也曾经风华正茂，只是他们的梦想变成了我，我过得好他们就好。如果没有我，他们早就实现梦了。在你为了感情要死要活的时候，当你累的时候，想想你身后的父母正在为你打拼，这就是你今天需要坚强的理由。</p>
<hr>
<h5 id="19"><a href="#19" class="headerlink" title="19"></a>19</h5><p>&emsp;&emsp;成长不过是你哪怕难过得快死掉了，但你第二天还是照常去上课上班。没有人知道你发生了什么，也没有人在意你发生了什么。</p>
<p>&emsp;&emsp;世界归根结底是我们一个人得去扛起的，所以你再怎么悲伤也没人能卸下你的负担，哭完了就得继续扛下去。</p>
<hr>
<h5 id="20"><a href="#20" class="headerlink" title="20"></a>20</h5><p>&emsp;&emsp;你必须非常努力，才能看起来毫不费力，即使躺着中枪，也要姿势漂亮。</p>
<hr>
<!--more-->
]]></content>
      <categories>
        <category>文摘</category>
        <category>书籍</category>
      </categories>
      <tags>
        <tag>书籍</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之运算符</title>
    <url>/2021/04/20/Java%E4%B9%8B%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<h2 id="一、算术运算符"><a href="#一、算术运算符" class="headerlink" title="一、算术运算符"></a>一、算术运算符</h2><h3 id="1-1-运算符和表达式"><a href="#1-1-运算符和表达式" class="headerlink" title="1.1. 运算符和表达式"></a>1.1. 运算符和表达式</h3><ul>
<li>运算符：对常量或者变量进行操作的符号</li>
<li>表达式：用运算符把常量或者变量连接起来符合java语法的式子就可以称为表达式。不同运算符连接的表达式体现的是不同类型的表达式。</li>
<li>范例<ul>
<li><code>int a = 10;</code></li>
<li><code>int b = 20;</code></li>
<li><code>int c = a + b;</code><a id="more"></a>

</li>
</ul>
</li>
</ul>
<h3 id="1-2-算术运算符"><a href="#1-2-算术运算符" class="headerlink" title="1.2. 算术运算符"></a>1.2. 算术运算符</h3><ul>
<li>加、减、乘、除、取余</li>
</ul>
<h3 id="1-3-字符的-操作"><a href="#1-3-字符的-操作" class="headerlink" title="1.3. 字符的+操作"></a>1.3. 字符的<code>+</code>操作</h3><ul>
<li>是拿字符在计算机底层对应的数值来进行计算的<ul>
<li><code>&#39;A&#39; -&gt; 65</code></li>
<li><code>&#39;a&#39; -&gt; 97</code></li>
<li><code>&#39;0&#39; -&gt; 48</code></li>
</ul>
</li>
<li>算术表达式中包含多个基本数据类型的值的时候，整个算术表达式的类型会自动进行提升。</li>
<li>提升规则：<ul>
<li><code>byte</code>类型、<code>short</code>类型和<code>char</code>类型将被提升到<code>int</code>类型</li>
<li>整个表达式的类型自动提升到表达式中最高等级操作数同样的类型</li>
<li>等级顺序：<code>byte</code>、<code>short</code>、<code>char</code> -&gt; <code>int</code> -&gt; <code>long</code> -&gt; <code>float</code> -&gt; <code>double</code><h3 id="1-4-字符串的-操作"><a href="#1-4-字符串的-操作" class="headerlink" title="1.4. 字符串的+操作"></a>1.4. 字符串的<code>+</code>操作</h3></li>
<li>当<code>+</code>操作中出现字符串时，这个<code>+</code>是字符串连接符，而不是算术运算。</li>
<li>在<code>+</code>操作中，如果出现了字符串，就是连接运算符，否则就是算术运算。当连续进行<code>+</code>操作时，从左到右逐个执行。</li>
</ul>
</li>
</ul>
<h2 id="二、赋值运算符"><a href="#二、赋值运算符" class="headerlink" title="二、赋值运算符"></a>二、赋值运算符</h2><ul>
<li><code>=</code><ul>
<li>赋值</li>
</ul>
</li>
<li><code>+=</code><ul>
<li>加后赋值</li>
</ul>
</li>
<li><code>-=</code><ul>
<li>减后赋值</li>
</ul>
</li>
<li><code>*=</code><ul>
<li>乘后赋值</li>
</ul>
</li>
<li><code>/=</code><ul>
<li>除后赋值</li>
</ul>
</li>
<li><code>%=</code><ul>
<li>取余后赋值</li>
</ul>
</li>
<li>扩展的赋值运算隐含了强制类型转换</li>
</ul>
<h2 id="三、自增自减运算符"><a href="#三、自增自减运算符" class="headerlink" title="三、自增自减运算符"></a>三、自增自减运算符</h2><ul>
<li><code>++</code><ul>
<li>自增，变量的值加1</li>
</ul>
</li>
<li><code>--</code><ul>
<li>自减，变量的值减1</li>
</ul>
</li>
<li><code>++</code>和<code>--</code>既可以放在变量的后边，也可以放在变量的前边</li>
<li>单独使用的时候，<code>++</code>和<code>--</code>无论是放在变量的前边还是后边，结果是一样的</li>
<li>参与操作的时候，如果放在变量的后边，先拿变量参与操作，后拿变量做<code>++</code>或者<code>--</code></li>
<li>参与操作的时候，如果放在变量的前边，先拿变量做<code>++</code>或者<code>--</code>，后拿变量参与操作</li>
</ul>
<h2 id="四、关系运算符"><a href="#四、关系运算符" class="headerlink" title="四、关系运算符"></a>四、关系运算符</h2><ul>
<li><code>==</code><ul>
<li><code>a==b</code>，判断a和b的值是否相等，成立为true，不成立为false</li>
</ul>
</li>
<li><code>!=</code><ul>
<li><code>a!=b</code>，判断a和b的值是否不相等，成立为true，不成立为false</li>
</ul>
</li>
<li><code>&gt;</code><ul>
<li><code>a&gt;b</code>，判断a是否大于b，成立为true，不成立为false</li>
</ul>
</li>
<li><code>&gt;=</code><ul>
<li><code>a&gt;=b</code>，判断a是否大于等于b，成立为true，不成立为false</li>
</ul>
</li>
<li><code>&lt;</code><ul>
<li><code>a&lt;b</code>，判断a是否小于b，成立为true，不成立为false</li>
</ul>
</li>
<li><code>&lt;=</code><ul>
<li><code>a&lt;=b</code>，判断a是否小于等于b，成立为true，不成立为flase</li>
</ul>
</li>
<li>关系运算符的结果都是Boolean类型，只有true和false。</li>
</ul>
<h2 id="五、逻辑运算符"><a href="#五、逻辑运算符" class="headerlink" title="五、逻辑运算符"></a>五、逻辑运算符</h2><ul>
<li>逻辑运算符是用来连接关系表达式的运算符</li>
<li>逻辑运算符也可以直接连接布尔类型的常量或者变量</li>
<li><code>&amp;</code><ul>
<li>逻辑与 a&amp;b，a和b都是true，结果为true，否则为false</li>
</ul>
</li>
<li><code>|</code><ul>
<li>逻辑或 a|b，a和b都是false，结果为false，否则为true</li>
</ul>
</li>
<li><code>^</code><ul>
<li>逻辑异或 a^b，a和b结果不同为true，相同为false</li>
</ul>
</li>
<li><code>!</code><ul>
<li>逻辑非 !a，结果和a的结果正好相反</li>
</ul>
</li>
</ul>
<h2 id="六、短路逻辑运算符"><a href="#六、短路逻辑运算符" class="headerlink" title="六、短路逻辑运算符"></a>六、短路逻辑运算符</h2><ul>
<li><code>&amp;&amp;</code><ul>
<li>短路与</li>
<li>作用和<code>&amp;</code>相同，但是有短路效果</li>
</ul>
</li>
<li><code>||</code><ul>
<li>短路或</li>
<li>作用和|相同，但是有短路效果</li>
</ul>
</li>
<li>逻辑与<code>&amp;</code>，无论左边真假，右边都要执行</li>
<li>短路与<code>&amp;&amp;</code>，如果左边为真，右边执行；如果左边为假，右边不执行</li>
<li>逻辑或|，无论左边真假，右边都要执行</li>
<li>短路或||，如果左边为假，右边执行；如果左边为真，右边不执行</li>
<li>最常用的逻辑运算符：<code>&amp;&amp;</code>、<code>||</code>、<code>!</code></li>
</ul>
<h2 id="七、三元运算符"><a href="#七、三元运算符" class="headerlink" title="七、三元运算符"></a>七、三元运算符</h2><ul>
<li>格式：关系表达式？表达式1：表达式2；</li>
<li>范例：a &gt; b ? a : b;</li>
<li>计算规则：<ul>
<li>首先计算关系表达式的值</li>
<li>如果值为true，表达式1的值就是运算结果</li>
<li>如果值为false，表示式2的值就是运算结果</li>
</ul>
</li>
</ul>
<!--more-->
]]></content>
      <categories>
        <category>技术</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>个人礼仪</title>
    <url>/2021/04/06/%E4%B8%AA%E4%BA%BA%E7%A4%BC%E4%BB%AA/</url>
    <content><![CDATA[<h2 id="一、举止"><a href="#一、举止" class="headerlink" title="一、举止"></a>一、举止</h2><h3 id="1-1-丰富自己的表情"><a href="#1-1-丰富自己的表情" class="headerlink" title="1.1. 丰富自己的表情"></a>1.1. 丰富自己的表情</h3><ul>
<li>路遇熟人、与人见面之初要微笑，与人交谈、争论时表情应缓和。即使有激烈争论，也不要过于冷酷。</li>
<li>拜访师长、应邀访问、接待客人时，表情要丰富热情、柔和。</li>
<li>当众讲话时，表情要随着发言的内容做相应变化，不要一个表情做到底。</li>
</ul>
<h3 id="1-2-注意清除牙齿上的食物残渣或口红"><a href="#1-2-注意清除牙齿上的食物残渣或口红" class="headerlink" title="1.2. 注意清除牙齿上的食物残渣或口红"></a>1.2. 注意清除牙齿上的食物残渣或口红</h3><ul>
<li>出门、拜访比人前，参加公开场合的活动前，一定要检查自己的牙齿是否干净。</li>
</ul>
<h3 id="1-3-仪容要与言行相配"><a href="#1-3-仪容要与言行相配" class="headerlink" title="1.3. 仪容要与言行相配"></a>1.3. 仪容要与言行相配</h3><ul>
<li>在任何时候面对别人，都不应当吐脏字，说粗俗不堪的话，开恶俗的玩笑。</li>
<li>穿庄重的礼服时，行为举止一定要端庄大方，避免挖鼻孔、随地吐痰等不雅的行为。</li>
<li>任何时候，都应当善待自己的妆容和服饰，不要随处乱坐，拿袖子当抹布或者将手机、打火机等拿在手中把玩不止。</li>
</ul>
<h3 id="1-4-杜绝经常用手整理头发的习惯"><a href="#1-4-杜绝经常用手整理头发的习惯" class="headerlink" title="1.4. 杜绝经常用手整理头发的习惯"></a>1.4. 杜绝经常用手整理头发的习惯</h3><ul>
<li>出门前将头发梳理好。</li>
<li>整理头发时要避开人，要在卫生间等场所私下整理。</li>
<li>及时修剪头发、清洗头发，避免头发脏污、发痒，不要养成总是用手摸头发、捋头发、搔头发的习惯。</li>
</ul>
<h2 id="二、坐姿"><a href="#二、坐姿" class="headerlink" title="二、坐姿"></a>二、坐姿</h2><ul>
<li>面对客人、主任，或在较为正式的场合，坐椅子前端的2/3即可。</li>
<li>半躺半坐、身子歪斜、身体大幅度前倾，双腿乱抖，也都是不雅的坐姿。</li>
<li>坐在椅子上时，不要把脚架在椅子扶手上或用力向下、向后缩在椅子下面。</li>
</ul>
<h2 id="三、站立"><a href="#三、站立" class="headerlink" title="三、站立"></a>三、站立</h2><ul>
<li>站立时，身体应自然挺直，不倚靠任何桌椅、墙壁等物。</li>
<li>站立劳累时，可稍事走动或坐下休息、找人替换等，但不应随意借力。</li>
<li>站立时，身体不要随意扭动，不要有跺脚、踏步、抖腿等小动作。</li>
<li>站立时，身体肌肉要自然紧张，同时略微放松，不要僵硬，身体要自然挺直，收腹挺胸，双脚间成45度左右的夹角。</li>
<li>站立时要保持头部适当上扬，不低头，头和肩不歪斜。</li>
<li>应避免在手中拿取私人物品把玩。</li>
</ul>
<h2 id="四、走路"><a href="#四、走路" class="headerlink" title="四、走路"></a>四、走路</h2><ul>
<li>结伴行进时，步伐不要太快或太慢，应于同伴们保持一致。</li>
<li>结伴出行时，不要只考虑自己的需要，而应处处以大多数人为行动的参照对象。</li>
<li>有必要先行一步或稍后赶上时，一定要礼貌地提前和大家打招呼，并随时保持联系。</li>
<li>走路时，一定要把脚掌抬起来，但不要抬得太高而不自然。</li>
<li>走路时，即使穿拖鞋也要把脚和鞋抬起来。</li>
<li>走路时，不要歪歪斜斜，而要走直线。</li>
<li>走路时应昂首挺胸，自然地抬头，但不要傲慢地扬着下巴。</li>
<li>走路时表情要自然、从容</li>
<li>杜绝边走边吃的不良习惯</li>
</ul>
<h2 id="五、穿着"><a href="#五、穿着" class="headerlink" title="五、穿着"></a>五、穿着</h2><ul>
<li>衣服一定要勤换勤洗，如果衣服上祛除不掉的污渍非常明显，你应考虑扔掉。</li>
<li>衣服沾染了污迹应马上处理。</li>
<li>出席重要活动或进行短期出差和旅行前一定要备好换洗的衣服。</li>
<li>西装<ul>
<li>西装的质地以毛料为宜，衬衣的质料以纯棉为宜，领带的质地以丝绸为宜。</li>
<li>穿深色西装时要穿颜色和西装接近的袜子。除非穿白色的西装，否则不要穿白色袜子。</li>
<li>西装、衬衣、领带、皮鞋的颜色应该属于同一个色系，全身上下的颜色应该不超过3种。</li>
<li>穿西装时，至少应该从视觉上尽量减少衣服的层数，比如在衬衣内不穿高领、宽松内衣。</li>
<li>在正式场合穿西装必须打领带。</li>
<li>领带的长度以领带尖不触及腰带为宜，宽度以西装衣领的宽度为参照。</li>
<li>领带上的颜色应该不超过3种。</li>
</ul>
</li>
<li>衣兜里不可塞满东西。</li>
<li>男人的腰带和裤袢上不应挂任何东西。</li>
<li>腰带本身就是一件配饰，不必再用别的东西装扮。</li>
<li>钥匙、钱包、手机等杂物可以都放在皮包里。</li>
<li>一套衣服的颜色应该在3种之内。</li>
<li>服装的色彩应以同色系或颜色互补、相配为原则。</li>
<li>戒指<ul>
<li>戒指一般戴在左手上，并且戴一枚就足够了。</li>
<li>无名指上戴戒指表明已婚，中指上戴戒指表示已有恋人，小指上戴戒指表示独身。</li>
<li>食指上戴戒指，表明正在寻找恋人。大拇指上不要戴戒指。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>修身养性</category>
        <category>礼仪</category>
      </categories>
      <tags>
        <tag>礼仪</tag>
      </tags>
  </entry>
  <entry>
    <title>碗</title>
    <url>/2021/04/06/%E7%A2%97/</url>
    <content><![CDATA[<h5 id="来源：四川教育发布（微信公众号）"><a href="#来源：四川教育发布（微信公众号）" class="headerlink" title="来源：四川教育发布（微信公众号）"></a>来源：四川教育发布（微信公众号）</h5><h5 id="文章名：一段感情是好是坏，就看这三点"><a href="#文章名：一段感情是好是坏，就看这三点" class="headerlink" title="文章名：一段感情是好是坏，就看这三点"></a>文章名：<a href="https://mp.weixin.qq.com/s/IIucjdG1mo-uzZuo2WC3Zw">一段感情是好是坏，就看这三点</a></h5><hr>
<ul>
<li>一段感情是好是坏，就看这三点<ul>
<li>始于五官，忠于三观</li>
<li>我是爱你的，你也是自由的</li>
<li>好的感情，互相滋养</li>
</ul>
</li>
</ul>
<hr>
<p>&emsp;&emsp;有个人去买碗，他拿起一只碗去敲打另一只碗，听完声音后说：“这碗不行。”</p>
<p>&emsp;&emsp;老板问：“你这是做啥？”</p>
<p>&emsp;&emsp;他回答：“两只碗碰撞，发出清脆悦耳的声音，就是好碗。”</p>
<p>&emsp;&emsp;老板立即提给他一只碗。</p>
<p>&emsp;&emsp;没想到，这只碗与其他碗相撞，都发出了清脆的响声。</p>
<p>&emsp;&emsp;老板解释说：“你一开始拿的就是个次品，你想得到一只好碗，要保证手上拿的也是好的。”</p>
<p>&emsp;&emsp;<font color=#DB5C5C>想要得到什么东西，最好的办法是让自己配得上它。</font></p>
<p>&emsp;&emsp;<font color=#DB5C5C>感情也是如此，你成为了怎样的人，才能遇见怎样的人。</font></p>
<p>&emsp;&emsp;理智地选择爱情，真诚地经营爱情，有能力承担选择的代价。</p>
<p>&emsp;&emsp;你们独立又亲密，相爱又自由，懂得疼爱和分担，没有斗智斗勇，只有相辅相成。</p>
<p>&emsp;&emsp;最后的结果，一定是朝着幸福的方向前进。</p>
<p>&emsp;&emsp;“一诺千金，相守一生”不是传说，而是一个励志的故事。幸福的感情，都是为有心人准备的。</p>
]]></content>
      <categories>
        <category>文摘</category>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络文摘</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之方法</title>
    <url>/2021/04/06/Java%E4%B9%8B%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><ul>
<li>方法是将具有独立功能的代码块组织成为一个整体，使其具有特殊功能的代码集。</li>
<li>方法必须先创建才可以使用，该过程称为方法定义</li>
<li>方法创建后并不是直接运行的，需要手动使用后才执行，该过程称为方法调用<a id="more"></a>

</li>
</ul>
<h2 id="二、方法定义"><a href="#二、方法定义" class="headerlink" title="二、方法定义"></a>二、方法定义</h2><h3 id="2-1-格式"><a href="#2-1-格式" class="headerlink" title="2.1. 格式"></a>2.1. 格式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-2-范例"><a href="#2-2-范例" class="headerlink" title="2.2. 范例"></a>2.2. 范例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、方法调用"><a href="#三、方法调用" class="headerlink" title="三、方法调用"></a>三、方法调用</h2><ul>
<li>格式：方法名();</li>
<li>范例：a();</li>
</ul>
<h2 id="四、形参和实参"><a href="#四、形参和实参" class="headerlink" title="四、形参和实参"></a>四、形参和实参</h2><ul>
<li>形参：方法定义中的参数</li>
<li>实参：方法调用中的参数</li>
<li>对于基本数据类型的参数，形式参数的改变，不影响实际参数的值</li>
<li>对于引用类型的参数，形式参数的改变，影响实际参数的值</li>
</ul>
<h2 id="五、带返回值的方法"><a href="#五、带返回值的方法" class="headerlink" title="五、带返回值的方法"></a>五、带返回值的方法</h2><ul>
<li>格式<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 数据类型 方法名(参数)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> 数据;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>方法定义时return后面的返回值与方法定义上的数据类型要匹配，否则程序将报错</li>
<li>方法的返回值通常会使用变量接收，否则该返回值将无意义</li>
</ul>
<h2 id="六、方法的注意事项"><a href="#六、方法的注意事项" class="headerlink" title="六、方法的注意事项"></a>六、方法的注意事项</h2><ul>
<li>方法不能嵌套定义</li>
<li>void表示无返回值，可以省略return，也可以单独的书写return，后面不加数据</li>
</ul>
<h2 id="七、方法重载"><a href="#七、方法重载" class="headerlink" title="七、方法重载"></a>七、方法重载</h2><h3 id="7-1-概述"><a href="#7-1-概述" class="headerlink" title="7.1. 概述"></a>7.1. 概述</h3><ul>
<li>方法重载指同一个类中定义的多个方法之间的关系，满足下列条件的多个方法相互构成重载</li>
<li>多个方法在同一个类中</li>
<li>多个方法具有相同的方法名</li>
<li>多个方法的参数不相同，类型不同或者数量不同</li>
</ul>
<h3 id="7-2-方法重载特点"><a href="#7-2-方法重载特点" class="headerlink" title="7.2. 方法重载特点"></a>7.2. 方法重载特点</h3><ul>
<li>重载仅对应方法的定义，与方法的调用无关，调用方式参照标准格式</li>
<li>重载仅针对同一个类中方法的名称与参数进行识别，与返回值无关，换句话说不能通过返回值来判定两个方法是否相互构成重载</li>
</ul>
<!--more-->
]]></content>
      <categories>
        <category>技术</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之面向对象三大特征</title>
    <url>/2021/04/06/Java%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%89%E5%A4%A7%E7%89%B9%E5%BE%81/</url>
    <content><![CDATA[<h2 id="一、封装"><a href="#一、封装" class="headerlink" title="一、封装"></a>一、封装</h2><h3 id="1-1-private关键字"><a href="#1-1-private关键字" class="headerlink" title="1.1. private关键字"></a>1.1. private关键字</h3><ul>
<li>private是一个权限修饰符</li>
<li>可以修饰成员（成员变量和成员方法）</li>
<li>作用是保护成员不被别的类使用，被private修饰的成员只在本类中才能访问</li>
<li>针对private修饰的成员变量，如果需要被其他类使用，提供相应的操作<ul>
<li>提供“get变量名()”方法，用于获取成员变量的值，方法用public修饰</li>
<li>提供“set变量名(参数)”方法，用于设置成员变量的值，方法用public修饰</li>
</ul>
</li>
</ul>
<h3 id="1-2-private关键字的使用"><a href="#1-2-private关键字的使用" class="headerlink" title="1.2. private关键字的使用"></a>1.2. private关键字的使用</h3><ul>
<li>一个标准类的编写<ul>
<li>把成员变量用private修饰。</li>
<li>提供对应的getXxx()/setXxx()方法。</li>
</ul>
</li>
</ul>
<h3 id="1-3-this关键字"><a href="#1-3-this关键字" class="headerlink" title="1.3. this关键字"></a>1.3. this关键字</h3><ul>
<li>this代表所在类的对象引用，方法被哪个对象调用，this就代表哪个对象</li>
<li>this修饰的变量用于指代成员变量</li>
<li>方法的形参如果与成员变量同名，不带this修饰的变量指的是形参，而不是成员变量</li>
<li>方法的形参没有与成员变量同名，不带this修饰的变量指的是成员变量</li>
<li>什么时候使用this<ul>
<li>当局部变量与成员变量名相同时，用this.变量名指代成员变量</li>
</ul>
</li>
</ul>
<h3 id="1-4-封装概述"><a href="#1-4-封装概述" class="headerlink" title="1.4. 封装概述"></a>1.4. 封装概述</h3><ul>
<li>是面向对象三大特征之一（封装、继承、多态）</li>
<li>是面向对象编程语言对客观世界的模拟，客观世界里成员变量都是隐藏在对象内部的，外界是无法直接操作的</li>
</ul>
<h3 id="1-5-封装原则"><a href="#1-5-封装原则" class="headerlink" title="1.5. 封装原则"></a>1.5. 封装原则</h3><ul>
<li>将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过成员变量private，提供对应的getXxx()/setXxx()方法</li>
</ul>
<h3 id="1-6-封装好处"><a href="#1-6-封装好处" class="headerlink" title="1.6. 封装好处"></a>1.6. 封装好处</h3><ul>
<li>(1)通过方法来控制成员变量的操作，提高了代码的安全性</li>
<li>(2)把代码用方法进行封装，提高了代码的复用性</li>
</ul>
<h2 id="二、继承"><a href="#二、继承" class="headerlink" title="二、继承"></a>二、继承</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1. 概述"></a>2.1. 概述</h3><ul>
<li>继承是面向对象三大特征之一，可以使得子类具有父类的属性和方法，还可以在子类中重新定义，追加属性和方法</li>
</ul>
<h3 id="2-2-继承的格式"><a href="#2-2-继承的格式" class="headerlink" title="2.2. 继承的格式"></a>2.2. 继承的格式</h3><ul>
<li>格式：public class 子类名 extends 父类名{}</li>
<li>范例：public class Zi extends Fu{}</li>
<li>Fu：是父类，也被称为基类、超类</li>
<li>Zi：是子类，也被称为派生类</li>
</ul>
<h3 id="2-3-继承中子类的特点"><a href="#2-3-继承中子类的特点" class="headerlink" title="2.3. 继承中子类的特点"></a>2.3. 继承中子类的特点</h3><ul>
<li>子类可以有父类的内容</li>
<li>子类还可以有自己特有的内容</li>
</ul>
<h3 id="2-4-继承的优点"><a href="#2-4-继承的优点" class="headerlink" title="2.4. 继承的优点"></a>2.4. 继承的优点</h3><ul>
<li>提高了代码的复用性（多个类相同的成员可以放到同一个类中）</li>
<li>提高了代码的维护性（如果方法的代码需要修改，修改一处即可）</li>
</ul>
<h3 id="2-5-继承的弊端"><a href="#2-5-继承的弊端" class="headerlink" title="2.5. 继承的弊端"></a>2.5. 继承的弊端</h3><ul>
<li>继承让类与类之间产生了关系，类的耦合性增强了，当父类发生变化时子类实现也不得不跟着变化，削弱了子类的独立性</li>
</ul>
<h3 id="2-6-什么时候使用继承"><a href="#2-6-什么时候使用继承" class="headerlink" title="2.6. 什么时候使用继承"></a>2.6. 什么时候使用继承</h3><ul>
<li>继承体现的关系：什么是什么的一种</li>
<li>假设法：我有两个类A和B，如果他们满足A是B的一种，或者B是A的一种，就说明他们存在继承关系，这个时候就可以考虑使用继承来体现，否则就不能滥用继承</li>
<li>举例：苹果和水果、猫和动物都是继承关系</li>
</ul>
<h3 id="2-7-继承中变量的访问特点"><a href="#2-7-继承中变量的访问特点" class="headerlink" title="2.7. 继承中变量的访问特点"></a>2.7. 继承中变量的访问特点</h3><ul>
<li>在子类方法中访问一个变量的步骤<ul>
<li>(1)子类局部范围找</li>
<li>(2)子类成员范围找</li>
<li>(3)父类成员范围找</li>
<li>(4)如果没有就报错（不考虑父亲的父亲……）</li>
</ul>
</li>
</ul>
<h3 id="2-8-Super"><a href="#2-8-Super" class="headerlink" title="2.8. Super"></a>2.8. Super</h3><ul>
<li><code>super</code>关键字的用法和this关键字的用法相似</li>
<li><code>this</code>关键字指向调用该方法的对象一般我们是在当前类中使用this关键字，所有我们常说this代表本类对象的引用</li>
<li><code>super</code>代表父类存储空间的标识（可以理解为父类对象引用）</li>
<li><code>this</code><ul>
<li>访问成员变量：this.成员变量访问本类成员变量</li>
<li>访问构造方法：this(……)访问本类构造方法</li>
<li>访问成员方法：this.成员方法(……)访问本类成员方法</li>
</ul>
</li>
<li><code>super</code><ul>
<li>访问成员变量：super.成员变量访问父类成员变量</li>
<li>访问构造方法：super(……)访问父类构造方法</li>
<li>访问成员方法：super.成员方法(……)访问父类成员方法</li>
</ul>
</li>
</ul>
<h3 id="2-9-继承中构造方法的访问特点"><a href="#2-9-继承中构造方法的访问特点" class="headerlink" title="2.9. 继承中构造方法的访问特点"></a>2.9. 继承中构造方法的访问特点</h3><ul>
<li>子类中所有的构造方法默认都会访问父类中无参的构造方法，原因如下<ul>
<li>(1)因为子类会继承父类中的数据，可能还会使用父类的数据。所以，子类初始化之前，一定要先完成父类数据的初始化</li>
<li>(2)每一个子类构造方法的第一条语句默认都是super()</li>
</ul>
</li>
<li>如果父类中没有无参构造方法，只有带参构造方法，解决办法如下<ul>
<li>(1)通过使用super关键字去显示的调用父类的带参构造方法</li>
<li>(2)在父类中自己提供一个无参构造方法</li>
</ul>
</li>
<li>建议自己给出无参构造方法</li>
</ul>
<h3 id="2-10-继承中成员方法的访问特点"><a href="#2-10-继承中成员方法的访问特点" class="headerlink" title="2.10. 继承中成员方法的访问特点"></a>2.10. 继承中成员方法的访问特点</h3><ul>
<li>通过子类对象访问一个方法的步骤<ul>
<li>(1)子类成员范围找</li>
<li>(2)父类成员范围找</li>
<li>(3)如果都没有就报错（不考虑父亲的父亲……）</li>
</ul>
</li>
</ul>
<h3 id="2-11-方法重写"><a href="#2-11-方法重写" class="headerlink" title="2.11. 方法重写"></a>2.11. 方法重写</h3><ul>
<li>概述<ul>
<li>子类中出现了和父类中一模一样的方法声明</li>
</ul>
</li>
<li>应用<ul>
<li>当子类需要父类的功能，而功能主体子类有自己特有内容时，可以重写父类中的方法，这样，即沿袭了父类的功能，又定义了子类特有的内容</li>
</ul>
</li>
<li>如何检验是否是重写的方法<ul>
<li>使用@Override，它是一个注解，可以帮助我们检查重写方法的方法什么的正确性</li>
</ul>
</li>
<li>方法重写注意事项<ul>
<li>私有方法不能被重写（父类私有成员子类是不能继承的）</li>
<li>子类方法访问权限不能更低（public &gt; 默认 &gt; 私有）</li>
</ul>
</li>
<li>Java中继承的主要事项<ul>
<li>Java中类只支持单继承，不支持多继承</li>
<li>Java中类支持多层继承，例如：儿子继承了爸爸，爸爸继承了爷爷</li>
</ul>
</li>
</ul>
<h2 id="三、多态"><a href="#三、多态" class="headerlink" title="三、多态"></a>三、多态</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1. 概述"></a>3.1. 概述</h3><ul>
<li>同一个对象，在不同时刻表现出来的不同形态</li>
<li>举例：<ul>
<li>猫是猫：猫 cat = new 猫();</li>
<li>猫是动物：动物 animal = new 猫();</li>
<li>这里猫在不同的时刻表现出来了不同的形态，这就是多态</li>
</ul>
</li>
</ul>
<h3 id="3-2-多态的前提和体现"><a href="#3-2-多态的前提和体现" class="headerlink" title="3.2. 多态的前提和体现"></a>3.2. 多态的前提和体现</h3><ul>
<li>1.有继承/实现关系</li>
<li>2.有方法重写</li>
<li>3.有父类引用指向子类对象</li>
<li>满足这三个现象就称之为多态</li>
</ul>
<h3 id="3-3-多态中成员访问特点"><a href="#3-3-多态中成员访问特点" class="headerlink" title="3.3. 多态中成员访问特点"></a>3.3. 多态中成员访问特点</h3><ul>
<li>成员变量：编译看左边，执行看左边</li>
<li>成员方法：编译看左边，执行看右边</li>
<li>为什么成员变量和成员方法的访问不一样呢？<ul>
<li>因为成员方法有重写，而成员变量没有</li>
</ul>
</li>
</ul>
<h3 id="3-4-多态的好处"><a href="#3-4-多态的好处" class="headerlink" title="3.4. 多态的好处"></a>3.4. 多态的好处</h3><ul>
<li>提高了程序的扩展性</li>
<li>具体体现在定义方法的时候，使用父类型作为参数，将来在使用的时候，使用具体的子类型参与操作</li>
<li>例如<ul>
<li>在定义时：变量为父类 动物 animal = new 猫();</li>
<li>在执行时：执行的是子类中重写的方法</li>
</ul>
</li>
</ul>
<h3 id="3-5-多态的弊端"><a href="#3-5-多态的弊端" class="headerlink" title="3.5. 多态的弊端"></a>3.5. 多态的弊端</h3><ul>
<li>不能使用子类的特有功能</li>
</ul>
<h3 id="3-6-多态中的转型"><a href="#3-6-多态中的转型" class="headerlink" title="3.6. 多态中的转型"></a>3.6. 多态中的转型</h3><h4 id="3-6-1-向上转型"><a href="#3-6-1-向上转型" class="headerlink" title="3.6.1. 向上转型"></a>3.6.1. 向上转型</h4><ul>
<li>从子类到父类</li>
<li>父类引用指向子类对象</li>
<li>范例<ul>
<li><code>Animal a = new Cat();</code></li>
</ul>
</li>
</ul>
<h4 id="3-6-2-向下转型"><a href="#3-6-2-向下转型" class="headerlink" title="3.6.2. 向下转型"></a>3.6.2. 向下转型</h4><ul>
<li>从父类到子类</li>
<li>父类引用转为子类对象</li>
<li>范例<ul>
<li><code>Cat c = (Cat)a;</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之泛型</title>
    <url>/2021/04/06/Java%E4%B9%8B%E6%B3%9B%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><ul>
<li>泛型是JDK5中引入的特性，它提供了编译时类型安全检测机制，该机制允许在编译时检测到非法的类型。它的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。</li>
<li>一提到参数，最熟悉的就是定义方法时有形参，然后调用此方法时传递实参。那么参数化类型怎么理解呢？</li>
<li>顾名思义，就是将类型由原来的具体的类型参数化，然后在使用/调用时传入具体的类型。</li>
<li>这种参数类型可以用在类、方法和接口中，分别被称为泛型类、泛型方法、泛型接口。</li>
</ul>
<h2 id="二、泛型定义格式"><a href="#二、泛型定义格式" class="headerlink" title="二、泛型定义格式"></a>二、泛型定义格式</h2><ul>
<li>&lt;类型&gt;:指定一种类型的格式。这里的类型可以看成是形参。</li>
<li>&lt;类型1，类型2，……&gt;:指定多种类型的格式，多种类型之间用逗号隔开，这里的类型可以看成是形参。</li>
<li>将来具体调用的时候给定的类型可以看成是实参，并且实参的类型只能是引用数据类型。</li>
</ul>
<h2 id="三、泛型的好处"><a href="#三、泛型的好处" class="headerlink" title="三、泛型的好处"></a>三、泛型的好处</h2><ul>
<li>把运行时期的问题提前到了编译期间。</li>
<li>避免了强制类型转换。</li>
</ul>
<h2 id="四、泛型类"><a href="#四、泛型类" class="headerlink" title="四、泛型类"></a>四、泛型类</h2><ul>
<li>泛型类的定义格式<ul>
<li>格式：<code>修饰符 class 类型&lt;类型&gt;&#123;&#125;</code></li>
<li>范例：<code>public class Generic&lt;T&gt;&#123;&#125;</code><ul>
<li>此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span>&lt;<span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T t;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getT</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setT</span><span class="params">(T t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.t = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="五、泛型方法"><a href="#五、泛型方法" class="headerlink" title="五、泛型方法"></a>五、泛型方法</h2><ul>
<li>泛型方法的定义格式<ul>
<li>格式：修饰符&lt;类型&gt;返回值类型 方法名(类型 变量名){}</li>
<li>范例：<code>public &lt;T&gt; void show(T t)&#123;&#125;</code></li>
</ul>
</li>
</ul>
<h2 id="六、泛型接口"><a href="#六、泛型接口" class="headerlink" title="六、泛型接口"></a>六、泛型接口</h2><ul>
<li>泛型接口的定义格式<ul>
<li>格式：<code>修饰符 interface 接口名&lt;类型&gt;&#123;&#125;</code></li>
<li>范例：<code>public interface Generic&lt;T&gt;&#123;&#125;</code></li>
</ul>
</li>
<li>泛型接口的实现<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericImpl</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Generic</span>&lt;<span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="七、类型通配符"><a href="#七、类型通配符" class="headerlink" title="七、类型通配符"></a>七、类型通配符</h2><ul>
<li>为了表示各种泛型List的父类，可以使用类型通配符<ul>
<li>类型通配符：&lt;?&gt;</li>
<li>List&lt;?&gt;：表示元素类型未知的List，它的元素可以匹配任何的类型。</li>
</ul>
</li>
<li>这种带通配符的List仅表示它是各种泛型List的父类，并不能把元素添加到其中。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;?&gt; list1 = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">List&lt;?&gt; list2 = <span class="keyword">new</span> ArrayList&lt;Number&gt;();</span><br></pre></td></tr></table></figure></li>
<li>如果说我们不希望List&lt;?&gt;是任何泛型List的父类，只希望它代表某一类泛型List的父类，可以使用类型通配符的上限<ul>
<li>类型通配符上限：&lt;?extends 类型&gt;<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;? extends Number&gt;：它表示的类型是Number或者其子类型</span><br><span class="line">List&lt;? extends Number&gt; list3 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">List&lt;? extends Number&gt; list4 = <span class="keyword">new</span> ArrayList&lt;Number&gt;();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>除了可以指定类型通配符的上限，我们也可以指定类型通配符的下限<ul>
<li>类型通配符下限：&lt;?super 类型&gt;<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;? <span class="keyword">super</span> Number&gt;：它表示的类型是Number或者其父类型</span><br><span class="line">List&lt;? <span class="keyword">super</span> Number&gt; list5 = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">List&lt;? <span class="keyword">super</span> Number&gt; list6 = <span class="keyword">new</span> ArrayList&lt;Number&gt;();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之反射</title>
    <url>/2021/04/06/Java%E4%B9%8B%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><ul>
<li>Java反射机制是指==在运行时去获取一个类的变量和方法信息，然后通过获取到的信息来创建对象、调用方法的一种机制==。由于这种动态性，可以极大的增强程序的灵活性，程序不用在编译期就完成确定，在运行期仍然可以扩展</li>
</ul>
<h2 id="二、获取Class类的对象"><a href="#二、获取Class类的对象" class="headerlink" title="二、获取Class类的对象"></a>二、获取Class类的对象</h2><h3 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1. 简介"></a>2.1. 简介</h3><ul>
<li>我们要想通过反射区使用一个类，首先我们要获取到该类的字节码文件对象，也就是类型为Class类型的对象</li>
</ul>
<h3 id="2-2-有三种方式获取Class类型的对象"><a href="#2-2-有三种方式获取Class类型的对象" class="headerlink" title="2.2. 有三种方式获取Class类型的对象"></a>2.2. 有三种方式获取Class类型的对象</h3><ul>
<li>(1)使用类的class属性来获取该类对应的Class对象<ul>
<li>举例：Student.class将会返回Student类对应的Class对象<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;Student&gt; c1 = Student.class;</span><br><span class="line">System.out.println(c1);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>(2)调用对象的getClass()方法，返回该对象所属类对应的Class对象<ul>
<li>该方法是Object类中的方法，所有的Java对象都可以调用该方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line">Class&lt;? extends Student&gt; c2 = s.getClass();</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>(3)使用Class类中的静态方法forName(String className)，该方法需要传入字符串参数，该字符串参数的值是某个类的全路径，也就是完整包名的路径<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; c3 = Class.forName(<span class="string">&quot;com.study_1.abc&quot;</span>);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="三、反射获取构造方法并使用"><a href="#三、反射获取构造方法并使用" class="headerlink" title="三、反射获取构造方法并使用"></a>三、反射获取构造方法并使用</h2><h3 id="3-1-Class类中用于获取构造方法的方法"><a href="#3-1-Class类中用于获取构造方法的方法" class="headerlink" title="3.1. Class类中用于获取构造方法的方法"></a>3.1. Class类中用于获取构造方法的方法</h3><ul>
<li>返回所有公共构造方法对象的数组<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Constructor&lt;?&gt;[] getConstructors()</span><br></pre></td></tr></table></figure></li>
<li>返回所有构造方法对象的数组<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Constructor&lt;?&gt;[] getDeclareConstructors()</span><br></pre></td></tr></table></figure></li>
<li>返回单个公共构造方法对象<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Constructor&lt;?&gt; getConstructor(Class&lt;?&gt;...parameterTypes)</span><br></pre></td></tr></table></figure></li>
<li>返回单个构造方法对象<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Constructor&lt;?&gt; getDeclaredConstructor(Class&lt;?&gt;...parameterTypes)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-2-Constructor类中用于创建对象的方法"><a href="#3-2-Constructor类中用于创建对象的方法" class="headerlink" title="3.2. Constructor类中用于创建对象的方法"></a>3.2. Constructor类中用于创建对象的方法</h3><ul>
<li>根据指定的构造方法创建对象<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">T <span class="title">newInstance</span><span class="params">(Object...initargs)</span></span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-3-反射获取构造方法并使用练习"><a href="#3-3-反射获取构造方法并使用练习" class="headerlink" title="3.3. 反射获取构造方法并使用练习"></a>3.3. 反射获取构造方法并使用练习</h3><ul>
<li>通过反射实现如下操作<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student s = <span class="keyword">new</span> Student(<span class="string">&quot;张三&quot;</span>, <span class="number">19</span>, <span class="string">&quot;成都&quot;</span>);</span><br><span class="line">System.out.println(s);</span><br></pre></td></tr></table></figure></li>
<li>基本数据类型也可以通过.class得到对应的Class类型</li>
<li>实现<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取Class对象</span></span><br><span class="line">Class&lt;?&gt; c = Class.forName(<span class="string">&quot;a.Student&quot;</span>)</span><br><span class="line"><span class="comment">//获取无参构造方法，基本数据类型也可以通过.class得到对应的Class类型</span></span><br><span class="line">Constructor&lt;?&gt; con = c.getConstructor(String.class, <span class="keyword">int</span>.class, String.class);</span><br><span class="line"><span class="comment">//通过无参构造方法创建一个对象</span></span><br><span class="line">Object obj = con.newInstance(<span class="string">&quot;张三&quot;</span>, <span class="number">19</span>, <span class="string">&quot;成都&quot;</span>);</span><br><span class="line">System.out.println(obj);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="四、反射获取成员变量并使用"><a href="#四、反射获取成员变量并使用" class="headerlink" title="四、反射获取成员变量并使用"></a>四、反射获取成员变量并使用</h2><h3 id="4-1-Class类中用于获取成员变量的方法"><a href="#4-1-Class类中用于获取成员变量的方法" class="headerlink" title="4.1. Class类中用于获取成员变量的方法"></a>4.1. Class类中用于获取成员变量的方法</h3><ul>
<li>返回所有公共成员变量对象的数组<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Field[] getFields()</span><br></pre></td></tr></table></figure></li>
<li>返回所有成员变量对象的数组<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Field[] getDeclaredFields()</span><br></pre></td></tr></table></figure></li>
<li>返回单个公共成员变量对象<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Field <span class="title">getField</span><span class="params">(String name)</span></span></span><br></pre></td></tr></table></figure></li>
<li>返回单个成员变量对象<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Field <span class="title">getDeclaredField</span><span class="params">(String name)</span></span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="4-2-Field类中用于给成员变量赋值的方法"><a href="#4-2-Field类中用于给成员变量赋值的方法" class="headerlink" title="4.2. Field类中用于给成员变量赋值的方法"></a>4.2. Field类中用于给成员变量赋值的方法</h3><ul>
<li>给obj对象的成员变量赋值为value，什么成员变量使用了这个方法就是给什么成员变量赋值<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(Object obj, Object value)</span></span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="4-3-反射获取成员变量并使用练习"><a href="#4-3-反射获取成员变量并使用练习" class="headerlink" title="4.3. 反射获取成员变量并使用练习"></a>4.3. 反射获取成员变量并使用练习</h3><ul>
<li>通过反射实现如下操作<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line">s.name = <span class="string">&quot;张三&quot;</span>;<span class="comment">//私有的</span></span><br></pre></td></tr></table></figure></li>
<li>实现<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; c = Class.forName(<span class="string">&quot;a.Student&quot;</span>);</span><br><span class="line">Constructor&lt;?&gt; con = c.getConstructor();</span><br><span class="line">Object obj = con.newInstance();</span><br><span class="line">Field nameField = c.getDeclareField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">//public voidAccessible(boolean flag)：值为true时，会取消访问检查，在Java中可以通过反射进行获取实体类中的字段值，当没有设置Field的setAccessible方法为true或将其设置为false时，会在调用的时候进行访问安全检查，会抛出IllegalAccessException异常</span></span><br><span class="line">nameField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//给对象的成员变量赋值，nameField为对象obj的成员变量</span></span><br><span class="line">nameField.set(obj, <span class="string">&quot;张三&quot;</span>);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="五、反射获取成员方法并使用"><a href="#五、反射获取成员方法并使用" class="headerlink" title="五、反射获取成员方法并使用"></a>五、反射获取成员方法并使用</h2><h3 id="5-1-Class类中用于获取成员方法的方法"><a href="#5-1-Class类中用于获取成员方法的方法" class="headerlink" title="5.1. Class类中用于获取成员方法的方法"></a>5.1. Class类中用于获取成员方法的方法</h3><ul>
<li>返回所有公共成员方法对象的数组，包括继承的<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Method[] getMethods()</span><br></pre></td></tr></table></figure></li>
<li>返回所有成员方法对象的数组，不包括继承的<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Method[] getDeclaredMethods()</span><br></pre></td></tr></table></figure></li>
<li>返回单个公共成员方法对象<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Method <span class="title">getMethod</span><span class="params">(String name, Class&lt;?&gt;...parameterTypes)</span>：</span></span><br></pre></td></tr></table></figure></li>
<li>返回单个成员方法对象<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Method <span class="title">getDeclaredMethod</span><span class="params">(String name, Class&lt;?&gt;...parameterTypes)</span></span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="5-2-Method类中用于调用成员方法的方法"><a href="#5-2-Method类中用于调用成员方法的方法" class="headerlink" title="5.2. Method类中用于调用成员方法的方法"></a>5.2. Method类中用于调用成员方法的方法</h3><ul>
<li>调用obj对象的成员方法，参数是args，返回值是Object类型<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Object <span class="title">invoke</span><span class="params">(Object obj, Object...args)</span>：</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="5-3-反射获取成员方法并使用练习"><a href="#5-3-反射获取成员方法并使用练习" class="headerlink" title="5.3. 反射获取成员方法并使用练习"></a>5.3. 反射获取成员方法并使用练习</h3><ul>
<li>通过反射实现如下操作<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line">s.method1();</span><br><span class="line">s.method2(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">String ss = s.method3(<span class="string">&quot;张三&quot;</span>, <span class="number">19</span>);<span class="comment">//method3方法有返回值</span></span><br><span class="line">s.function();<span class="comment">//function方法是私有的</span></span><br></pre></td></tr></table></figure></li>
<li>实现<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取Class对象</span></span><br><span class="line">Class&lt;?&gt; c = Class.forName(<span class="string">&quot;a.Student&quot;</span>);</span><br><span class="line"><span class="comment">//Student s = new Student();</span></span><br><span class="line">Constructor&lt;?&gt; con = c.getConstructor();</span><br><span class="line">Object obj = con.newInstance();</span><br><span class="line"><span class="comment">//s.method1()</span></span><br><span class="line">Method m1 = c.getMethod(<span class="string">&quot;method1&quot;</span>);</span><br><span class="line">m1.invoke(obj);</span><br><span class="line"><span class="comment">//s.method2(&quot;张三&quot;);</span></span><br><span class="line">Method m2 = c.getMethod(<span class="string">&quot;method2&quot;</span>, String.class);</span><br><span class="line">m2.invoke(obj);</span><br><span class="line"><span class="comment">//String ss = s.method3(&quot;张三&quot;, 30);//method3方法有返回值</span></span><br><span class="line">Method m3 = c.getMethod(<span class="string">&quot;method3&quot;</span>, String.class, <span class="keyword">int</span>.class);</span><br><span class="line">Object o = m3.invoke(obj, <span class="string">&quot;张三&quot;</span>, <span class="number">19</span>);</span><br><span class="line"><span class="comment">//s.function();//function方法是私有的</span></span><br><span class="line">Method m4 = c.getDeclaredMethod(<span class="string">&quot;function&quot;</span>);</span><br><span class="line">m4.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">m4.invoke(obj);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="六、反射练习"><a href="#六、反射练习" class="headerlink" title="六、反射练习"></a>六、反射练习</h2><h3 id="6-1-练习1"><a href="#6-1-练习1" class="headerlink" title="6.1. 练习1"></a>6.1. 练习1</h3><ul>
<li>我有一个ArrayList<Integer>集合，现在我想在这个集合中添加一个字符串数据，如何实现？<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建集合</span></span><br><span class="line">ArrayList&lt;Integer&gt; array = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"><span class="comment">//得到Class对象</span></span><br><span class="line">Class&lt;? extends ArrayList&gt; c = array.getClass();</span><br><span class="line"><span class="comment">//得到add方法，add方法的参数类型为Object类型</span></span><br><span class="line">Method m = c.getMethod(<span class="string">&quot;add&quot;</span>, Object.class);</span><br><span class="line"><span class="comment">//在集合中添加字符串</span></span><br><span class="line">m.invoke(array, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">m.invoke(array, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">m.invoke(array, <span class="string">&quot;java&quot;</span>);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="6-2-练习2"><a href="#6-2-练习2" class="headerlink" title="6.2. 练习2"></a>6.2. 练习2</h3><ul>
<li>通过配置文件运行类中的方法，只需修改文件，就可以使用同样的代码执行不同类中的方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置文件中的内容</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    class.txt//文件名</span></span><br><span class="line"><span class="comment">    className=com.itheima.Student</span></span><br><span class="line"><span class="comment">    methodName=study</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//加载数据</span></span><br><span class="line">Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;class.txt&quot;</span>);</span><br><span class="line">prop.load(fr);</span><br><span class="line">fr.close();</span><br><span class="line">String className = prop.getProperty(<span class="string">&quot;className&quot;</span>);</span><br><span class="line">String methodName = prop.getProperty(<span class="string">&quot;methodName&quot;</span>);</span><br><span class="line"><span class="comment">//通过反射来使用</span></span><br><span class="line">Class&lt;?&gt; c = Class.forName(className);</span><br><span class="line"><span class="comment">//等同于Class&lt;?&gt; c = Class.forName(&quot;com.itheima.Student&quot;);</span></span><br><span class="line"><span class="comment">//通过无参构造方法创建一个对象</span></span><br><span class="line">Constructor&lt;?&gt; con = c.getConstructor();</span><br><span class="line">Object obj = con.newInstance();</span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line">Method m = c.getMethod(methodName);<span class="comment">//study</span></span><br><span class="line">m.invoke(obj);</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之类型转换</title>
    <url>/2021/03/31/Java%E4%B9%8B%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h2 id="一、自动类型转换"><a href="#一、自动类型转换" class="headerlink" title="一、自动类型转换"></a>一、自动类型转换</h2><ul>
<li>把一个表示数据范围小的数值或者变量赋值给另一个表示数据范围大的变量</li>
<li>范例<ul>
<li><code>double d = 10;</code></li>
</ul>
</li>
<li><code>byte</code> -&gt; <code>short</code> -&gt; <code>int</code> -&gt; <code>long</code> -&gt; <code>float</code> -&gt; <code>double</code></li>
<li><code>char</code> -&gt; <code>int</code> -&gt; <code>long</code> -&gt; <code>float</code> -&gt; <code>double</code><a id="more"></a>

</li>
</ul>
<h2 id="二、强制类型转换"><a href="#二、强制类型转换" class="headerlink" title="二、强制类型转换"></a>二、强制类型转换</h2><ul>
<li>把一个表示数据范围大的数值或者变量赋值给另一个表示数据范围小的变量</li>
<li>格式<ul>
<li>目标数据类型 变量名 = （目标数据类型）值或者变量;</li>
</ul>
</li>
<li>范例：<code>int k = (int)88.88;</code><ul>
<li>`强制转换后k的值为88，小数点后面的值没有了，造成了数据的丢失，一般不建议使用强制类型转换</li>
</ul>
</li>
</ul>
<!--more-->
]]></content>
      <categories>
        <category>技术</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之流程控制</title>
    <url>/2021/03/31/Java%E4%B9%8B%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<h2 id="一、顺序结构"><a href="#一、顺序结构" class="headerlink" title="一、顺序结构"></a>一、顺序结构</h2><ul>
<li>顺序结构是程序中最简单最基本的流程控制，没有特定的语法结构，按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。</li>
<li>它是从上往下依次执行的。<a id="more"></a>

</li>
</ul>
<h2 id="二、分支结构"><a href="#二、分支结构" class="headerlink" title="二、分支结构"></a>二、分支结构</h2><h3 id="2-1-if语句"><a href="#2-1-if语句" class="headerlink" title="2.1. if语句"></a>2.1. if语句</h3><ul>
<li>格式1<ul>
<li>if（关系表达式）{语句体；}</li>
</ul>
</li>
<li>格式2<ul>
<li>if（关系表达式）{语句体；}else{语句体；}</li>
</ul>
</li>
<li>格式3<ul>
<li>if（关系表达式1）{语句体1；}else if（关系表达式2）{语句体2；} ···  else{语句体n+1；}</li>
</ul>
</li>
</ul>
<h3 id="2-2-switch语句"><a href="#2-2-switch语句" class="headerlink" title="2.2. switch语句"></a>2.2. switch语句</h3><ul>
<li>格式<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">        语句体<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">        语句体<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    ……</span><br><span class="line">   <span class="keyword">default</span>:</span><br><span class="line">       语句体n+<span class="number">1</span>;</span><br><span class="line">       <span class="keyword">break</span>;<span class="comment">//default中的break可以省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在switch语句中，如果case控制的语句体后面不写break，将会出现穿透现象，在不判断下一个case值的情况下，向下运行，直到遇到break，或者整体switch语句结束</li>
</ul>
<h2 id="三、循环结构"><a href="#三、循环结构" class="headerlink" title="三、循环结构"></a>三、循环结构</h2><h3 id="3-1-循环结构的组成"><a href="#3-1-循环结构的组成" class="headerlink" title="3.1. 循环结构的组成"></a>3.1. 循环结构的组成</h3><ul>
<li>初始化语句：用于表示循环开启时的起始状态，简单说就是循环开始的时候是什么样的</li>
<li>条件判断语句：用于表示循环反复执行的条件，简单说就是判断循环是否能一直执行下去。</li>
<li>循环体语句：用于表示循环反复执行的内容，简单说就是循环反复执行的事情。</li>
<li>条件控制语句：用于表示循环执行中每次变化的内容，简单说就是控制循环是否能执行下去</li>
</ul>
<h3 id="3-2-循环结构对应的语法"><a href="#3-2-循环结构对应的语法" class="headerlink" title="3.2. 循环结构对应的语法"></a>3.2. 循环结构对应的语法</h3><ul>
<li>初始化语句：这里可以是一条或者多条语句，这些语句可以完成一些初始化操作。</li>
<li>条件判断语句：这里使用一个结果值为boolean类型的表达式，这个表达式能决定是否执行循环体。</li>
<li>循环体语句：这里可以是任意语句，这些语句将反复执行。</li>
<li>条件控制语句：这里通常是使用一条语句类改变变量的值，从而达到控制循环是否继续向下执行的效果。常见i++，i–这样的操作。</li>
</ul>
<h3 id="3-3-for循环语句"><a href="#3-3-for循环语句" class="headerlink" title="3.3. for循环语句"></a>3.3. for循环语句</h3><ul>
<li>格式<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化语句, 条件判断语句, 条件控制语句)</span><br><span class="line">&#123;</span><br><span class="line">    循环体语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="3-4-while循环语句"><a href="#3-4-while循环语句" class="headerlink" title="3.4. while循环语句"></a>3.4. while循环语句</h3><ul>
<li>格式<ul>
<li>初始化语句;<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件判断语句)</span><br><span class="line">&#123;</span><br><span class="line">    循环体语句;</span><br><span class="line">    条件控制语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="3-5-do…while循环语句"><a href="#3-5-do…while循环语句" class="headerlink" title="3.5. do…while循环语句"></a>3.5. do…while循环语句</h3><ul>
<li>格式<ul>
<li>初始化语句<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    循环语句;</span><br><span class="line">    条件控制语句;</span><br><span class="line">&#125;<span class="keyword">while</span>(条件判断语句);</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="3-6-三种循环的区别"><a href="#3-6-三种循环的区别" class="headerlink" title="3.6. 三种循环的区别"></a>3.6. 三种循环的区别</h3><ul>
<li>for循环和while循环先判断条件是否成立，然后决定是否执行循环体（先判断后执行）</li>
<li><code>do……while</code>循环先执行一次循环体，然后判断条件是否成立，是否继续执行循环体（先执行后判断）</li>
<li>for和while的区别<ul>
<li>条件控制语句所控制的自增变量，因为归属for循环的语法结构中，在for循环结束后，就不能再次被访问到了。</li>
<li>条件控制语句所控制的自增变量，对于while循环来说不归属其语法结构中，在while循环结束后，该变量还可以继续使用。</li>
</ul>
</li>
<li>死循环格式<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(;;)&#123;&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;&#125;</span><br><span class="line"><span class="keyword">do</span>&#123;&#125;<span class="keyword">while</span>(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure></li>
<li>命令提示窗口中Ctrl+C可以结束死循环</li>
</ul>
<h2 id="四、跳转控制语句"><a href="#四、跳转控制语句" class="headerlink" title="四、跳转控制语句"></a>四、跳转控制语句</h2><ul>
<li>continue用在循环中，基于条件控制，跳过某次循环体内容的执行，继续下一次的执行。</li>
<li>break用在循环中，基于条件控制，终止循环体内容的执行，也就是说结束当前的整个循环。</li>
</ul>
<h2 id="五、循环嵌套"><a href="#五、循环嵌套" class="headerlink" title="五、循环嵌套"></a>五、循环嵌套</h2><ul>
<li>分支语句中包含分支语句称为分支嵌套</li>
<li>循环语句中包含循环语句称为循环嵌套</li>
</ul>
<!--more-->
]]></content>
      <categories>
        <category>技术</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之类加载</title>
    <url>/2021/03/31/Java%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><ul>
<li>当程序要使用某个类时，如果该类还未被加载到内存中，则系统会通过类的加载、类的连接、类的初始化这三个步骤来对类进行初始化。如果不出现以外情况，JVM将会连续完成这三个步骤，所以有时也把这三个步骤统称为类加载或者类初始化。<a id="more"></a>

</li>
</ul>
<h2 id="二、类的加载"><a href="#二、类的加载" class="headerlink" title="二、类的加载"></a>二、类的加载</h2><ul>
<li>就是指将class文件读入内存，并为之创建一个java.lang.Class对象</li>
<li>任何类被使用时，系统都会为之建立一个java.lang.Class对象</li>
</ul>
<h2 id="三、类的连接"><a href="#三、类的连接" class="headerlink" title="三、类的连接"></a>三、类的连接</h2><ul>
<li>验证阶段：用于检验被加载的类是否有正确的内部结构，并和其他类协调一致。</li>
<li>准备阶段：负责为类的类变量分配内存，并设置默认初始化值。</li>
<li>解析阶段：将类的二进制数据中的符号引用替换为直接引用。</li>
</ul>
<h2 id="四、类的初始化"><a href="#四、类的初始化" class="headerlink" title="四、类的初始化"></a>四、类的初始化</h2><ul>
<li>在该阶段，主要就是对类变量进行初始化</li>
</ul>
<h2 id="五、类的初始化步骤"><a href="#五、类的初始化步骤" class="headerlink" title="五、类的初始化步骤"></a>五、类的初始化步骤</h2><ul>
<li>(1)例如类还未被加载和连接，则程序先加载并连接该类</li>
<li>(2)例如该类的直接父类还未被初始化，则先初始化其直接父类</li>
<li>(3)例如类中有初始化语句，则系统依次执行这些初始化语句</li>
<li>注意：在执行第2个步骤的时候，系统对直接父类的初始化步骤也遵循初始化步骤1-3</li>
</ul>
<h2 id="六、类的初始化时机"><a href="#六、类的初始化时机" class="headerlink" title="六、类的初始化时机"></a>六、类的初始化时机</h2><ul>
<li>创建类的实例</li>
<li>调用类的类方法</li>
<li>访问类或者接口的类变量，或者为该类变量赋值</li>
<li>使用反射方式来强制创建某个类或接口对应的<code>java.lang.Class</code>对象</li>
<li>初始化某个类的子类</li>
<li>直接使用java.exe命令来运行某个主类</li>
</ul>
<h2 id="七、类加载器"><a href="#七、类加载器" class="headerlink" title="七、类加载器"></a>七、类加载器</h2><h3 id="7-1-类加载器的作用"><a href="#7-1-类加载器的作用" class="headerlink" title="7.1. 类加载器的作用"></a>7.1. 类加载器的作用</h3><ul>
<li>负责将.class文件加载到内存中，并为之生成对应的java.lang.Class对象</li>
<li>虽然我们不用过分关心类加载机制，但是了解这个机制我们就能更好的理解程序的运行</li>
</ul>
<h3 id="7-2-JVM的类加载机制"><a href="#7-2-JVM的类加载机制" class="headerlink" title="7.2. JVM的类加载机制"></a>7.2. JVM的类加载机制</h3><ul>
<li>全盘负责<ul>
<li>就是当一个类加载器负责加载某个Class时，该Class所依赖的和引用的其他Class也将由该类加载器负责载入，除非显示使用另外一个类加载器来载入</li>
</ul>
</li>
<li>父类委托<ul>
<li>就是当一个类加载器负责加载某个Class时，先让父类加载器试图加载该Class，只有在父类加载器无法加载该类时才尝试从自己的类路径中加载该类</li>
</ul>
</li>
<li>缓存机制<ul>
<li>保证所有加载过的Class都会被缓存，当程序需要使用某个Class对象时，类加载器先从缓存区中搜索该Class，只有当缓存区中不存在该Class对象时，系统才会读取该类对应的二进制数据，并将其转换成Class对象，存储到缓存区</li>
</ul>
</li>
<li>ClassLoader<ul>
<li>是负责加载类的对象</li>
</ul>
</li>
</ul>
<h3 id="7-3-Java运行时具有以下内置类加载器"><a href="#7-3-Java运行时具有以下内置类加载器" class="headerlink" title="7.3. Java运行时具有以下内置类加载器"></a>7.3. Java运行时具有以下内置类加载器</h3><ul>
<li>Bootstrap class loader<ul>
<li>它是虚拟机的内置类加载器，通常表示为null，并且没有父null</li>
</ul>
</li>
<li>Platform class loader<ul>
<li>平台类加载器可以看到所有平台类，平台类包括由平台类加载器或其祖先定义的Java SE平台API，其实现类和JDK特定的运行时类</li>
</ul>
</li>
<li>System class loader<ul>
<li>它也被称为应用程序类加载器，与平台类加载器不同，系统类加载器通常用于定义应用程序类路径，模块路径和JDK特定工具上的类</li>
</ul>
</li>
<li>类加载器的继承关系<ul>
<li>System的父加载器为Platform，而Platform的父加载器为Bootstrap</li>
</ul>
</li>
</ul>
<h3 id="7-4-ClassLoader中的两个方法"><a href="#7-4-ClassLoader中的两个方法" class="headerlink" title="7.4. ClassLoader中的两个方法"></a>7.4. ClassLoader中的两个方法</h3><ul>
<li>返回用于委派的系统类加载器<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> ClassLoader <span class="title">getSystemClassLoader</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></li>
<li>返回父类加载器进行委派<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">ClassLoader <span class="title">getParent</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
<!--more-->
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub和git的相关操作</title>
    <url>/2021/01/12/GitHub%E5%92%8Cgit%E7%9A%84%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="一、全局配置"><a href="#一、全局配置" class="headerlink" title="一、全局配置"></a>一、全局配置</h2><ul>
<li>添加全局范围的邮箱<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.email 邮箱</span><br></pre></td></tr></table></figure></li>
<li>添加全局范围的用户名<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name 用户名</span><br></pre></td></tr></table></figure></li>
<li>查看用户配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global -l</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="二、初始化一个git仓库"><a href="#二、初始化一个git仓库" class="headerlink" title="二、初始化一个git仓库"></a>二、初始化一个git仓库</h2><ul>
<li>将当前文件夹作为git仓库<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li>
<li>或者将当前文件夹下的xxx文件夹作为git仓库<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init xxx</span><br></pre></td></tr></table></figure></li>
<li>初始化后会出现一个名为<code>.git</code>的隐藏文件夹</li>
</ul>
<a id="more"></a>


<h2 id="三、添加远程仓库GitHub"><a href="#三、添加远程仓库GitHub" class="headerlink" title="三、添加远程仓库GitHub"></a>三、添加远程仓库GitHub</h2><ul>
<li>给远程仓库<code>git@github.com:phd99/test.git</code>设置一个别名（远程主机名）<code>test</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add [别名] git@github.com:phd99&#x2F;test.git</span><br><span class="line">git remote add origin git@github.com:phd99&#x2F;test.git</span><br></pre></td></tr></table></figure></li>
<li>查看当前设置了哪些远程仓库的别名<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure></li>
<li>删除远程仓库的别名<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote rm [别名]</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="四、配置验证信息"><a href="#四、配置验证信息" class="headerlink" title="四、配置验证信息"></a>四、配置验证信息</h2><ul>
<li>生成<code>SSH</code>。创建过程中会要求设置密码，可以不设置密码，直接按回车键<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;email&quot;</span><br></pre></td></tr></table></figure></li>
<li><code>id_rsa</code>是私钥，<code>id_rsa.pub</code>是公钥，默认位置在<code>C:\Users\用户名\.ssh</code>中。</li>
<li>将公钥添加到<code>github</code>中<ul>
<li><code>Settings</code>-&gt;<code>SSH and GPG keys</code>-&gt;<code>New SSH key</code></li>
<li>将<code>id_rsa.pub</code>公钥文件中的内容复制到<code>Key</code>中</li>
<li>公钥名称任意</li>
</ul>
</li>
<li>查看是否添加成功<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="五、克隆远程仓库中的项目"><a href="#五、克隆远程仓库中的项目" class="headerlink" title="五、克隆远程仓库中的项目"></a>五、克隆远程仓库中的项目</h2><ul>
<li>克隆默认分支中的项目<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;phd99&#x2F;test.git</span><br></pre></td></tr></table></figure></li>
<li>克隆指定分支中的项目<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone -b 分支名 https:&#x2F;&#x2F;github.com&#x2F;phd99&#x2F;test.git</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="六、下载远程仓库中的项目"><a href="#六、下载远程仓库中的项目" class="headerlink" title="六、下载远程仓库中的项目"></a>六、下载远程仓库中的项目</h2><ul>
<li>下载远程仓库中的项目，并和本地仓库中的项目合并<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git pull origin myblog</span><br></pre></td></tr></table></figure></li>
<li><code>pull</code>和<code>clone</code>的区别<ul>
<li><code>clone</code>是从无到有的过程</li>
<li><code>pull</code>是已有本地仓库，想获取最新的项目内容</li>
</ul>
</li>
</ul>
<h2 id="七、上传文件步骤"><a href="#七、上传文件步骤" class="headerlink" title="七、上传文件步骤"></a>七、上传文件步骤</h2><h3 id="7-1-将内容写入暂存区"><a href="#7-1-将内容写入暂存区" class="headerlink" title="7.1. 将内容写入暂存区"></a>7.1. 将内容写入暂存区</h3><ul>
<li><code>.</code>表示将文件夹中的所有内容都写入暂存区<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="7-2-将暂存区内容添加到本地仓库中"><a href="#7-2-将暂存区内容添加到本地仓库中" class="headerlink" title="7.2. 将暂存区内容添加到本地仓库中"></a>7.2. 将暂存区内容添加到本地仓库中</h3><ul>
<li>在git中执行如下命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -m [备注信息]</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="7-3-上传代码到远程仓库中并合并"><a href="#7-3-上传代码到远程仓库中并合并" class="headerlink" title="7.3. 上传代码到远程仓库中并合并"></a>7.3. 上传代码到远程仓库中并合并</h3><ul>
<li>格式<ul>
<li><code>git push -u &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</code></li>
</ul>
</li>
<li>使用<code>-u</code>后，以后可以直接<code>git push</code>省略了后面的内容</li>
<li>若<code>本地分支名</code>和<code>远程分支名</code>相同，则可以省略<code>远程分支名</code>不写</li>
<li>范例<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push -u origin main:main</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="八、查看当前的本地分支名"><a href="#八、查看当前的本地分支名" class="headerlink" title="八、查看当前的本地分支名"></a>八、查看当前的本地分支名</h2><ul>
<li>在git中执行如下命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="九、修改GitHub仓库的默认分支"><a href="#九、修改GitHub仓库的默认分支" class="headerlink" title="九、修改GitHub仓库的默认分支"></a>九、修改GitHub仓库的默认分支</h2><ul>
<li>进入仓库-&gt;<code>Settings</code>-&gt;<code>Branches</code>-&gt;<code>Default branch</code></li>
</ul>
<!--more-->
]]></content>
      <categories>
        <category>技术</category>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Hexo和github page和coding page搭建个人博客</title>
    <url>/2021/01/10/%E4%BD%BF%E7%94%A8Hexo%E5%92%8Cgithub-page%E5%92%8Ccoding-page%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="一、搭建环境"><a href="#一、搭建环境" class="headerlink" title="一、搭建环境"></a>一、搭建环境</h2><ul>
<li>Windows</li>
</ul>
<h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><ul>
<li>安装 <a href="https://nodejs.org/en/">Node.js</a></li>
<li>安装 <a href="http://git-scm.com/">Git</a></li>
<li>安装 <a href="https://hexo.io/zh-cn/">Hexo</a><ul>
<li>鼠标右键打开<code>git bash</code></li>
<li>在<code>在git bash</code>中输入下列命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<a id="more"></a></li>
</ul>
</li>
<li>安装<code>hexo-deployer-git</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li>
<li>查看版本<ul>
<li>查看<code>node</code>的版本<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure></li>
<li>查看<code>npm</code>的版本<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure></li>
<li>查看<code>hexo</code>的版本<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="三、新建网站"><a href="#三、新建网站" class="headerlink" title="三、新建网站"></a>三、新建网站</h2><ul>
<li>初始化<code>hexo</code>，在<code>git bash</code>中输入如下命令。<code>***</code>是文件夹名称，名称任意，如果为空，则默认在当前的文件夹下建立网站。以后的博客内容都在该文件夹中。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init ***</span><br></pre></td></tr></table></figure></li>
<li>进入<code>***</code>文件夹<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ***</span><br></pre></td></tr></table></figure></li>
<li>在<code>***</code>文件夹下执行<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li>
<li>生成静态文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure></li>
<li>启动服务器<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure></li>
<li>访问网站，默认情况下，访问网址为：<a href="http://localhost:4000/">http://localhost:4000/</a></li>
</ul>
<h2 id="四、生成SSH"><a href="#四、生成SSH" class="headerlink" title="四、生成SSH"></a>四、生成SSH</h2><ul>
<li>配置<code>git</code>用户名。<code>-–global</code>参数，用了这个参数，表示你这台机器上所有的<code>Git</code>仓库都会使用这个配置，也可以对某个仓库指定不同的用户名和<code>Email</code>地址，我配置的用户名和邮箱与<code>github</code>和<code>coding</code>平台的相同。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;name&quot;</span><br></pre></td></tr></table></figure></li>
<li>配置<code>git</code>邮箱<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.email &quot;email&quot;</span><br></pre></td></tr></table></figure></li>
<li>查看用户配置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global -l</span><br></pre></td></tr></table></figure></li>
<li>创建<code>SSH</code>，创建过程中会要求设置密码，可以不设置密码，直接按回车键<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;email&quot;</span><br></pre></td></tr></table></figure></li>
<li><code>id_rsa</code>是私钥，<code>id_rsa.pub</code>是公钥，默认位置在<code>C:\Users\用户名\.ssh</code>中。</li>
<li>将公钥添加到<code>github</code>中<ul>
<li><code>Settings</code>-&gt;<code>SSH and GPG keys</code>-&gt;<code>New SSH key</code></li>
<li>将<code>id_rsa.pub</code>公钥文件中的内容复制到<code>Key</code>中</li>
<li>公钥名称任意</li>
<li>查看是否添加成功<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>将公钥添加到<code>coding</code>中<ul>
<li>个人账户设置-&gt;<code>SSH</code>公钥-&gt;新增公钥</li>
<li>将<code>id_rsa.pub</code>公钥文件中的内容复制到公钥内容中</li>
<li>公钥名称任意</li>
<li>查看是否添加成功<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@git.coding.net</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="五、将博客部署到-github"><a href="#五、将博客部署到-github" class="headerlink" title="五、将博客部署到 github"></a>五、将博客部署到 <a href="https://github.com/">github</a></h2><ul>
<li>在<code>github</code>中创建一个仓库，仓库名称为<code>***.github.io</code>,<code>***</code>为<code>github</code>的用户名。</li>
<li>打开站点配置文件<code>_config.yml</code>，添加下列内容<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:</span><br><span class="line">    github: git@github.com:phd99&#x2F;phd99.github.io.git,master</span><br></pre></td></tr></table></figure></li>
<li>将博客内容部署到<code>github</code>，- 部署成功后，可以访问<code>http://***.github.io</code>查看自己的个人博客<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="六、将博客部署到-coding"><a href="#六、将博客部署到-coding" class="headerlink" title="六、将博客部署到 coding"></a>六、将博客部署到 <a href="https://coding.net/">coding</a></h2><ul>
<li>在<code>coding</code>中创建一个项目，名称任意</li>
<li>在该项目中创建一个代码仓库，名称任意，仓库类型为<code>git</code>仓库</li>
<li>开启<code>coding pages</code>服务<ul>
<li>在该项目中选择持续部署-&gt;静态网站</li>
<li>部署成功后会提供一个网络地址，使用该<code>url</code>查看自己的博客</li>
</ul>
</li>
<li>打开站点配置文件<code>_config.yml</code>，修改下列内容<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:</span><br><span class="line">    coding: git@e.coding.net:phd99&#x2F;phd99&#x2F;phd99.git,master</span><br><span class="line">    github: git@github.com:phd99&#x2F;phd99.github.io.git,master</span><br></pre></td></tr></table></figure></li>
<li>将博客内容部署到<code>coding</code>，- 部署成功后，可以访问coding提供的网络地址来查看个人博客<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="七、设置个人域名"><a href="#七、设置个人域名" class="headerlink" title="七、设置个人域名"></a>七、设置个人域名</h2><ul>
<li>如果购买了域名，可以设置通过购买的域名来访问个人博客，我是在阿里云上购买的域名</li>
</ul>
<h3 id="7-1-github中的设置"><a href="#7-1-github中的设置" class="headerlink" title="7.1. github中的设置"></a>7.1. github中的设置</h3><ul>
<li>登录<code>github</code>-&gt;进入仓库-&gt;<code>Settings</code>-&gt;<code>Options</code>-&gt;<code>GitHub Pages</code><ul>
<li>在<code>Custom domain</code>中添加自己购买的域名</li>
<li>点击保存</li>
<li>勾选<code>Enforce HTTPS</code></li>
</ul>
</li>
<li>登录<a href="https://www.aliyun.com/">阿里云</a>-&gt;账号管理-&gt;域名控制台-&gt;找到要设置的域名-&gt;解析-&gt;添加记录<ul>
<li>记录类型为<code>CNAME</code></li>
<li>主机记录为<code>@</code>，再重新添加一条记录并将主机记录改为<code>www</code>，其他的不变</li>
<li>解析线路为默认，若还使用了coding，可以将github设置为境外，将coding设置为默认</li>
<li>记录值为<code>***.github.io</code></li>
</ul>
</li>
<li>在博客根目录下<code>source</code>文件夹中创建一个文件，名称为<code>CNAME</code>，没有后缀</li>
<li>编辑<code>CNAME</code>文件，将购买的域名输入到该文件内<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">www.phd99.com</span><br></pre></td></tr></table></figure></li>
<li>重新部署一下，过一会儿就可以通过访问购买的域名来查看个人博客了<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="7-2-coding中的设置"><a href="#7-2-coding中的设置" class="headerlink" title="7.2. coding中的设置"></a>7.2. coding中的设置</h3><ul>
<li>登录<code>coding</code>-&gt;进入项目-&gt;持续部署-&gt;静态网站-&gt;自定义域名-&gt;新建域名-&gt;输入购买的域名-&gt;确定</li>
<li>添加域名后，网站会自动重新部署，并且同时去申请<code>SSL</code>证书<ul>
<li>申请证书时，会提供一些信息，需要给域名添加一条记录，添加之后，过一会儿，<code>SSL</code>证书就申请成功了，此时域名也添加成功了</li>
</ul>
</li>
<li>登录<a href="https://www.aliyun.com/">阿里云</a>-&gt;账号管理-&gt;域名控制台-&gt;找到要设置的域名-&gt;解析-&gt;添加记录<ul>
<li>记录类型为<code>CNAME</code></li>
<li>主机记录为<code>@</code>，再重新添加一条记录并将主机记录改为<code>www</code>，其他的不变</li>
<li>解析线路为默认</li>
<li>记录值为<code>***.com.cdn.dnsv1.com</code></li>
</ul>
</li>
<li>登录<code>coding</code>-&gt;进入项目-&gt;持续部署-&gt;静态网站-&gt;重新部署</li>
</ul>
<!--more-->
]]></content>
      <categories>
        <category>技术</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
